/*
 * Copyright (c) 2025 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://edgeimpulse.com/legal/terms-of-service) or Enterprise Terms of
 * Service (https://edgeimpulse.com/legal/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 13.03.2025 03:35:16

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#if defined(EI_MODEL_SECTION) && (defined(__GNUC__) || defined(__clang__))
#define MODEL_SECTION(X) __attribute__((section(STRINGIZE_VALUE_OF(X))))
#else
#define MODEL_SECTION(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 242592;
#else
constexpr int kTensorArenaSize = 241568;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,96,96,1 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(8) int32_t tensor_data2[3] = { 28038, -36288, -39419, };
const TfArray<1, int> tensor_dimension2 = { 1, { 3 } };
const TfArray<3, float> quant2_scale = { 3, { 0.00018146161164622754, 0.00015365179569926113, 0.0001428377436241135, } };
const TfArray<3, int> quant2_zero = { 3, { 0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data3[3*1*1*32] = { 
  /* [0][0][][] */ 79,38,119,-90,-81,7,14,14,-7,81,41,1,-11,-57,107,26,-35,108,43,90,-53,-29,17,-54,-127,65,-27,33,96,-9,-17,-19, 
  /* [1][0][][] */ 48,-29,-55,26,-5,127,-41,-1,118,-59,-1,-96,-48,106,29,-57,93,-58,15,-76,-92,24,103,79,30,38,-37,-6,-87,-37,-6,-12, 
  /* [2][0][][] */ -36,86,-67,88,91,-39,-88,123,88,31,127,-15,-91,-89,70,116,-81,-69,25,-97,86,120,-67,-75,90,-42,-12,-109,-1,-62,89,-7, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 3,1,1,32 } };
const TfArray<3, float> quant3_scale = { 3, { 0.0040116077288985252, 0.0033968107309192419, 0.0031577423214912415, } };
const TfArray<3, int> quant3_zero = { 3, { 0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data4[32] = { 449, 253, -1026, 455, 505, 754, 1264, 452, 579, 907, 380, 1678, -1056, 478, -177, 231, 544, -117, -2098, -1545, -1837, 550, 282, -1409, 329, -912, -1055, -845, 1945, -1407, -506, -1189, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 4.9471120291855186e-05, 4.2877010855590925e-05, 5.0531019951449707e-05, 4.4846256059827283e-05, 5.0260772695764899e-05, 4.5220676838653162e-05, 5.9390098613221198e-05, 5.341680662240833e-05, 5.3917672630632296e-05, 5.4127354815136641e-05, 4.8559330025454983e-05, 5.4963726142887026e-05, 5.3561594540951774e-05, 5.7005199778359383e-05, 5.1692404667846859e-05, 5.1614151743706316e-05, 4.7470039135077968e-05, 5.4489210015162826e-05, 4.8961050197249278e-05, 4.6071385440882295e-05, 4.8894264182308689e-05, 4.1998922824859619e-05, 5.504475484485738e-05, 4.4529886508826166e-05, 4.3638330680551007e-05, 4.2582076275721192e-05, 4.2324445530539379e-05, 5.8912159147439525e-05, 5.2634011808549985e-05, 4.5477194362320006e-05, 4.0131031710188836e-05, 4.6301280235638842e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data5[32*1*1*96] = { 
  /* [0][0][][] */ -33,-27,87,-12,68,-8,-95,-74,66,-95,-74,-7,51,2,-9,17,-73,-42,-82,-39,-37,-64,1,63,-69,-2,75,-32,100,20,-57,-55,77,-53,-62,44,-68,-71,-57,38,41,-100,-127,91,53,-113,41,-31,-1,-58,-42,32,-52,-17,-82,81,-40,60,63,-85,-38,79,-28,14,-16,22,68,72,54,35,67,-82,59,-111,40,71,-67,5,-32,32,40,-9,48,-54,-67,-15,-71,97,25,111,-31,-90,8,44,34,1, 
  /* [1][0][][] */ -34,43,-44,22,-68,72,13,-23,82,-101,-104,83,64,-8,-15,78,110,-68,3,46,-55,2,37,21,17,-7,-61,110,0,-3,127,-61,14,108,-18,6,-4,-1,-52,-103,-57,-9,-27,-86,-33,60,-12,-50,-77,-55,89,40,-54,80,-89,-34,40,51,61,85,-97,89,-66,-56,-80,45,33,54,99,58,24,-23,-91,24,-37,45,88,-116,-34,80,-74,95,-107,-101,45,111,-48,-82,79,61,101,24,59,99,-9,-39, 
  /* [2][0][][] */ 14,6,-70,60,-27,-50,87,52,-105,78,-52,78,46,-36,39,-106,-49,2,32,27,-100,-36,63,6,-23,57,58,-15,-73,36,62,56,-78,-37,-93,-100,-87,61,58,-23,-53,-66,2,-27,-85,69,-33,-78,127,9,63,-28,-56,23,19,-7,-16,59,-63,-20,-38,22,-45,65,55,12,17,47,-95,102,-18,-78,6,-51,3,0,-64,27,-21,-14,7,-88,14,-6,-21,-97,-39,-47,45,64,-40,-14,-52,-85,-59,-64, 
  /* [3][0][][] */ 82,19,50,-42,-79,30,-127,36,72,-7,76,-9,94,100,86,20,75,61,-72,-8,123,-53,-47,-125,-29,-112,-64,106,35,-66,55,13,-43,-17,-5,-16,-98,-46,50,48,-51,-105,-120,19,75,48,-42,-75,32,-59,4,-26,75,50,50,-76,-110,-104,-108,-33,-67,44,-26,33,33,-11,-49,-14,-10,-111,21,96,21,-125,62,-39,46,36,104,-40,-78,-111,-8,48,43,50,-23,-85,-59,46,13,-95,72,-73,-71,3, 
  /* [4][0][][] */ 56,95,19,40,-40,-26,0,-26,67,32,10,11,33,-12,3,-33,-13,-28,-81,-19,99,-52,76,11,-21,-20,51,-31,-35,42,-52,-37,46,101,17,-83,-84,-39,-77,8,-72,-60,-77,-53,33,104,36,48,-24,-19,-60,-81,-69,53,-99,28,27,-92,25,27,7,-51,-26,-72,-44,59,-7,-13,36,-127,-59,-69,-32,-35,92,49,64,-72,9,-29,9,-28,-122,-33,19,64,85,16,-78,-49,50,37,3,88,-120,-36, 
  /* [5][0][][] */ 78,-67,78,52,30,-127,-10,66,117,-114,19,-60,35,90,58,29,20,58,-69,94,53,70,26,-32,-92,-60,10,-75,56,53,-29,-73,-14,9,-41,12,-76,-24,64,41,-102,-105,-10,104,-13,-26,-30,-44,-108,94,5,-42,48,42,20,-11,23,57,-97,-15,56,-37,45,-89,-29,100,-2,29,83,-43,105,-42,-44,58,-7,-52,28,-50,33,80,98,-8,8,40,-106,77,-7,58,67,-70,88,82,-16,22,82,-76, 
  /* [6][0][][] */ 37,-18,108,91,-29,-13,44,76,-29,-33,20,-10,65,54,70,-40,46,15,30,102,-57,-77,101,72,-3,-25,1,-15,-1,-79,77,-19,-48,-60,-18,-54,31,74,-34,67,79,85,51,1,-48,96,-9,19,-53,33,27,4,76,-23,108,26,28,15,2,127,-65,18,67,3,7,48,86,-7,64,44,-62,17,61,8,-30,9,-31,-29,-35,9,57,36,79,36,2,-10,9,-31,79,95,99,33,-26,1,64,28, 
  /* [7][0][][] */ 100,64,-10,-34,-72,76,-40,-48,101,-33,-57,-11,51,-50,44,68,41,-13,-37,51,52,41,3,52,-62,57,31,53,-56,89,-18,29,11,29,52,67,-124,12,-1,-56,51,-72,42,63,43,18,82,-81,-6,-28,-127,-75,-21,78,-28,33,81,-87,3,-28,4,2,57,-106,-61,-26,37,30,-66,-28,60,46,69,-36,55,48,-33,-15,-60,46,70,-20,-63,-75,79,32,-67,79,69,8,76,50,-57,-20,-56,-71, 
  /* [8][0][][] */ 23,39,-17,-78,36,5,-81,-2,28,7,50,67,16,-19,-39,-39,-57,65,-70,11,43,3,68,70,-100,58,49,66,-42,35,-88,94,79,-13,47,-5,93,-8,4,65,34,50,-109,-67,6,-5,-26,79,-5,-61,-65,-39,-37,16,-39,-66,9,85,-77,92,102,48,36,53,-27,-18,-1,83,-44,-6,39,13,58,24,21,23,-17,50,78,66,31,47,-127,-93,31,39,65,-10,38,-18,-50,78,-61,-64,-18,25, 
  /* [9][0][][] */ 13,17,109,77,68,-55,-10,-86,38,58,2,40,-10,-42,-88,-1,26,7,-28,-46,1,80,-66,-43,65,4,-11,34,-13,-61,-10,73,33,13,11,-5,-84,25,-6,-57,62,-63,100,-61,57,35,-59,40,30,-1,-15,-22,66,-63,-39,82,105,-52,3,8,-84,64,58,-26,-19,17,72,52,-21,127,94,-68,27,93,-63,-44,-44,-76,-21,90,52,52,77,76,-17,-65,49,11,89,30,-6,89,81,31,40,-36, 
  /* [10][0][][] */ -36,80,90,-69,-36,70,57,-7,48,-15,34,-82,88,79,-17,23,-49,27,-116,-105,-2,40,50,-86,11,25,-105,-80,-47,75,-90,-68,61,90,95,54,-72,-31,-18,-21,-48,68,-127,-18,-85,-27,1,-52,-50,10,-20,-21,41,33,-108,-23,-85,-42,20,-23,-9,65,87,4,79,-48,-90,-7,30,-63,-64,-57,73,-6,-55,88,-1,-8,65,28,60,-9,-9,57,-66,59,92,-12,38,11,7,-61,-60,-30,-95,-81, 
  /* [11][0][][] */ 101,36,35,120,121,64,84,64,91,105,-21,122,26,-25,43,-7,-17,-50,84,61,42,82,43,-44,-33,-32,3,85,89,24,58,14,-26,-25,65,71,1,103,26,-26,20,121,-5,34,-12,-8,-21,-15,57,104,127,79,-18,-33,49,47,1,-12,22,-19,-33,92,85,54,65,85,1,57,92,83,-36,-14,66,123,-32,77,-19,40,-13,105,-33,26,-11,16,73,-23,39,22,-20,46,47,-36,-21,21,-26,25, 
  /* [12][0][][] */ -12,29,-62,-16,49,3,-19,3,-83,39,-35,-7,-56,-13,10,-77,-83,-22,-45,-80,-7,-32,-12,54,-27,-48,50,-92,47,-15,-27,64,-88,-72,-57,-6,-25,-72,-37,11,106,18,-94,-53,-38,-79,-45,66,8,-102,-59,127,5,-25,-71,40,14,-65,21,26,16,58,-23,34,65,2,-54,65,18,104,5,28,40,74,-34,-26,-48,50,-110,-88,-63,62,24,33,-46,3,15,60,-90,-99,47,10,56,-30,-2,37, 
  /* [13][0][][] */ 67,-42,78,52,61,64,25,58,68,-83,23,-18,76,46,69,-45,-96,-37,-51,30,66,3,73,-34,-39,24,25,11,-42,-38,16,39,44,73,3,23,-37,-16,35,68,-65,15,-68,26,-13,-5,-41,-30,14,67,-45,-127,-57,42,61,-42,-83,33,-49,-35,7,99,-43,-13,-45,-34,-46,57,-9,-44,79,13,-65,17,-41,-21,-56,43,70,-43,41,-100,58,-29,-74,-71,62,100,-12,-40,-60,44,78,-39,63,-10, 
  /* [14][0][][] */ -50,-73,67,31,44,-62,-36,-77,-57,-54,58,52,-26,-65,-63,-64,-82,-70,-18,3,-31,26,-7,28,-120,-75,-27,15,-96,-83,-78,13,74,-26,-30,-14,69,74,33,-96,-24,-117,-4,67,36,-87,26,-82,45,24,36,-9,76,-4,-36,3,-77,-4,21,82,-12,-65,-50,31,-81,-16,65,-88,-72,-110,-70,71,-9,33,40,-65,39,-110,41,22,26,-42,-127,-59,-90,-75,-89,88,82,-1,54,-48,47,61,-16,26, 
  /* [15][0][][] */ 25,-7,-4,74,54,-81,22,-92,55,2,-53,7,84,14,-78,-71,60,-23,-91,-27,44,19,59,77,41,54,5,80,6,46,84,-83,-11,15,-50,-7,-96,37,69,-81,23,64,-55,-12,19,-37,-25,-67,-46,-39,-11,9,-104,-67,-41,-3,62,12,-42,81,-67,-59,0,68,-44,85,-82,15,-38,36,54,-67,18,-59,51,-77,6,-15,88,68,-61,52,-127,-34,-78,-21,-60,34,75,57,-73,-29,42,98,-103,41, 
  /* [16][0][][] */ -73,-10,70,-81,35,74,-77,53,54,27,-68,59,-8,-57,-13,-72,65,80,57,74,115,87,-39,25,-20,44,-28,35,-53,42,-16,11,-64,48,68,47,1,60,-14,-29,-5,-41,7,94,54,55,50,-16,-49,-90,-7,86,-15,119,49,28,-35,92,35,9,127,110,42,25,45,-1,-7,52,54,43,-28,12,1,82,62,69,-19,94,-72,-26,17,-104,57,-38,-13,75,73,35,64,24,-32,87,60,-42,-45,39, 
  /* [17][0][][] */ 11,-95,22,107,-5,-66,12,-40,8,-23,54,64,58,38,-102,36,45,44,121,107,-87,-22,1,-15,69,77,-65,5,100,-57,13,54,-24,-30,15,38,-14,113,-47,-38,-33,29,38,-25,-7,-1,100,-25,71,71,42,78,8,44,123,-49,-43,53,-35,-86,10,-73,68,127,-28,-74,55,-76,-90,49,67,24,34,-28,-53,67,68,19,11,-47,20,23,5,-11,-88,49,59,-25,17,74,-59,-76,15,120,4,71, 
  /* [18][0][][] */ -60,64,55,-89,-43,-92,-125,-26,-30,34,-121,-68,-66,36,10,-31,34,-51,42,-56,38,-59,5,-103,7,-112,-48,81,-23,-17,-9,16,-4,-31,-127,-125,-57,-1,-60,14,-52,-5,-17,-48,-114,35,49,4,-2,-47,31,-6,-117,-50,-26,63,-56,-9,10,-102,28,50,-17,-4,-86,-110,-55,66,13,-37,-72,51,-68,-27,-111,-127,37,4,-37,-55,-79,4,-38,-80,99,-31,48,16,-117,-79,-35,49,34,-33,4,-40, 
  /* [19][0][][] */ -14,-6,34,6,22,-90,66,51,49,-61,-5,-36,-109,-2,-75,23,41,-113,63,21,-48,38,-75,-13,33,-94,-3,-86,-101,-127,-60,9,38,-99,-2,-26,-18,-86,-76,-111,32,-124,-83,-20,-99,-4,38,-101,7,2,-56,87,-58,-18,-4,-37,15,53,-29,-52,17,-74,54,43,-87,-31,-47,-28,-36,55,33,-71,-78,-125,-76,-95,-48,-53,-18,60,21,-118,14,47,-101,-36,-19,-31,45,-4,-32,26,-53,71,31,-64, 
  /* [20][0][][] */ -6,47,21,47,-100,75,-28,17,-13,-16,-102,-29,-39,71,-3,-53,-25,-59,-73,-61,-14,-71,-69,-83,48,-94,-118,29,-19,-24,-31,69,45,28,-48,14,1,-59,-48,-119,-88,-35,-79,-115,-39,-23,-35,61,17,-127,-103,33,3,55,12,-14,89,22,84,39,54,-76,-73,-59,-58,-77,-69,-10,-101,-16,-84,28,-60,-101,-12,-23,81,7,58,74,33,12,32,-1,68,81,-20,25,-7,57,34,22,-16,-2,-35,-35, 
  /* [21][0][][] */ 104,87,84,-118,68,-84,31,18,21,-108,-48,24,17,50,-27,-67,-99,-47,-13,-38,118,-24,74,-102,35,-101,-23,80,11,21,-27,-14,7,31,-78,-114,81,53,-95,-31,-45,-22,-22,4,-82,-54,-71,83,-54,-50,-46,41,28,85,-123,35,-63,41,-53,127,63,-58,12,-48,60,44,-27,-51,-80,-65,71,77,34,-71,80,65,-87,-88,75,110,11,85,-33,-98,40,-80,73,-61,-86,74,113,-107,-62,-51,63,-69, 
  /* [22][0][][] */ 15,-48,-48,-83,56,-51,44,41,-60,25,-43,-93,88,-90,-65,-80,15,56,-104,-38,76,-40,23,16,59,-24,-67,73,-32,-40,-81,-76,43,40,23,0,16,-18,-28,-67,-14,-10,-42,77,52,-108,21,-17,-53,-80,-16,-31,-39,-49,-52,29,-52,-14,-33,-23,95,-42,-56,-104,-52,22,-78,-38,90,44,-16,6,-57,4,52,-62,43,-36,58,62,76,-81,-80,-127,36,51,67,-8,-41,23,-67,44,4,-15,-8,40, 
  /* [23][0][][] */ 24,-109,-27,27,69,-125,-18,-60,19,-57,44,56,-14,-125,-13,-66,52,-10,-77,90,50,-103,62,-55,-22,-25,54,-14,35,8,41,-59,-57,5,-12,-3,99,17,-122,2,-85,-24,-13,-126,-87,-112,70,-1,50,-124,-51,-14,49,-85,-58,52,-101,-24,64,8,-118,-103,-74,-26,16,-1,-99,-127,23,-30,66,-31,-33,-3,-64,-115,7,-13,53,70,-72,-72,39,-120,50,-24,68,-50,-109,10,60,-28,64,-79,-1,57, 
  /* [24][0][][] */ -60,-27,-80,-92,-91,-122,-90,-82,83,77,92,34,110,64,-16,-94,-89,23,-22,-68,105,-56,-44,-55,32,-47,68,61,87,66,-19,-53,4,16,48,16,-62,-110,63,-8,-91,-113,40,21,26,-15,8,52,-103,-35,-51,-16,59,75,31,-66,-26,69,9,16,98,9,34,55,-107,100,-37,-72,-77,-4,-39,-13,-41,-25,94,92,70,-118,-76,-65,-75,-107,-115,-127,11,64,-2,-71,32,-94,10,-71,-28,28,-69,-12, 
  /* [25][0][][] */ -104,-74,-96,-35,94,-88,-88,79,26,-73,-44,13,46,-26,-111,-46,-91,95,63,-99,50,56,-29,-72,19,-45,-115,13,48,-101,9,87,118,-122,25,63,127,-81,-41,14,-46,72,-121,-16,72,11,33,8,-81,66,-50,42,22,-34,-79,-13,-13,57,-124,45,98,24,33,24,-21,47,-34,-31,-103,-23,-41,-68,6,-80,42,-2,42,110,-2,-6,25,21,-3,83,-95,-66,-113,-107,-43,-60,69,2,-99,-39,15,-99, 
  /* [26][0][][] */ 27,-126,-42,-32,-109,-24,-25,-23,-119,-127,77,58,-94,-63,-12,-33,84,37,-60,-72,-8,43,74,-9,65,42,-8,22,-8,-15,-106,-23,-50,-78,-111,-109,-57,89,-62,82,-103,87,41,8,-88,46,-56,82,9,5,-18,119,-7,-64,-19,-119,89,38,40,2,-19,-109,55,-36,91,-40,-69,31,-101,75,60,71,53,-63,-98,-11,22,-72,-108,-10,-46,47,97,-78,53,-15,-62,-5,-90,98,-10,-6,-71,86,20,78, 
  /* [27][0][][] */ -8,-11,-58,-82,-30,-61,9,-27,11,106,8,-41,-34,21,38,-36,28,25,87,-71,-78,-8,-35,18,-80,20,-87,-19,27,2,-36,-21,29,29,-75,-70,-75,-50,-91,100,-12,-4,2,-6,48,-1,30,51,101,30,83,-29,-75,-73,-17,-38,73,-29,-62,-67,-55,-57,-38,37,10,-47,-89,52,16,46,-93,-10,24,-4,-22,-74,14,-14,41,50,39,-33,127,-27,-65,-71,-37,3,-48,-20,-39,-49,29,-5,91,21, 
  /* [28][0][][] */ 98,36,113,83,-43,-8,-20,-11,-17,-36,81,97,-27,-17,28,127,93,106,-10,85,2,46,-46,-24,-55,97,-36,-9,-17,-27,51,24,-42,46,88,93,63,-27,19,38,124,89,-18,66,-63,45,57,90,24,-7,-5,26,-10,49,84,66,97,19,110,87,13,-4,-45,55,93,83,27,100,-26,62,-49,6,92,76,43,-28,-52,-35,-41,88,-12,-13,123,34,98,-35,83,-15,-23,0,25,-15,10,85,-52,1, 
  /* [29][0][][] */ 17,19,19,-62,-94,12,-91,-21,53,-25,-107,-107,63,-116,-70,-63,-95,103,14,-72,-94,-58,20,-7,-22,-11,-61,-49,-106,-33,68,-25,14,-25,-95,-71,-30,75,-37,64,45,96,-42,42,-24,64,-65,-38,66,-34,29,-25,35,-114,83,16,-84,25,-57,63,-127,54,-98,-52,-73,-80,20,51,53,-21,-1,-92,73,75,24,-3,72,-12,-55,2,-31,-93,18,-75,29,75,8,38,-59,60,36,43,-112,-10,-33,48, 
  /* [30][0][][] */ 12,-62,-66,20,-97,17,-63,-13,104,-25,-1,-42,-109,1,47,11,-13,32,85,-110,28,-104,-113,5,-109,13,-70,108,-20,-105,-91,-2,-95,-80,-127,-60,13,-22,-4,24,86,-75,-18,93,86,-49,90,58,-68,55,16,-101,90,-50,-14,84,-79,-57,-78,-56,-103,-9,-73,-29,-108,-92,-91,80,-67,94,30,-36,-94,101,39,-88,-65,-71,-73,-64,19,8,-102,-21,-105,25,-110,103,-37,-112,63,46,-41,-6,5,-77, 
  /* [31][0][][] */ 45,-102,9,65,25,38,-63,-104,-52,-20,-89,-82,62,-127,-62,71,-69,-64,63,22,30,6,-48,72,12,-112,11,11,-82,-83,24,71,-5,-5,-99,-27,62,-45,-78,-102,97,-74,-44,6,-16,-69,-57,-1,92,-5,62,15,-116,-72,-81,0,-89,40,-16,73,-53,-22,48,-78,42,72,-58,-87,39,-60,-124,-12,-102,-13,-19,-16,-71,-21,18,53,-83,-55,80,48,25,57,-100,-8,-9,-66,-95,-65,-8,64,-23,-40, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant5_scale = { 32, { 0.0023311395198106766, 0.0020204170141369104, 0.0023810833226889372, 0.0021132102701812983, 0.0023683488834649324, 0.0021308534778654575, 0.0027985339984297752, 0.0025170650333166122, 0.0025406666100025177, 0.0025505470111966133, 0.0022881748154759407, 0.0025899577885866165, 0.0025238876696676016, 0.0026861545629799366, 0.0024358092341572046, 0.0024321218952536583, 0.0022368461359292269, 0.0025675981305539608, 0.0023071044124662876, 0.0021709399297833443, 0.0023039574734866619, 0.0019790404476225376, 0.0025937759783118963, 0.0020983025897294283, 0.002056291326880455, 0.002006519353017211, 0.0019943795632570982, 0.0027760127559304237, 0.0024801788385957479, 0.0021429408807307482, 0.0018910231301560998, 0.0021817728411406279, } };
const TfArray<32, int> quant5_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data6[96] = { 1743, -222, 3719, 7788, 7804, -1616, 3834, -3034, -2666, -943, 5600, -3196, 4283, 4667, 2199, 2898, -954, -533, -2309, 8301, 3301, -1043, 2962, -595, -1796, 5572, 1684, 4012, 5703, 2701, 5267, 957, 1830, 5729, 6815, 4470, -1690, 5708, 3255, -4369, -341, 2878, 452, 1634, -1418, 112, -2354, 1241, -9221, 2157, 1246, -3672, 6172, -975, 2609, 1046, 1542, 2739, -1449, -2891, 379, 1872, 528, 5477, 5036, 5908, 3832, 6640, 4203, -1102, 3429, 6644, 3946, -1986, 5912, 8943, 240, -3597, 629, 1119, 13475, 1935, 197, -2607, 973, 706, 1474, -3715, 4284, -1212, 4845, 1334, -154, -4251, -488, 1751, };
const TfArray<1, int> tensor_dimension6 = { 1, { 96 } };
const TfArray<96, float> quant6_scale = { 96, { 0.00012494799739215523, 0.00012543545744847506, 0.00015038288256619126, 9.7054675279650837e-05, 8.5057639807928354e-05, 0.00022489250113721937, 0.00013721958384849131, 0.00010705813474487513, 0.00014032633043825626, 0.000182078976649791, 0.00011871060269186273, 0.00012262616655789316, 0.00013103222590871155, 0.00012881180737167597, 0.00011262223415542394, 0.00014796141476836056, 0.00017868311260826886, 0.00013868141104467213, 0.00011667142098303884, 7.9428835306316614e-05, 0.00013780519657302648, 0.00015008011541794986, 0.00012277717178221792, 0.00019339659775141627, 0.00013977159687783569, 0.00011380293290130794, 0.00013343393220566213, 9.202199726132676e-05, 0.00012060894368914887, 0.00015919505676720291, 9.5036601123865694e-05, 0.00016729268827475607, 0.00015145208453759551, 0.00011216606799280271, 0.00010087007831316441, 0.00011636008275672793, 0.00011127397738164291, 6.9950605393387377e-05, 0.00010024029324995354, 0.00010490543354535475, 0.00015072866517584771, 8.6224506958387792e-05, 0.00025527711841277778, 0.00014380060019902885, 0.00015420038835145533, 0.00014411665324587375, 0.00014398811617866158, 0.00011216244456591085, 7.1884875069372356e-05, 0.00012508944200817496, 0.00024851143825799227, 0.00013014655269216746, 9.964685159502551e-05, 0.00015600782353430986, 0.00014168165216688067, 0.00017573652439750731, 0.00014316629676613957, 0.00013332732487469912, 0.00013301278522703797, 0.00011466210708022118, 0.00020296026195865124, 0.00012716226046904922, 0.00020417553605511785, 0.00011150479258503765, 0.00012823974248021841, 7.8717595897614956e-05, 9.6189818577840924e-05, 0.00010108509741257876, 0.00014770762936677784, 0.00011296267621219158, 0.000136217349790968, 9.0506408014334738e-05, 0.00011508924944791943, 0.00010349407239118591, 0.00012066505587426946, 9.1433896159287542e-05, 0.00010092387674376369, 0.00016937243344727904, 0.00016879221948329359, 0.00013861180923413485, 6.3330917328130454e-05, 0.00017199211288243532, 0.00014423276297748089, 0.00014197197742760181, 0.00017187860794365406, 0.00014756128075532615, 0.00017821152869146317, 0.00012818652612622827, 0.00014457333600148559, 0.00012129791139159352, 0.0001095044135581702, 0.00013980301446281374, 0.00013608687731903046, 0.00011269659444224089, 0.00016651484475005418, 9.4966322649270296e-05, } };
const TfArray<96, int> quant6_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data7[96*1*1*16] = { 
  /* [0][0][][] */ -16,127,-74,22,51,-22,106,87,-66,-10,19,-81,61,107,-69,23, 
  /* [1][0][][] */ -5,-4,-82,-12,3,66,25,-127,49,-61,-44,-76,-1,-27,-73,-5, 
  /* [2][0][][] */ -24,-7,40,67,14,36,-98,127,-31,1,68,-45,-22,-81,-36,69, 
  /* [3][0][][] */ 108,-107,75,-9,-15,-45,-43,127,-17,76,62,26,3,86,24,-4, 
  /* [4][0][][] */ -53,14,2,44,-110,37,-12,-124,-21,-29,54,-19,20,28,105,127, 
  /* [5][0][][] */ 112,13,-33,-6,-67,31,31,80,42,-21,33,78,127,13,-93,8, 
  /* [6][0][][] */ 37,-32,-55,-31,-78,-23,-21,-17,-40,-35,-46,9,96,73,127,-19, 
  /* [7][0][][] */ -42,38,-43,-77,10,-79,-90,5,-102,68,-95,-73,-127,-35,25,80, 
  /* [8][0][][] */ 46,61,66,13,42,33,82,22,49,-43,39,-1,-127,-36,-81,25, 
  /* [9][0][][] */ -26,43,20,-31,-41,-23,17,-18,-17,59,-46,2,50,127,36,24, 
  /* [10][0][][] */ 51,74,-21,29,-33,-20,56,-47,-85,-26,-36,-73,-127,-86,19,92, 
  /* [11][0][][] */ 39,13,61,11,1,-23,18,127,-91,16,-22,7,-14,-12,56,119, 
  /* [12][0][][] */ -54,9,9,7,29,12,127,60,-51,6,-1,-24,-23,63,-53,83, 
  /* [13][0][][] */ 27,82,-6,86,127,61,100,115,-19,65,-85,-61,32,62,-121,-37, 
  /* [14][0][][] */ -89,79,-16,-7,-8,-11,59,-18,-52,48,127,7,-76,42,-23,35, 
  /* [15][0][][] */ -10,-30,-127,-54,70,-44,-85,-37,-38,-13,-6,-56,3,-69,-55,62, 
  /* [16][0][][] */ 108,-23,11,-8,21,-51,27,-9,-52,29,127,52,43,10,-16,36, 
  /* [17][0][][] */ 5,41,-20,-107,-11,-57,127,-111,-20,-35,-39,25,23,59,-5,49, 
  /* [18][0][][] */ 29,95,-23,-53,84,-69,-29,-64,-40,127,-9,-14,-14,66,-22,-23, 
  /* [19][0][][] */ -75,-77,127,-94,64,-102,39,-10,34,25,80,110,8,-36,50,-20, 
  /* [20][0][][] */ -23,125,46,10,-1,16,35,-13,43,-25,94,-34,-127,-43,-83,3, 
  /* [21][0][][] */ -46,38,33,2,43,15,42,32,-127,68,-36,27,-28,34,-36,-19, 
  /* [22][0][][] */ 9,-65,74,4,22,-125,127,17,7,-68,-38,-83,28,-109,-64,-50, 
  /* [23][0][][] */ -55,-64,45,58,30,-14,27,-39,3,-41,85,17,0,48,66,127, 
  /* [24][0][][] */ 8,1,24,93,59,17,-59,-127,88,15,-61,18,6,3,-27,-30, 
  /* [25][0][][] */ -21,62,38,-74,-44,4,23,-30,-51,56,-57,-17,35,127,29,20, 
  /* [26][0][][] */ -66,107,20,12,19,-107,-1,-46,21,29,30,92,-6,5,-77,127, 
  /* [27][0][][] */ -33,-118,-45,21,-55,116,14,-49,23,-57,55,-45,23,-65,-127,-26, 
  /* [28][0][][] */ -22,2,33,82,19,5,-52,-127,-105,64,89,-26,67,29,-30,-36, 
  /* [29][0][][] */ -127,116,-35,-18,-14,35,-110,-54,-31,-46,-9,-15,0,-65,-119,53, 
  /* [30][0][][] */ 65,80,-35,67,-127,-109,-81,-27,-31,6,2,-113,111,51,9,83, 
  /* [31][0][][] */ 127,2,-67,-7,-68,-1,65,13,-25,6,42,52,55,38,-3,-14, 
  /* [32][0][][] */ -41,-12,127,19,-13,91,88,40,-12,-27,-14,10,9,67,53,40, 
  /* [33][0][][] */ -14,50,-67,-32,-5,43,127,45,1,-32,19,-65,68,94,-66,47, 
  /* [34][0][][] */ -113,5,88,23,41,-36,124,21,-127,19,42,-63,32,42,-69,-17, 
  /* [35][0][][] */ -13,46,-38,13,-55,127,-21,4,-33,99,12,89,-72,45,10,38, 
  /* [36][0][][] */ 10,-108,127,-37,-41,4,-74,-32,39,48,-86,73,30,-98,-44,38, 
  /* [37][0][][] */ 101,-12,54,-22,118,-75,-56,66,-55,105,-69,-20,-86,-23,127,-24, 
  /* [38][0][][] */ 67,60,11,-71,-12,-60,-112,42,-58,60,-127,-77,-74,-103,-84,31, 
  /* [39][0][][] */ -108,42,-46,-38,-70,-67,93,22,-127,-64,20,99,18,-23,-26,36, 
  /* [40][0][][] */ 127,11,5,-80,-88,39,12,-37,-25,-23,-47,-124,24,60,39,48, 
  /* [41][0][][] */ 127,-65,-36,-64,-21,-22,-84,6,84,-30,-12,-86,119,-104,82,-34, 
  /* [42][0][][] */ -31,-99,-28,127,12,-65,-106,11,19,-9,-13,31,-85,46,-66,2, 
  /* [43][0][][] */ -96,-29,-29,-127,-65,-11,-1,55,24,-107,-23,47,-28,-66,-19,92, 
  /* [44][0][][] */ -56,71,62,-46,-24,-8,39,127,97,-94,84,106,99,25,-35,5, 
  /* [45][0][][] */ 50,66,-67,75,114,-112,-58,-94,127,-54,80,-50,-22,27,-60,81, 
  /* [46][0][][] */ 6,-24,19,-16,77,-36,5,0,-17,127,-40,-91,32,71,-28,49, 
  /* [47][0][][] */ 80,-25,-41,3,92,-11,-38,-59,5,127,-37,33,-21,-121,-91,7, 
  /* [48][0][][] */ 9,-4,-32,-123,-9,-76,127,-113,-7,2,-42,39,57,59,23,72, 
  /* [49][0][][] */ -29,127,-34,5,27,-48,49,31,-46,35,45,-57,-30,74,110,-62, 
  /* [50][0][][] */ 9,23,-16,7,-127,2,-64,-60,72,68,27,32,-36,-44,-3,34, 
  /* [51][0][][] */ 127,-42,-41,-5,-46,86,-92,-41,49,-20,-34,65,-42,-63,6,45, 
  /* [52][0][][] */ 9,-45,4,82,-37,-98,-127,-33,-12,-10,-43,-71,39,-17,41,32, 
  /* [53][0][][] */ 15,107,50,-111,22,127,110,-5,-11,-46,-13,-53,75,-123,-13,48, 
  /* [54][0][][] */ 19,114,21,-30,2,-66,-96,38,-1,-17,-57,127,65,46,17,46, 
  /* [55][0][][] */ -17,-38,45,26,29,-48,77,60,-89,16,4,9,127,66,15,-15, 
  /* [56][0][][] */ 127,34,28,41,-62,126,-54,-55,-24,47,-103,-2,-79,95,-14,46, 
  /* [57][0][][] */ -48,-8,-30,-39,-65,-76,61,-20,-127,-33,53,67,5,20,-4,35, 
  /* [58][0][][] */ 74,-60,82,18,-13,-87,-36,-4,16,-3,-127,-31,28,-24,-23,47, 
  /* [59][0][][] */ 76,9,-127,97,16,32,65,-16,-49,-38,11,-98,-89,-41,20,82, 
  /* [60][0][][] */ -13,49,1,21,-8,-14,-8,12,-47,-86,63,107,-55,-127,-51,-2, 
  /* [61][0][][] */ -44,53,114,-121,-85,40,24,101,-43,-127,52,110,73,-13,9,84, 
  /* [62][0][][] */ 64,60,-8,-127,-9,8,12,-19,-8,25,-38,33,8,-27,-84,-59, 
  /* [63][0][][] */ -5,-3,18,-8,-86,-69,-66,10,-95,-13,-38,-7,127,-7,91,-9, 
  /* [64][0][][] */ 38,11,0,34,-114,-53,-25,-90,40,127,17,-22,17,-35,-20,87, 
  /* [65][0][][] */ -41,35,-3,-28,-96,77,35,-26,33,-127,100,-87,55,64,-118,62, 
  /* [66][0][][] */ -89,50,-111,-55,61,-55,-121,-68,-71,127,93,26,-78,-24,58,48, 
  /* [67][0][][] */ 8,-17,-125,-127,59,68,12,-40,-43,-3,64,-6,21,47,27,59, 
  /* [68][0][][] */ 55,20,3,-56,-70,22,7,16,-68,72,127,-1,-13,-27,-91,-2, 
  /* [69][0][][] */ 105,-91,60,-58,22,-121,-30,127,13,93,65,54,-8,86,-20,-21, 
  /* [70][0][][] */ 25,40,127,17,67,-37,121,0,9,22,-37,58,-82,35,-47,30, 
  /* [71][0][][] */ 24,28,74,-52,-127,-88,3,19,-10,3,5,-112,-64,14,19,10, 
  /* [72][0][][] */ -58,-62,33,-120,65,-12,13,53,-62,13,-127,-28,34,98,-50,102, 
  /* [73][0][][] */ 6,29,46,-11,127,-76,-30,0,-33,80,-87,16,-93,-71,93,-4, 
  /* [74][0][][] */ -95,29,-127,-49,82,-30,-28,37,-65,-8,-124,-47,-35,-71,-48,64, 
  /* [75][0][][] */ 96,-8,39,-26,35,17,-127,-7,5,-115,67,-8,0,-24,-17,-13, 
  /* [76][0][][] */ 31,-79,-62,127,34,58,63,-86,105,-87,32,125,64,-52,-38,23, 
  /* [77][0][][] */ -49,-21,127,-9,14,-13,-24,-99,15,4,37,98,28,30,12,-2, 
  /* [78][0][][] */ -36,20,-1,-19,4,-35,43,4,2,-32,16,-87,-87,-68,-127,-36, 
  /* [79][0][][] */ -61,-48,-18,42,127,34,-22,40,46,18,-43,32,-29,-69,-58,-18, 
  /* [80][0][][] */ -8,-83,75,127,-46,-25,-98,110,-21,10,90,39,-96,-44,-33,81, 
  /* [81][0][][] */ 88,48,-26,90,12,43,29,127,33,-6,103,38,94,12,38,-9, 
  /* [82][0][][] */ -96,-16,12,-48,57,-127,-111,-102,24,79,-76,-57,-10,89,-107,-38, 
  /* [83][0][][] */ 90,-48,99,-30,-53,-5,-125,-24,20,-127,25,-41,-21,-28,11,-14, 
  /* [84][0][][] */ 31,-82,-101,41,127,37,22,39,-86,7,-103,-31,55,-12,-74,2, 
  /* [85][0][][] */ 12,103,23,-18,110,9,43,-85,127,-45,22,-23,86,-79,-4,-20, 
  /* [86][0][][] */ 100,-15,127,36,-8,-59,73,33,-71,-53,-84,-28,23,2,-54,12, 
  /* [87][0][][] */ 13,-5,26,-79,60,-40,-56,-3,38,-21,62,-23,-71,-127,11,18, 
  /* [88][0][][] */ -59,-21,31,-1,38,34,-67,-38,-6,6,-71,-127,-40,-53,-21,-16, 
  /* [89][0][][] */ -55,2,10,-49,31,-6,-127,43,89,34,-74,-21,-1,-58,-30,-32, 
  /* [90][0][][] */ 5,13,-38,-69,127,12,-63,46,58,62,10,-22,27,29,-58,-38, 
  /* [91][0][][] */ -55,-23,38,27,-63,-26,6,53,-79,-67,62,-22,-28,39,21,127, 
  /* [92][0][][] */ -23,106,-4,-10,-2,61,-94,33,-43,-8,68,9,-35,127,45,8, 
  /* [93][0][][] */ 9,68,-63,-59,63,80,-117,3,88,96,97,83,-127,47,-28,102, 
  /* [94][0][][] */ 36,94,120,6,-127,-55,14,-21,31,-23,47,1,-61,-37,17,-40, 
  /* [95][0][][] */ 23,56,44,47,116,-16,-109,44,56,9,-102,72,-16,-14,127,-80, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant7_scale = { 96, { 0.0015747869620099664, 0.001580930664204061, 0.0018953564576804638, 0.001223232364282012, 0.0010720272548496723, 0.0028344413731247187, 0.001729452284052968, 0.0013493113219738007, 0.0017686082283034921, 0.0022948393598198891, 0.0014961736742407084, 0.0015455236425623298, 0.0016514697344973683, 0.0016234845388680696, 0.0014194386312738061, 0.00186483736615628, 0.0022520394995808601, 0.0017478765221312642, 0.0014704727800562978, 0.0010010843398049474, 0.0017368331318721175, 0.0018915404798462987, 0.0015474268002435565, 0.0024374814238399267, 0.0017616166733205318, 0.0014343196526169777, 0.0016817396972328424, 0.0011598027776926756, 0.0015200994675979018, 0.002006421098485589, 0.001197797479107976, 0.0021084798499941826, 0.0019088322296738625, 0.0014136893441900611, 0.0012713199248537421, 0.0014665487688034773, 0.0014024458359926939, 0.00088162516476586461, 0.0012633823789656162, 0.0013221796834841371, 0.0018997145816683769, 0.0010867338860407472, 0.0032173949293792248, 0.0018123963382095098, 0.0019434705609455705, 0.0018163797212764621, 0.0018147598020732403, 0.0014136437093839049, 0.00090600381372496486, 0.0015765696298331022, 0.0031321235001087189, 0.0016403071349486709, 0.0012559029273688793, 0.0019662505947053432, 0.0017856901977211237, 0.0022149020805954933, 0.0018044018652290106, 0.0016803961480036378, 0.0016764317406341434, 0.0014451482566073537, 0.0025580173823982477, 0.0016026943922042847, 0.0025733341462910175, 0.0014053549384698272, 0.0016162745887413621, 0.00099212024360895157, 0.0012123320484533906, 0.0012740299571305513, 0.0018616387387737632, 0.0014237294672057033, 0.0017168205231428146, 0.0011407010024413466, 0.0014505317667499185, 0.0013043915387243032, 0.0015208066906780005, 0.0011523906141519547, 0.0012719979276880622, 0.0021346919238567352, 0.0021273791790008545, 0.0017469993326812983, 0.00079819367965683341, 0.0021677091717720032, 0.0018178431782871485, 0.0017893493641167879, 0.0021662786602973938, 0.0018597942544147372, 0.0022460957989096642, 0.0016156038036569953, 0.0018221356440335512, 0.0015287828864529729, 0.0013801431050524116, 0.0017620127182453871, 0.0017151761567220092, 0.0014203758910298347, 0.0020986762829124928, 0.0011969116749241948, } };
const TfArray<96, int> quant7_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data8[16] = { 5492, 17360, 1607, -519, -1401, 9836, 4642, 125, 16196, -9545, -9481, 4354, -17116, 7768, -242, 8021, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const TfArray<16, float> quant8_scale = { 16, { 5.2771985792787746e-05, 6.1204133089631796e-05, 5.038793824496679e-05, 6.6439810325391591e-05, 7.2123941208701581e-05, 7.3858398536685854e-05, 4.6478311560349539e-05, 4.7065153921721503e-05, 9.6897267212625593e-05, 7.3570205131545663e-05, 5.2954590501030907e-05, 5.7586694310884923e-05, 6.1005252064205706e-05, 5.4039450333220884e-05, 7.8633922385051847e-05, 5.7967499742517248e-05, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data9[16*1*1*96] = { 
  /* [0][0][][] */ -114,29,65,-23,-53,-2,-72,8,-35,-6,-12,-19,42,30,38,-34,20,12,78,12,17,-42,127,64,46,26,12,31,-52,-100,-74,0,-35,-29,35,16,18,17,-10,44,-6,-11,-63,-1,-55,-33,14,80,-13,9,-31,-12,-14,-7,47,-43,-92,7,0,59,37,17,1,18,-16,-39,-38,39,-42,-51,18,-8,11,3,-57,-42,-45,11,-39,12,-48,61,96,-51,-9,54,16,34,41,-34,1,-21,-25,-47,-56,28, 
  /* [1][0][][] */ 74,29,40,-60,-77,-9,-1,27,-9,25,49,-70,23,-45,-73,-16,-8,0,-52,41,-49,-87,8,67,-19,-74,-13,-33,72,-107,107,-67,40,41,-38,65,49,80,-28,-71,51,-5,-20,-30,-5,43,-127,-59,-77,-52,9,-15,60,-41,-38,49,5,-16,-30,37,30,60,-34,-86,-38,-44,-56,-8,9,-9,-89,-21,-43,-49,15,-108,6,23,50,-60,-45,-33,-116,-20,58,-30,-28,25,-76,-35,-84,38,39,81,-33,70, 
  /* [2][0][][] */ 107,-65,-7,32,-1,-107,66,13,-34,-7,-23,-24,-104,-12,23,-57,-112,-45,-56,32,-13,-52,-26,14,12,-78,7,-50,-34,29,-38,114,-72,126,-33,2,-45,-41,1,-14,-127,108,38,30,-53,32,-46,-34,17,-4,-62,-52,73,-10,-30,57,29,-17,24,-17,16,62,-45,-21,49,33,-4,-7,23,34,-41,-27,28,33,75,59,53,-76,91,26,86,-22,-20,10,-35,19,5,75,-6,22,-30,50,-67,62,-32,6, 
  /* [3][0][][] */ -13,-18,-16,13,22,-2,10,-59,-12,52,40,67,40,-14,-42,37,1,-22,29,12,25,127,46,-51,19,33,-8,12,76,-27,66,-28,-12,32,-27,-11,17,48,35,21,-70,-31,-26,19,-23,22,24,7,-19,-35,2,-18,38,-76,-15,-27,9,83,-24,-7,-21,-23,-44,12,32,61,-19,3,-11,2,12,-61,-17,-47,47,-23,16,14,-47,-27,-15,6,-34,10,-27,-28,30,-13,0,10,32,-5,46,18,-40,55, 
  /* [4][0][][] */ 18,11,-22,3,22,35,-48,2,-25,72,98,-3,5,0,-5,-34,19,-15,-26,58,23,-56,43,57,-54,16,-127,18,-43,-41,-13,29,-37,-41,7,71,14,46,3,23,-19,-58,47,-35,-16,-7,-18,66,-19,73,20,8,25,-23,-64,33,55,-13,22,7,29,-20,32,22,-36,4,-32,-5,-48,40,-41,42,48,-45,-41,-57,7,-44,-20,30,-51,82,-75,-17,-27,29,14,-53,55,14,14,2,-38,-30,32,19, 
  /* [5][0][][] */ -54,45,35,-2,20,6,64,-15,-25,20,-20,-43,29,-3,-31,-16,-10,-20,49,11,-127,-41,-73,47,-35,-22,25,30,19,-66,-19,50,30,119,-25,32,13,8,25,-32,-10,64,50,-20,-15,64,44,-13,7,1,-11,40,28,-44,23,-90,29,-70,-57,-53,69,96,-50,-18,60,-46,-74,-74,-75,-24,-51,-32,-32,-7,-29,-29,3,-39,-18,-3,93,-37,4,-65,-57,37,-3,-21,-55,33,9,-15,0,17,27,86, 
  /* [6][0][][] */ 58,-43,-120,45,-59,-89,102,117,-97,73,-26,51,-92,-64,85,39,-19,-63,-19,-14,-33,-10,-48,-84,-30,29,81,11,8,16,106,-75,5,15,-2,-61,-5,-3,40,61,-4,42,-80,-10,25,-38,-99,8,13,-124,-49,85,64,23,-40,-84,63,27,-15,-11,-98,72,-127,-22,1,29,-7,31,14,8,-35,-92,-52,1,101,41,92,12,72,-92,6,-69,-65,41,34,-87,20,36,-68,59,28,73,-51,46,-42,93, 
  /* [7][0][][] */ 28,59,-28,-53,-7,-12,29,9,-51,31,-28,-37,-34,-2,23,-24,-36,-54,-39,73,9,127,23,13,-2,25,43,3,64,56,83,-39,82,4,-9,21,-16,2,14,44,-79,17,-12,-59,31,-52,43,-13,29,-51,-93,-45,-59,23,2,3,32,30,-98,19,-21,93,16,-22,-16,16,-24,30,-11,0,-103,48,31,83,-16,30,-34,66,-4,-81,-2,-33,73,-83,25,-21,-1,18,1,71,-66,66,34,-9,-58,0, 
  /* [8][0][][] */ -11,74,-41,30,-30,-23,-71,40,-90,-23,-3,0,-34,42,17,62,-7,-28,5,-2,14,-15,1,-8,-33,83,-17,37,-22,-23,-43,-16,-28,-27,-37,-54,-36,15,29,-2,11,-48,25,-7,-42,-30,12,-17,-10,-12,47,74,2,-12,-55,83,-37,7,5,-28,-31,3,8,45,-27,-59,-16,-23,-20,0,10,2,-21,-52,-111,-11,-45,24,-53,-17,-37,-6,-41,-24,5,1,-9,24,6,41,-62,0,-63,-127,36,-42, 
  /* [9][0][][] */ -35,51,-47,34,-18,-19,57,40,21,30,-17,110,-16,-36,8,127,25,17,78,31,36,17,44,-83,-23,8,14,0,36,-11,22,54,-12,3,13,-111,49,-18,-34,1,-11,1,62,-38,-21,-18,26,29,62,90,48,-19,-78,-82,18,8,9,10,93,-11,-80,44,-40,-7,112,-17,-22,28,-57,44,41,61,1,109,-17,-29,-52,13,-59,-3,40,-26,63,-6,6,1,22,-45,-33,12,15,-16,68,21,-49,12, 
  /* [10][0][][] */ 79,-16,-62,-1,-25,-24,66,-7,14,-10,-25,3,-81,-33,15,-12,-80,-26,17,24,47,51,43,0,-46,79,55,-13,-56,-70,-12,-24,57,-52,59,5,58,-83,94,127,1,-32,-26,1,-10,-74,-31,63,9,80,-81,-21,-18,41,-6,46,13,-37,58,37,-26,41,-83,-26,-18,-35,31,70,24,-18,-18,58,123,33,41,-89,44,-28,51,-35,-35,41,56,15,-44,-4,14,48,-58,-28,35,68,29,80,-53,-3, 
  /* [11][0][][] */ -40,-30,53,-52,37,-40,-38,-65,58,-19,2,14,-42,-18,1,-2,-49,14,59,17,-25,36,-56,-53,-11,11,-27,22,45,-55,43,-43,30,-18,36,-49,-73,-2,-89,30,-72,81,-36,39,24,1,-16,-39,23,-50,-54,-45,5,27,78,-47,-27,-40,29,-58,-36,-47,-13,-103,21,-64,59,81,127,24,92,7,-24,-2,77,-16,94,28,21,43,37,0,-4,109,57,10,23,-19,-50,-69,1,16,56,29,39,74, 
  /* [12][0][][] */ 29,-6,6,-29,23,96,-17,56,59,38,10,65,30,46,1,1,-46,37,5,47,127,-16,61,-54,32,29,-75,-53,-22,82,-17,3,39,6,-3,-23,72,8,-29,-15,11,-38,52,66,-27,15,21,-6,-56,29,23,17,-30,-41,7,25,-37,62,17,56,17,-76,23,-68,11,71,-21,-34,-10,-11,66,0,-14,34,-8,49,-26,47,-84,-17,-27,23,103,12,-25,85,-13,-65,79,10,-63,36,65,-4,-13,-69, 
  /* [13][0][][] */ -28,35,-12,-39,-10,-2,-4,-28,55,-14,-37,-77,65,-127,-21,-78,-29,-11,-89,-30,-87,-17,39,97,-21,-15,127,6,43,-65,71,26,16,11,-100,123,-33,-53,35,-32,103,37,26,22,15,-113,40,-20,73,-24,-41,38,8,12,15,66,87,-40,-42,-29,27,37,-6,-68,30,59,-27,56,-66,-35,-92,21,-51,25,-39,-92,-86,34,30,73,10,64,61,-101,31,32,38,-2,-11,-32,-6,28,-76,34,-39,-14, 
  /* [14][0][][] */ -22,30,-57,-30,98,84,-96,-24,55,-62,82,6,8,-40,-38,-54,-57,43,37,127,27,-13,23,16,-18,41,-21,65,24,-1,-21,10,70,-12,-23,-2,-18,58,61,24,59,5,40,-9,-9,-57,55,-26,29,-4,-7,-28,26,13,-21,36,9,71,-72,-22,-32,-77,-34,-77,29,-53,-41,11,-54,65,-3,56,13,-14,-9,-37,21,-14,-66,-23,38,14,21,8,-28,54,13,-24,-18,53,76,22,10,-56,-52,-50, 
  /* [15][0][][] */ -56,-60,19,-55,12,-27,-29,-94,-18,6,3,64,-4,-18,48,73,-94,-39,-5,-61,40,-2,-11,-101,49,-10,59,-63,-49,-86,-58,17,-30,35,89,-81,-30,-28,40,-13,-43,16,12,-10,13,8,59,95,-64,-2,11,-55,-37,62,-2,-45,-82,-9,76,31,-28,16,-84,19,-76,1,13,25,52,-63,59,-25,53,-33,-33,-43,27,36,43,-19,-2,82,52,19,5,-24,-127,19,-18,-26,-65,30,24,-5,-42,30, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant9_scale = { 16, { 0.0022428093943744898, 0.00260117556899786, 0.0021414873190224171, 0.0028236918151378632, 0.0030652673449367285, 0.0031389817595481873, 0.0019753281958401203, 0.0020002690143883228, 0.0041181338019669056, 0.0031267337035387754, 0.0022505701053887606, 0.0024474344681948423, 0.0025927231181412935, 0.0022966766264289618, 0.0033419416286051273, 0.0024636187590658665, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data10[96] = { -2485, -2300, -2617, -6886, -526, 6474, -2511, 254, -1717, -669, 12830, -3227, -1618, 10597, 10743, -6640, 13987, 5913, -6519, 419, -3428, -890, 1894, -2509, 897, -6689, 821, -5248, -1778, -10626, -1695, 63, 18160, -2225, -1753, 252, -1953, -1296, -1095, 7666, -30, 1111, 270, -7402, 14286, 18753, -639, 16304, 2431, 15641, 14847, -7781, -443, -556, 449, 11518, 1691, 2115, 20476, 8711, 8466, 10907, 5021, -8381, -2476, 1968, -3246, 5456, -1637, -499, 1618, -1041, 12868, -1412, 937, 16120, -1305, -900, 14565, -1858, -609, 19245, -667, 3064, 13647, -987, -3081, -4010, 7506, -6424, 17758, -494, -2406, 490, -6996, -5401, };
const TfArray<1, int> tensor_dimension10 = { 1, { 96 } };
const TfArray<96, float> quant10_scale = { 96, { 0.00022445485228672624, 0.00019328974303789437, 0.00012600453919731081, 9.0523666585795581e-05, 0.00025134879979304969, 0.00019961355428677052, 0.00036741036456078291, 0.00021881105203647166, 0.00018155811994802207, 0.00018247436673846096, 7.0423302531708032e-05, 0.00021906993060838431, 0.00020040878735017031, 0.00013067890540696681, 0.0001037301481119357, 0.00010201006080023944, 0.00014164183812681586, 0.00016083993250504136, 0.00011953955981880426, 8.8626184151507914e-05, 0.00017354122246615589, 0.00028417838620953262, 0.00018135255959350616, 0.00016819841403048486, 0.0004432711866684258, 0.00012489213258959353, 0.00028421127353794873, 0.00011770819401135668, 0.00022592463938053697, 7.0434296503663063e-05, 0.0002904261345975101, 0.00029796204762533307, 0.00010400106111774221, 0.00017672308604232967, 0.00021160798496566713, 0.00040067409281618893, 0.00014638970606029034, 0.00032427636324428022, 0.00024826120352372527, 8.3842518506571651e-05, 0.00018141344480682164, 0.00022073424770496786, 0.00015123913181014359, 9.314719500252977e-05, 8.5956206021364778e-05, 9.1953486844431609e-05, 0.0001480223290855065, 9.1683257778640836e-05, 0.00016328350466210395, 7.2740658652037382e-05, 0.00010540329822106287, 9.2844937171321362e-05, 0.00010037990432465449, 0.00015792263729963452, 0.00022063461074139923, 0.00014539495168719441, 0.00019178182992618531, 0.00014212851237971336, 0.00011233906843699515, 7.8499317169189453e-05, 0.00016026587400119752, 0.00018711711163632572, 0.0001061147777363658, 9.4607981736771762e-05, 0.0001834622526075691, 0.0001638208341319114, 0.00021449361520353705, 0.00019897620950359851, 0.00015872495714575052, 0.00019365936168469489, 0.00016902461356949061, 0.00011011823517037556, 0.00011108347098343074, 0.00023342185886576772, 0.00031273928470909595, 8.7106775026768446e-05, 0.00011694591375999153, 0.00016701096319593489, 0.00010472957364981994, 0.00019193571642972529, 0.00019461866759229451, 0.0001000237389234826, 0.00016161653911694884, 0.00013580074300989509, 8.5966865299269557e-05, 0.00016400765161961317, 0.00012840391718782485, 0.00017517563537694514, 0.00017288458184339106, 0.00016324539319612086, 6.9554931542370468e-05, 0.00024613193818368018, 0.00016095780301839113, 0.00035821771598421037, 8.0382742453366518e-05, 0.00022192935284692794, } };
const TfArray<96, int> quant10_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data11[1*3*3*96] = { 
  /* [0][0][][] */ 39,127,10,62,-20,-9,44,47,66,-44,-58,81,0,17,85,-63,-34,3,50,73,58,47,43,106,12,5,-29,-21,23,11,39,-7,-77,25,-30,48,19,75,-1,-32,18,-31,9,60,-115,-58,29,22,-39,-104,-71,41,8,64,-27,-19,-83,-101,-77,-103,-127,2,-108,16,-14,30,38,-34,-37,30,33,11,-14,31,36,-63,55,-38,-38,1,13,-100,66,-40,-56,-24,-1,-2,-127,9,-70,57,79,-10,97,8, -51,-9,-1,127,12,68,-11,0,123,-6,-109,127,-16,-32,-61,94,-67,35,53,127,127,-5,96,76,26,32,1,12,29,123,16,-127,39,99,7,13,108,127,-35,-109,127,-43,118,65,-61,-42,127,-22,-21,-127,-127,6,-22,127,-24,-127,-17,8,-100,-114,-26,-112,-26,85,-23,82,104,-35,-24,127,127,24,-59,47,-51,-95,64,-47,12,127,-7,-57,127,-77,-109,-26,99,39,69,87,-119,18,127,-36,127,48, -1,-74,15,43,16,-20,0,57,28,38,-37,4,-13,46,44,-94,-2,-14,9,-6,34,61,32,127,23,-30,51,15,26,3,8,-69,-80,-61,-32,31,29,34,8,-37,-14,44,5,35,-10,-85,29,34,5,-94,-38,54,22,-23,3,16,30,-113,-41,-127,-33,-7,-100,9,52,11,-46,-32,-49,-23,17,41,34,-27,-9,40,38,-17,-127,-7,17,-127,39,-15,40,-22,-39,6,-110,-14,-27,45,30,30,47,6, 
  /* [0][1][][] */ 124,19,46,92,-4,-61,127,43,-8,-114,-80,92,21,-127,-46,62,-58,-64,93,36,-75,-7,-127,-54,-38,59,-127,127,-47,61,127,53,4,97,14,79,-123,84,-32,-39,65,-127,36,62,-127,-127,-17,-78,-127,-43,-45,34,127,-41,62,11,-127,-3,-70,5,-69,-52,-8,62,-75,-15,39,-58,-53,4,-43,-104,-105,64,127,-57,127,56,-91,-63,127,-55,-39,127,-67,0,12,97,-26,41,-83,47,3,-73,93,8, -127,6,-69,96,-92,-127,-90,-127,127,2,-97,56,-66,-114,-127,127,-127,-127,127,95,30,-127,-79,115,-127,113,-7,89,-72,-43,-90,67,-127,84,127,-28,43,94,127,-101,-38,34,-8,60,-69,-97,-88,-127,-8,-61,-40,127,52,65,40,-51,14,17,60,-1,-25,6,-118,127,-3,-127,127,127,24,25,-93,-54,-10,51,-120,-127,95,127,115,-45,-127,52,-102,74,-127,-63,127,127,80,127,-127,-127,-82,-62,59,127, 61,15,65,90,-3,-38,16,25,0,127,-127,51,14,-43,-121,100,43,-57,36,-19,-67,4,-72,-45,-20,-35,83,13,127,97,18,-90,-65,-127,-15,127,-127,-13,-50,-60,1,91,44,127,11,-86,-12,-108,104,-59,-71,-17,103,-80,-127,25,92,1,-127,100,-56,-3,42,54,127,-64,1,-21,-63,-31,-40,-26,-88,-127,-6,-71,5,-18,-117,-19,-90,-68,-41,110,-108,37,-39,23,-57,-24,-30,58,-11,127,51,-14, 
  /* [0][2][][] */ 60,-113,34,-22,13,1,28,32,-48,-67,-37,-64,45,6,-3,73,-61,11,-21,68,5,38,-8,0,7,127,-5,6,-8,26,17,42,-19,-4,-23,-29,74,-22,27,-11,-21,-3,-29,-28,9,-38,-3,-9,-36,-22,-53,46,17,5,-37,-29,-23,-1,-10,51,-39,-33,87,-50,-19,48,-61,-40,21,-17,9,109,-69,37,14,-12,-35,-29,-84,-14,28,-38,-30,-30,-9,54,-61,4,-100,22,40,34,7,7,47,0, -46,1,127,27,127,47,-15,-5,-101,7,-49,-54,127,-46,-83,1,-31,35,11,-49,24,38,81,-37,54,-3,-17,41,-5,127,-7,12,-90,11,13,-77,76,14,40,-127,-35,-29,-127,36,17,-47,-39,-91,-24,-100,-71,109,114,-65,-39,-108,-32,127,-25,32,63,-127,127,33,-13,39,-24,-6,127,-43,13,127,-127,20,-28,-127,-20,-71,-116,-21,0,-97,-30,-61,9,127,-5,-25,44,39,86,13,-11,-16,-16,-17, 51,96,32,-7,-11,-22,-8,15,21,37,17,6,10,14,-9,49,-59,-13,6,55,-4,20,-12,-55,4,120,29,31,33,46,-22,-72,-68,-20,-25,-40,56,-9,24,15,9,-43,-9,49,3,-16,-32,-50,-2,-34,-76,30,7,-22,2,7,-6,24,-11,89,-80,20,81,-56,63,37,-44,-10,-1,-27,6,85,43,4,-20,-50,-34,-10,-42,35,19,-113,-16,-7,21,43,-39,-1,-110,33,-1,43,-32,9,11,-26, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant11_scale = { 96, { 0.011604144237935543, 0.0099929319694638252, 0.0065143383108079433, 0.0046800044365227222, 0.012994539923965931, 0.010319868102669716, 0.018994834274053574, 0.011312363669276237, 0.0093864155933260918, 0.0094337854534387589, 0.0036408309824764729, 0.011325747705996037, 0.010360981337726116, 0.0067559992894530296, 0.0053627691231667995, 0.0052738422527909279, 0.0073227747343480587, 0.0083153015002608299, 0.0061801038682460785, 0.0045819059014320374, 0.0089719481766223907, 0.014691805467009544, 0.0093757882714271545, 0.0086957290768623352, 0.022916780784726143, 0.0064568277448415756, 0.014693506062030792, 0.0060854237526655197, 0.01168013084679842, 0.003641399322077632, 0.015014808624982834, 0.015404409728944302, 0.0053767752833664417, 0.0091364486142992973, 0.01093997061252594, 0.020714543759822845, 0.0075682355090975761, 0.016764840111136436, 0.012834914959967136, 0.0043345941230654716, 0.0093789361417293549, 0.011411791667342186, 0.007818947546184063, 0.0048156385309994221, 0.0044438699260354042, 0.0047539249062538147, 0.0076526408083736897, 0.0047399541363120079, 0.0084416326135396957, 0.003760636318475008, 0.0054492698982357979, 0.0048000123351812363, 0.0051895640790462494, 0.0081644793972373009, 0.011406640522181988, 0.0075168074108660221, 0.0099149737507104874, 0.0073479353450238705, 0.005807843990623951, 0.0040583545342087746, 0.0082856230437755585, 0.0096738114953041077, 0.0054860529489815235, 0.0048911604098975658, 0.0094848582521080971, 0.0084694121032953262, 0.011089155450463295, 0.01028691790997982, 0.0082059586420655251, 0.010012040846049786, 0.0087384432554244995, 0.0056930286809802055, 0.0057429303415119648, 0.012067731469869614, 0.01616838201880455, 0.0045033534988760948, 0.0060460143722593784, 0.0086343390867114067, 0.0054144388996064663, 0.0099229300394654274, 0.010061636567115784, 0.0051711509004235268, 0.0083554517477750778, 0.0070207947865128517, 0.0044444212689995766, 0.0084790699183940887, 0.0066383844241499901, 0.0090564461424946785, 0.0089380005374550819, 0.0084396619349718094, 0.0035959368105977774, 0.012724833562970161, 0.008321395143866539, 0.018519582226872444, 0.0041557261720299721, 0.011473577469587326, } };
const TfArray<96, int> quant11_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data12[96] = { 5307, 4040, 1742, -1966, 7558, 9850, 11879, 2369, -643, 9508, 1764, -3626, 5013, 4204, 333, -497, 3636, 8336, -364, 123, 7794, 9991, 18834, -1223, -3443, -218, 9209, -384, 1787, 1758, 12259, -3242, 9142, 2438, 7236, -4258, 847, -9900, -215, 1399, 2426, 1700, 1940, -265, 747, 2399, 6845, 7232, 5021, 3299, 7440, 4219, -4493, 1604, 2436, 1483, 2359, 4329, 13004, 1018, -836, 5900, 6334, 4331, 3419, 7888, -4427, 3244, 5449, -400, 6191, 1564, 4274, 5137, 4322, 2514, -1131, 2589, 2250, 2791, 4135, 4732, 14073, 799, 1859, 3677, 545, -1679, 25678, -801, 781, -898, 9888, 2868, 117, -520, };
const TfArray<1, int> tensor_dimension12 = { 1, { 96 } };
const TfArray<96, float> quant12_scale = { 96, { 0.00011883655679412186, 9.7858821391128004e-05, 0.0001232614740729332, 0.00014274069690145552, 9.8827025794889778e-05, 8.2333586760796607e-05, 6.2686260207556188e-05, 0.00012719188816845417, 0.00012683167005889118, 8.6168642155826092e-05, 0.00013683848374057561, 0.0001181701518362388, 0.00010482585639692843, 0.00011829334107460454, 0.0001655366359045729, 0.0001567975414218381, 0.00016978013445623219, 9.104239143198356e-05, 0.00011871745664393529, 0.00015817247913219035, 8.6453219410032034e-05, 8.2974314864259213e-05, 5.1561211876105517e-05, 0.00016767843044362962, 0.00017278779705520719, 0.00013559669605456293, 8.8897148089017719e-05, 0.00011751276906579733, 0.00010673369979485869, 0.00013654625217895955, 6.6801127104554325e-05, 0.00011125142191303894, 8.2321821537334472e-05, 0.00016112404409796, 9.6198600658681244e-05, 0.00015009311027824879, 0.00014937497326172888, 6.9569490733556449e-05, 0.00015981098113115877, 0.00016452065028715879, 0.0001474604505347088, 0.00013421903713606298, 0.00015369345783255994, 0.00022356219415087253, 0.0002401031379122287, 0.00017790247511584312, 9.1986992629244924e-05, 8.7942134996410459e-05, 0.00013020940241403878, 0.00015360623365268111, 9.7344032838009298e-05, 0.00010824039054568857, 0.00010758849384728819, 0.00022590384469367564, 0.00010914861195487902, 0.00021128237131051719, 0.00013442078488878906, 0.00010744209430413321, 6.9596288085449487e-05, 0.00014517341332975775, 0.00016259305994026363, 0.00011414875916671008, 0.00010247711179545149, 0.00012816648813895881, 0.00013930338900536299, 0.00010101698717335239, 0.00011478988017188385, 0.00012735890049953014, 0.0001055891189025715, 0.00016291235806420445, 0.00010841091716429219, 0.00013599965313915163, 0.00010038580512627959, 8.8695684098638594e-05, 0.0001261583820451051, 8.968392648966983e-05, 0.00014599405403714627, 0.00014473234477918595, 0.000134229616378434, 0.00017013387696351856, 0.00012376887025311589, 0.0001033950611599721, 5.719951877836138e-05, 0.00011705120414262637, 0.00015349984460044652, 0.00017525139264762402, 0.00018009674386121333, 0.00014992848446127027, 3.9406870200764388e-05, 0.00012873613741248846, 0.00022926555539015681, 0.00017365801613777876, 8.3348335465416312e-05, 0.00013307390327099711, 0.00014843732060398906, 0.00013945878890808672, } };
const TfArray<96, int> quant12_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data13[96*1*1*16] = { 
  /* [0][0][][] */ -31,11,24,12,-49,-63,-71,-47,86,-66,32,-17,39,-127,27,-90, 
  /* [1][0][][] */ -113,43,-71,-70,-76,42,-2,40,-61,-19,101,-78,31,127,27,28, 
  /* [2][0][][] */ -53,1,-89,-13,2,-41,44,-26,-73,102,69,-12,57,40,-60,127, 
  /* [3][0][][] */ -48,-73,-10,-46,-63,27,-40,-100,10,0,49,-86,-48,-33,-127,-37, 
  /* [4][0][][] */ 97,2,-55,43,-98,18,-127,48,6,66,48,63,18,-22,-52,-98, 
  /* [5][0][][] */ -58,54,-67,4,38,-26,-21,-52,73,-35,15,-15,30,-127,-125,-65, 
  /* [6][0][][] */ -20,-38,-28,31,-79,96,47,-28,-37,-81,127,-51,-31,-11,-125,28, 
  /* [7][0][][] */ -58,100,109,-127,74,126,45,-96,80,36,-57,-20,70,0,-4,97, 
  /* [8][0][][] */ -50,8,61,-25,83,30,127,84,-51,-18,-109,-89,52,96,-93,-72, 
  /* [9][0][][] */ 49,75,55,-3,-127,-53,-67,-70,62,11,115,19,-28,-89,80,-13, 
  /* [10][0][][] */ -30,-85,26,-94,-110,48,49,25,-51,-73,-21,20,-35,36,-127,37, 
  /* [11][0][][] */ 95,-58,4,98,-87,-11,49,-23,127,84,-49,7,22,-94,-42,100, 
  /* [12][0][][] */ -61,-65,127,-55,86,-36,11,65,53,-8,80,63,-46,-6,-87,-9, 
  /* [13][0][][] */ -29,-5,38,6,-9,-7,127,34,-116,-13,36,-7,-43,83,90,-45, 
  /* [14][0][][] */ 107,-127,90,29,72,58,89,87,62,107,66,35,93,-12,59,-47, 
  /* [15][0][][] */ 15,124,6,-42,18,127,-71,44,-38,-37,-52,-2,-52,92,-18,-26, 
  /* [16][0][][] */ -53,77,127,-39,4,61,-4,-21,-14,32,-27,55,70,-14,100,127, 
  /* [17][0][][] */ 37,127,67,-99,-5,-7,6,-64,-72,43,11,81,-75,-38,98,-33, 
  /* [18][0][][] */ -99,-33,-75,-71,127,86,-29,-42,76,88,118,43,24,121,-48,-13, 
  /* [19][0][][] */ 8,74,81,63,58,-16,12,-1,-2,127,43,62,66,69,-53,16, 
  /* [20][0][][] */ 113,27,-9,105,-125,21,-12,42,-59,-98,-111,-54,127,-56,41,25, 
  /* [21][0][][] */ -51,-58,3,111,-11,-20,-127,71,-21,8,7,37,-51,15,-20,-11, 
  /* [22][0][][] */ -17,42,-53,-64,127,-6,-41,53,38,86,56,109,-28,23,-19,23, 
  /* [23][0][][] */ -76,30,-17,3,-11,46,67,76,-40,127,-3,-25,3,48,-40,-12, 
  /* [24][0][][] */ 36,-81,14,38,127,25,25,-20,44,24,41,40,-23,17,-2,-22, 
  /* [25][0][][] */ 91,-72,50,12,28,26,5,42,127,-54,-43,-4,102,-81,43,62, 
  /* [26][0][][] */ 64,11,113,84,49,6,-58,-26,-10,42,0,127,32,-39,1,-40, 
  /* [27][0][][] */ -48,30,-64,22,-43,77,-1,-96,13,-51,104,31,52,-26,127,76, 
  /* [28][0][][] */ -63,5,-64,-127,23,-69,-1,-26,-111,102,-48,43,-10,42,-14,63, 
  /* [29][0][][] */ 92,108,-65,27,44,65,-27,-38,53,50,-19,44,-127,-2,-29,66, 
  /* [30][0][][] */ -22,91,-127,-72,52,-29,22,-13,-66,20,-41,-17,-15,73,12,110, 
  /* [31][0][][] */ 2,-97,112,17,42,-85,-105,13,-34,11,65,-25,-107,84,69,127, 
  /* [32][0][][] */ -29,42,-15,36,-92,34,11,27,45,-127,18,-79,55,27,21,22, 
  /* [33][0][][] */ -90,-14,34,98,18,56,-81,19,-39,-78,17,-42,13,-23,6,127, 
  /* [34][0][][] */ 3,47,-113,-112,78,-32,-23,84,-12,26,-33,-40,-89,-21,-20,127, 
  /* [35][0][][] */ 65,3,17,-23,11,22,-51,-32,-18,-127,-27,28,-22,-16,31,-31, 
  /* [36][0][][] */ -22,1,-115,13,31,127,-6,39,-21,-8,65,27,-7,29,-77,36, 
  /* [37][0][][] */ 58,23,49,-33,32,-127,13,-19,-88,74,-74,-8,29,27,110,13, 
  /* [38][0][][] */ -19,127,34,-37,8,8,45,-88,6,11,-99,44,-29,-68,-62,9, 
  /* [39][0][][] */ 86,16,-127,-93,-47,-8,24,-61,26,-7,22,-25,78,37,-105,-71, 
  /* [40][0][][] */ -49,21,-56,-70,-11,-35,17,-127,11,11,-7,-39,61,96,27,36, 
  /* [41][0][][] */ -46,-108,-8,127,27,4,-50,6,-24,-85,82,-91,-80,-32,8,36, 
  /* [42][0][][] */ -24,60,11,-127,48,4,-10,-33,73,-7,-59,27,92,-20,-17,8, 
  /* [43][0][][] */ -18,38,-7,7,127,34,31,10,12,48,17,-90,-106,-43,-23,-7, 
  /* [44][0][][] */ 77,-30,14,59,-38,-2,-4,30,19,-43,18,8,127,-1,-42,-19, 
  /* [45][0][][] */ -7,-127,-42,43,-37,-100,7,46,19,-57,4,40,-107,110,29,-35, 
  /* [46][0][][] */ 10,-125,25,102,-31,-35,-127,73,66,-40,23,-31,71,47,103,93, 
  /* [47][0][][] */ -89,-101,13,81,22,32,99,51,13,-85,-127,-54,71,-21,-123,9, 
  /* [48][0][][] */ -34,64,-38,-12,19,63,-8,-100,5,-34,25,-23,51,-127,-52,29, 
  /* [49][0][][] */ -68,15,20,-26,-13,9,120,127,-46,-32,2,17,-27,40,-34,6, 
  /* [50][0][][] */ 48,47,-64,37,28,-127,-57,-24,-96,61,-5,15,7,-66,-109,-63, 
  /* [51][0][][] */ -51,28,-55,101,-23,62,-27,-59,-22,-96,-3,-66,16,10,-30,127, 
  /* [52][0][][] */ -112,12,4,1,32,55,49,17,0,-91,-23,-44,-81,-45,-127,3, 
  /* [53][0][][] */ -32,-34,-49,-127,-16,11,17,49,27,-27,-52,7,-40,0,60,103, 
  /* [54][0][][] */ -1,-39,-34,-19,-58,74,46,-40,-17,-118,58,17,-40,9,-127,24, 
  /* [55][0][][] */ -4,-9,-44,43,66,-30,39,84,-41,-35,-127,-36,72,-38,-10,32, 
  /* [56][0][][] */ 84,-49,-45,-20,-127,15,-101,-10,-32,-49,-52,34,76,-72,70,15, 
  /* [57][0][][] */ -66,-12,51,-49,127,23,68,15,-12,52,16,10,-82,64,-103,-7, 
  /* [58][0][][] */ 8,-21,22,-34,54,-16,-49,-62,46,-127,-61,-4,-94,-43,-49,49, 
  /* [59][0][][] */ -111,-47,-34,-3,22,90,-83,-72,104,127,-67,8,-11,37,-44,29, 
  /* [60][0][][] */ 8,-92,19,5,-127,-87,45,38,10,36,-59,37,-18,-75,26,64, 
  /* [61][0][][] */ 39,-1,-78,19,-49,-28,-127,-72,2,17,35,106,78,-44,114,44, 
  /* [62][0][][] */ 32,-33,45,-26,-43,20,45,127,-34,108,31,58,4,9,84,115, 
  /* [63][0][][] */ 46,-100,0,-2,-94,-16,23,-43,-21,-6,-20,9,-43,105,127,47, 
  /* [64][0][][] */ 6,-17,-127,-7,25,70,29,17,-7,-84,30,-29,80,-62,-48,124, 
  /* [65][0][][] */ -23,-49,56,63,98,4,71,92,-37,-26,-127,-99,57,69,-65,1, 
  /* [66][0][][] */ -56,-94,8,-127,-48,-127,59,-32,1,-17,35,69,-89,-65,-66,102, 
  /* [67][0][][] */ -20,-37,-81,-43,-45,88,-17,-127,-63,-21,-11,-81,30,-4,-68,35, 
  /* [68][0][][] */ 98,79,24,-38,-57,-4,-70,-104,-108,-127,-53,-45,78,4,43,-107, 
  /* [69][0][][] */ 7,2,31,-42,-11,-41,-12,36,-22,127,-6,-8,6,44,43,-12, 
  /* [70][0][][] */ 52,-27,-43,83,-127,48,-17,-60,79,92,29,43,64,-33,-23,22, 
  /* [71][0][][] */ 127,-45,28,100,-108,-18,13,12,60,24,-37,41,26,-34,59,42, 
  /* [72][0][][] */ -18,-76,21,101,82,40,-127,86,97,-2,69,11,-30,-57,-97,76, 
  /* [73][0][][] */ 19,10,39,-127,47,-66,-59,66,-15,97,-7,-23,2,-92,33,-21, 
  /* [74][0][][] */ 52,30,12,38,-127,-8,57,26,-74,-26,34,-61,26,-65,0,37, 
  /* [75][0][][] */ 111,107,-127,52,44,44,-29,-22,-37,-9,56,99,-102,95,101,83, 
  /* [76][0][][] */ -78,-30,-4,-45,-40,5,110,2,-67,12,105,44,-49,-127,-45,86, 
  /* [77][0][][] */ -70,127,-16,2,-66,-89,70,80,67,-89,17,80,-47,40,-3,106, 
  /* [78][0][][] */ 127,8,-79,47,-66,57,-105,-24,-8,-15,-44,17,48,-69,50,46, 
  /* [79][0][][] */ -34,-8,100,85,-54,-89,-65,-6,-38,16,-8,25,-52,127,-25,38, 
  /* [80][0][][] */ 71,74,32,-127,15,7,69,-54,30,20,-57,33,103,-65,-19,-40, 
  /* [81][0][][] */ 39,-48,32,-127,92,31,-8,116,80,26,-31,-28,-17,18,-97,-76, 
  /* [82][0][][] */ 97,40,55,18,117,-89,1,73,-38,110,-42,33,-12,-38,45,-127, 
  /* [83][0][][] */ -65,115,47,23,75,82,127,102,-4,25,-7,-56,-124,90,-68,-103, 
  /* [84][0][][] */ 9,-63,-32,127,-36,-52,-111,49,-89,36,-38,-36,-91,85,28,-24, 
  /* [85][0][][] */ -71,49,-50,-13,-7,-72,-61,-22,-17,54,-14,-77,-127,-107,-46,25, 
  /* [86][0][][] */ -32,38,81,127,34,-26,51,40,1,18,-28,-73,41,73,-116,-52, 
  /* [87][0][][] */ -40,83,127,-46,-112,-18,39,25,21,-52,41,43,-83,6,-29,6, 
  /* [88][0][][] */ -14,-81,-67,2,49,-4,-34,29,13,-93,-126,-84,127,-37,-16,19, 
  /* [89][0][][] */ 47,14,32,-121,-8,-80,-69,45,127,-9,13,-102,28,-34,77,-101, 
  /* [90][0][][] */ 9,82,37,19,-49,35,42,108,11,-60,-19,127,36,3,-34,76, 
  /* [91][0][][] */ -33,9,12,74,77,25,-61,-96,-48,51,-31,39,-122,-127,-62,-41, 
  /* [92][0][][] */ -7,36,-11,1,-127,-3,-88,59,-39,37,50,70,-16,-34,65,-16, 
  /* [93][0][][] */ 124,29,127,40,-105,-99,10,24,-10,-44,-17,-35,-2,-47,-20,7, 
  /* [94][0][][] */ -46,-126,15,-127,28,63,-8,22,94,-46,23,50,21,55,-80,80, 
  /* [95][0][][] */ -36,-57,-44,-24,127,119,-32,50,80,28,-61,44,-14,99,-88,34, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant13_scale = { 96, { 0.0018373512430116534, 0.0015130110550671816, 0.0019057656172662973, 0.0022069369442760944, 0.0015279806684702635, 0.0012729729060083628, 0.0009692023741081357, 0.0019665344152599573, 0.0019609648734331131, 0.0013322673039510846, 0.0021156820002943277, 0.0018270479049533606, 0.0016207295702770352, 0.0018289524596184492, 0.002559388754889369, 0.0024242722429335117, 0.0026249981019645929, 0.0014076211955398321, 0.001835509785450995, 0.002445530379191041, 0.0013366672210395336, 0.0012828792678192258, 0.00079719623317942023, 0.0025925033260136843, 0.002671500202268362, 0.002096482552587986, 0.0013744531897827983, 0.0018168839160352945, 0.0016502270009368658, 0.0021111636888235807, 0.0010328229982405901, 0.0017200761940330267, 0.0012727910652756691, 0.0024911649525165558, 0.0014873421750962734, 0.0023206139449030161, 0.0023095107171684504, 0.0010756251867860556, 0.0024708635173738003, 0.0025436803698539734, 0.0022799097932875156, 0.0020751822739839554, 0.0023762793280184269, 0.0034565313253551722, 0.0037122734356671572, 0.002750579034909606, 0.0014222257304936647, 0.0013596875360235572, 0.0020131885539740324, 0.0023749307729303837, 0.0015050518559291959, 0.0016735221724957228, 0.0016634431667625904, 0.0034927360247820616, 0.0016875643050298095, 0.0032666709739714861, 0.0020783015061169863, 0.0016611795872449875, 0.0010760395089164376, 0.0022445495706051588, 0.0025138775818049908, 0.0017648724606260657, 0.0015844152076169848, 0.0019816027488559484, 0.0021537921857088804, 0.0015618399484083056, 0.0017747848760336637, 0.0019691165070980787, 0.0016325304750353098, 0.0025188142899423838, 0.0016761587467044592, 0.0021027126349508762, 0.0015520812012255192, 0.0013713383814319968, 0.0019505551317706704, 0.0013866176595911384, 0.0022572376765310764, 0.0022377301938831806, 0.0020753457210958004, 0.002630467526614666, 0.001913610496558249, 0.0015986077487468719, 0.00088437099475413561, 0.0018097476568073034, 0.0023732860572636127, 0.0027095901314169168, 0.002784505020827055, 0.002318068640306592, 0.00060927600134164095, 0.001990410266444087, 0.0035447119735181332, 0.0026849547866731882, 0.0012886620825156569, 0.0020574771333485842, 0.0022950135171413422, 0.0021561949979513884, } };
const TfArray<96, int> quant13_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data14[16] = { -29053, -9944, 11215, -14624, 9648, -11472, 24969, -9326, 12223, -13704, 14549, 12773, -7699, -35194, -2469, 5711, };
const TfArray<1, int> tensor_dimension14 = { 1, { 16 } };
const TfArray<16, float> quant14_scale = { 16, { 6.6536871599964797e-05, 5.2197181503288448e-05, 5.9561858506640419e-05, 5.9385984059190378e-05, 6.8302004365250468e-05, 0.00012309385056141764, 7.1464412030763924e-05, 4.7204266593325883e-05, 0.0001085164476535283, 0.00012519475421868265, 9.7537114925216883e-05, 8.3440652815625072e-05, 8.6520376498810947e-05, 5.2782841521548107e-05, 5.7068828027695417e-05, 6.8894347350578755e-05, } };
const TfArray<16, int> quant14_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data15[16*1*1*96] = { 
  /* [0][0][][] */ 5,36,-3,3,-32,-72,-7,5,-6,-63,16,0,37,-51,55,21,-54,-44,39,24,92,24,-64,21,5,48,127,68,26,60,52,-32,13,17,26,-20,21,32,2,-10,116,6,25,-9,-6,9,-2,-26,35,-21,98,0,-46,-2,25,25,-6,-34,22,34,10,43,-51,-19,15,10,52,12,14,-3,20,45,12,33,8,28,66,-21,44,19,-7,51,38,42,-54,13,1,78,3,15,-90,-8,38,16,85,47, 
  /* [1][0][][] */ 7,63,-68,-27,-25,-57,122,-69,-42,-25,-62,-32,-16,-24,-9,-57,-13,-21,-24,-7,5,-86,127,-37,11,19,18,72,-56,16,-21,4,-29,42,19,20,-8,62,-45,72,30,1,7,-62,79,-44,-20,56,-70,14,52,-97,-26,53,72,61,57,17,-46,-16,-33,14,-4,-43,44,50,96,-1,-38,-122,-13,9,44,75,-3,58,-44,-36,125,-59,61,2,43,-45,4,-61,-14,16,-44,-25,23,-13,72,-85,-42,41, 
  /* [2][0][][] */ 23,-33,29,1,45,38,-66,27,-52,31,-1,-36,44,-27,1,20,28,-10,-127,-17,-25,-55,-18,-1,-8,-5,-60,23,-51,-38,-31,69,-20,-50,-12,-2,-66,4,-45,0,53,21,-8,30,14,45,-15,-24,-93,-13,-26,0,-38,37,29,-67,33,8,37,8,-43,-26,-11,55,26,-22,-44,-24,-23,13,-30,-32,12,39,20,56,-65,3,-40,-23,20,17,51,-33,-13,-57,-28,-71,5,-36,-31,46,-16,6,93,-30, 
  /* [3][0][][] */ 20,-36,-34,-127,-25,-7,102,-15,46,103,-74,-24,2,-14,-19,41,71,43,-13,35,-37,37,8,-7,-27,57,59,-6,-28,-15,-62,66,10,-10,48,-19,-4,-53,-14,54,16,24,-14,18,46,-37,-16,39,52,-21,47,-44,108,25,22,2,-21,-18,19,-35,-12,47,59,-9,-30,-19,114,-53,-27,4,-48,42,20,-81,11,-52,31,-40,121,1,-14,-56,-36,-36,-37,-34,79,85,-43,26,-66,1,27,-65,-31,19, 
  /* [4][0][][] */ -41,67,18,7,-6,22,-52,-21,16,-12,21,-7,8,68,-10,33,-14,-60,-1,-77,30,-36,-39,28,-17,-52,-7,5,-25,127,-38,-42,12,-37,-6,-26,85,61,-17,-12,30,-8,24,-21,-65,-23,63,1,34,-2,-57,-2,-66,48,29,25,-14,76,-36,37,-36,-59,-34,9,69,36,-49,3,11,-18,14,-76,11,67,59,65,-23,15,-47,34,34,69,27,-44,47,-42,-13,-62,-56,-39,-52,3,-6,9,13,-16, 
  /* [5][0][][] */ 2,-20,41,-10,-1,-10,-9,-2,23,3,-25,-18,-12,-37,24,-10,-9,14,-49,-38,-28,12,-18,16,12,-28,62,-24,-8,42,17,68,-15,-75,11,16,-23,-15,-18,-13,-48,0,-17,9,7,4,-51,10,-17,7,38,1,10,-63,1,17,-21,-53,-1,-36,30,19,12,47,-30,-1,96,-11,-16,-24,12,5,-6,19,33,19,-15,-22,127,28,-14,-17,-34,14,43,47,0,69,6,-29,3,7,1,-14,-18,29, 
  /* [6][0][][] */ 35,-60,67,20,-26,69,-42,-75,-31,-80,-90,35,22,-9,-34,55,-7,38,5,-52,-53,-2,-80,-40,-7,-24,-23,74,-102,18,-29,-20,28,69,-12,-21,-21,-56,-8,4,-52,39,6,-21,22,38,-108,-23,23,-9,-67,-127,46,-7,-13,3,29,-40,21,-32,-33,-50,44,1,32,-72,-61,-41,-92,32,-35,-50,-31,-61,3,-87,55,23,-76,29,-42,62,30,-95,46,-47,-27,-22,-34,44,-82,50,16,-22,64,-69, 
  /* [7][0][][] */ -20,-25,-79,45,-46,-11,15,14,-103,9,105,74,-13,-48,-18,-52,-31,22,21,5,-39,-20,-41,-72,89,29,-20,88,4,15,1,32,-28,-127,33,106,-23,-5,-67,30,-1,-1,-7,-63,26,80,51,92,-17,63,-51,-19,44,-31,67,-65,-32,49,-83,-15,52,10,25,-46,62,-49,122,-38,-78,-13,65,15,11,-31,-91,-40,46,-23,101,-28,-20,1,-72,-20,30,40,-65,59,17,-2,-12,24,76,12,71,-22, 
  /* [8][0][][] */ -9,-76,15,9,0,13,13,6,-16,-11,41,34,7,16,-36,4,64,-18,8,-4,-22,-77,-23,0,-22,-31,73,-5,-23,55,17,-11,-12,-1,7,4,-33,-8,26,-36,-5,56,39,-26,0,-29,36,-30,28,-2,50,15,-13,11,-49,-5,-26,96,-63,-9,-3,-53,-64,4,-73,-48,-25,26,-26,14,34,-19,-34,-127,45,-102,2,5,-47,8,-17,-15,-13,47,69,-58,-28,52,-39,76,24,-6,-57,-1,2,-50, 
  /* [9][0][][] */ -35,-19,-36,14,-8,23,2,37,-26,9,66,59,-34,67,38,-39,-2,21,-13,-24,8,34,1,12,-12,11,16,13,38,-9,22,-5,-12,-11,13,58,-17,10,34,-12,-2,-30,14,8,1,48,1,54,-27,19,-6,37,127,23,-22,3,15,0,34,33,-14,13,66,7,18,29,49,-3,40,-3,-11,31,12,-99,-27,-94,-13,-2,44,-1,7,25,-2,-23,37,21,-38,13,-26,95,24,42,58,39,-19,29, 
  /* [10][0][][] */ 20,42,6,1,-26,3,-28,-16,63,-4,-33,13,20,-1,-13,-60,-41,16,6,0,27,-5,-28,-42,17,-15,-93,53,-22,48,-14,21,17,32,-8,0,8,-12,-12,11,33,-14,59,-54,-19,-6,4,27,4,2,12,-18,-17,-26,13,34,-10,-6,-6,-5,-19,-41,11,6,-14,-19,-86,-35,-68,0,36,-3,-32,19,37,24,48,-8,-97,13,-23,45,-6,-15,0,3,-69,-127,-13,17,-3,1,67,-35,23,17, 
  /* [11][0][][] */ 22,-36,-4,14,-52,28,5,-3,71,-22,-24,-28,20,10,-1,2,-9,37,17,-47,16,12,5,-43,30,11,51,9,23,-53,-43,23,14,87,-95,1,13,-33,53,26,-57,43,-22,3,-39,18,-26,3,40,-19,-30,-25,-4,1,-61,67,-19,-4,1,-31,13,-6,7,-58,-14,-35,-127,-77,-16,-23,-85,26,39,5,-3,-8,42,65,-111,-30,-15,-12,-7,2,-23,-14,50,79,7,-30,4,-2,-27,34,76,22, 
  /* [12][0][][] */ 3,38,-43,-35,8,-21,10,30,60,-24,26,5,-14,-6,-6,26,24,-56,-26,25,23,46,14,51,-34,-47,-114,-14,75,-10,26,-3,-20,-68,66,-3,38,4,13,8,3,-62,4,40,48,5,27,4,-57,8,-50,98,91,-12,16,-82,16,33,-22,-9,36,60,75,4,-7,1,18,19,127,10,39,28,10,-27,-16,-16,-21,-44,44,-55,33,-53,31,-24,2,6,15,-99,-25,48,-26,39,33,68,2,31, 
  /* [13][0][][] */ -15,10,-84,22,13,34,-18,11,53,62,-56,31,-39,-23,67,-75,47,46,63,33,-16,-47,-35,13,46,76,-43,50,18,32,50,9,-36,84,14,44,7,-63,-63,-43,-8,1,7,10,73,68,-52,55,-69,42,1,-12,-2,-77,83,53,-3,-74,5,-20,50,5,7,-41,-8,116,126,33,50,22,-56,-1,30,77,-110,71,44,-63,127,-41,-39,-33,43,11,16,45,-58,-4,-27,-36,2,59,60,29,80,48, 
  /* [14][0][][] */ -23,62,6,14,-68,-22,5,54,-68,-12,89,23,-95,6,75,-28,-38,36,-52,42,-9,20,-92,-11,-39,-16,-48,-115,27,-13,19,83,-52,38,25,-7,-32,-83,3,-26,36,-48,48,-28,-23,66,-90,41,0,-34,93,17,3,32,-42,37,-75,43,14,56,55,70,4,35,16,-38,-12,-85,70,80,73,49,-47,37,14,3,45,3,14,23,-63,125,10,-118,75,1,11,30,-127,-14,-33,1,-15,31,27,16, 
  /* [15][0][][] */ 70,-34,25,19,34,1,-36,0,6,28,-53,-19,68,51,-22,-10,-32,26,-68,45,-10,-17,17,7,59,-35,75,33,44,-39,-51,44,68,51,-1,-90,42,54,42,69,87,29,-32,3,-37,-112,18,-42,-25,-22,-14,-21,-9,-43,-12,60,-17,8,-23,12,-7,-47,-14,27,35,41,-59,41,-19,-37,10,-8,-4,-117,-55,-101,-19,22,-127,52,69,-30,54,26,-69,-1,-6,-25,62,80,16,-72,-35,-11,29,-36, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant15_scale = { 16, { 0.002912172582000494, 0.0022845559287816286, 0.0026068915612995625, 0.0025991939473897219, 0.0029894285835325718, 0.0053875474259257317, 0.0031278401147574186, 0.0020660269074141979, 0.0047495262697339058, 0.0054794992320239544, 0.004268985241651535, 0.0036520140711218119, 0.0037868067156523466, 0.0023101889528334141, 0.002497777109965682, 0.0030153540428727865, } };
const TfArray<16, int> quant15_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data16[96] = { 12460, 2143, -11708, 8936, 670, -2343, 417, -2319, 654, -4039, 1403, 181, 11991, -2825, -581, -6583, -683, 1365, -8552, -1772, -1967, -196, -6070, -2036, 117, 4527, -11293, -4963, 2287, -2433, 442, -1161, 15487, 244, -2722, 58, -65, 8520, 6016, 11348, 1221, 4643, 1279, 3646, -624, -310, 5538, -1470, -5085, -468, -3269, 1923, -2590, -4412, -3221, 1637, 1441, -282, 1891, 505, 2614, 687, 1359, 7581, 7101, 14, 12345, 11775, -2329, -123, 11940, -1881, -101, 363, -3360, -1383, 24739, 7872, 7363, 12677, 8568, -881, 6903, 10258, -1957, -372, 4998, -7288, 10582, 3440, -7914, -5542, -25, -1888, 15673, -79, };
const TfArray<1, int> tensor_dimension16 = { 1, { 96 } };
const TfArray<96, float> quant16_scale = { 96, { 9.6732910606078804e-05, 0.0002665267966222018, 7.2276510763913393e-05, 0.00012767093721777201, 0.00022437566076405346, 0.0003501168976072222, 0.00012676257756538689, 0.00015902640006970614, 0.00037631139275617898, 0.00028199946973472834, 0.0002454586501698941, 0.00022530741989612579, 0.0001140366803156212, 0.00015818842803128064, 0.0002246220683446154, 0.00015075395640451461, 0.00023379658523481339, 0.00032376608578488231, 0.00012980516476090997, 0.00034888720256276429, 0.00021735925110988319, 0.00021432766516227275, 0.00011104956502094865, 0.00014537984679918736, 0.0019539264030754566, 0.00020349278929643333, 0.00018484910833649337, 0.00017338304314762354, 0.00024675787426531315, 0.00018484568863641471, 0.00014649124932475388, 0.00027780150412581861, 7.3850242188200355e-05, 0.00039103862945921719, 0.00015362619888037443, 0.00024785936693660915, 0.00022995342442300171, 0.00012294852058403194, 0.00014166408800520003, 0.00010839020978892222, 0.00052414735546335578, 0.00022312860528472811, 0.00025612584431655705, 0.00015222755610011518, 0.00018350926984567195, 0.00035430726711638272, 0.00021569045202340931, 0.00040599904605187476, 0.00015280618390534073, 0.00039823635597713292, 0.00025245395954698324, 0.00017416976334061474, 0.00015450871433131397, 0.00020635935652535409, 0.00024587789084762335, 0.00027443020371720195, 0.00023146942839957774, 0.00046124029904603958, 0.00036757256020791829, 0.00027399120153859258, 0.00019421429897192866, 0.0002730823471210897, 0.00014909656601957977, 0.00012051467638229951, 0.00029275863198563457, 0.00038202886935323477, 0.00011747352255042642, 0.000126161306980066, 0.00023371710267383605, 0.00026866045664064586, 0.00011158105189679191, 0.00021605830988846719, 0.00051669793901965022, 0.0001714641839498654, 0.00017441356612835079, 0.00019665600848384202, 5.4423479014076293e-05, 0.00015175163571257144, 0.00014653718972112983, 0.00015879613056313246, 0.00011444511619629338, 0.00031906072399578989, 0.00011674184497678652, 0.00024895917158573866, 6.773030327167362e-05, 0.0003090077661909163, 0.00014412772725336254, 0.00022818832076154649, 0.0001354184205411002, 0.00019453375716693699, 0.00010855394066311419, 0.0002422183461021632, 0.00042171785025857389, 0.00015598720347043127, 9.8323100246489048e-05, 0.00019592308672145009, } };
const TfArray<96, int> quant16_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data17[1*3*3*96] = { 
  /* [0][0][][] */ -77,-32,46,-48,85,4,41,-32,1,4,-16,-36,-23,-12,-10,-52,-7,7,-39,-4,-1,14,-2,61,-6,3,-53,5,13,-8,29,3,8,-1,-14,-35,13,-81,-74,-33,-1,-3,33,-34,-26,29,-31,-23,-47,-4,-21,45,-49,-10,59,-16,10,-1,-3,-6,-14,-24,-26,-14,-13,-26,-35,-51,-6,7,-9,18,24,16,9,15,-17,8,127,-21,-127,12,-67,-35,-9,-19,48,-3,-34,-40,31,-9,1,44,8,-6, -45,26,113,-79,-20,14,127,-59,6,-4,-40,-2,-86,-13,-98,46,-2,52,92,-14,13,127,62,127,27,18,31,40,125,23,127,-38,-58,-26,-53,-39,1,-127,114,-52,-37,-127,-10,-47,76,-39,-17,7,25,-6,8,122,-82,16,-99,-7,-89,0,-12,38,-19,-127,-127,-76,-35,-21,-3,-122,-4,16,-59,127,-127,-2,3,-16,-123,-72,-9,-53,-93,12,61,-82,127,74,-30,17,-127,-22,31,8,13,127,-15,-107, -64,-17,24,-10,62,13,67,-33,-12,13,-14,-6,-16,10,-11,-43,-3,-11,-40,-13,-29,28,10,48,-8,3,-19,-9,1,-4,22,11,-33,-1,18,39,-5,-64,-55,3,-15,-8,28,-16,-1,-31,-21,-9,-38,-8,-10,28,-2,-21,11,-15,33,-8,0,-14,-16,-11,-57,19,-30,-29,127,-65,-4,19,-17,4,13,15,-11,30,-61,37,-47,-40,-98,-11,-125,-40,19,-32,36,-11,-3,-64,-21,60,10,45,16,-4, 
  /* [0][1][][] */ -86,-21,111,-86,35,125,-51,-13,3,4,-34,-28,-96,19,19,55,-6,32,67,29,22,-25,116,-15,33,45,113,28,-17,22,-17,-14,-84,-6,47,-2,-14,-51,-88,-127,-23,-25,68,-6,-67,127,-54,-40,34,90,21,-59,-96,93,94,-26,23,-15,20,-6,-9,-16,66,-127,-36,21,-17,-49,8,-7,-87,38,60,127,31,-62,-69,-54,-58,-35,-28,-21,-16,-45,58,17,-79,62,-114,127,96,-53,127,22,-76,-22, 78,127,127,103,-127,-127,66,-44,127,127,-88,-54,-46,127,-30,127,127,-127,127,127,127,-76,104,-102,-127,-127,127,127,-127,127,-3,127,-80,127,127,-81,127,111,-7,-19,127,-14,-127,-68,127,-16,127,127,127,-127,127,-127,117,127,-127,127,-127,127,-127,127,-127,107,68,-127,127,127,-9,127,-80,-127,-65,-123,-2,114,127,80,56,-127,89,-127,47,127,127,127,127,51,-127,127,-76,34,6,-2,-95,-6,-127,-52, -127,-42,86,-55,2,79,-56,17,-27,2,-6,127,-127,28,19,59,-13,31,52,15,3,-14,127,-1,28,34,72,16,-24,-10,15,-8,-127,-23,53,127,-11,-20,-127,-124,-32,-7,17,-9,-42,-64,-48,-60,76,98,7,-41,127,29,127,-41,102,-14,33,-28,-20,-34,-102,-32,-48,2,-41,-56,-3,-6,-127,-2,28,-103,-5,127,-127,-40,-54,-43,-49,-25,-54,-88,24,21,-50,39,-65,-115,127,127,-45,-4,-48,-27, 
  /* [0][2][][] */ -45,-61,21,-56,20,14,-27,25,-5,1,26,-36,5,8,-14,-62,7,-1,-64,-10,-39,-20,17,-8,-2,20,10,12,-10,-4,-28,12,8,1,-12,-20,-12,-22,-16,-14,-31,-3,9,32,17,11,-62,18,-56,8,-16,-24,14,-16,54,-14,-5,-4,-3,-15,-19,20,-4,6,-47,-31,113,24,39,25,-40,-9,-10,-10,-3,-25,-28,6,-19,-49,-35,-5,-55,8,26,5,53,0,-30,-16,7,8,-16,-6,-2,-15, -51,-82,69,-127,-47,16,18,127,-48,50,127,-41,-101,14,127,114,-1,-39,61,-36,-49,-48,106,34,8,15,13,27,-18,-12,-105,-44,-69,-24,-71,-14,-96,-80,45,-28,-29,-55,-47,127,10,-23,-35,13,22,6,-10,-11,65,39,-38,-34,-55,-33,30,-48,110,37,110,40,-53,-69,-16,-42,127,46,-62,5,15,-22,3,-17,-67,-24,14,11,-47,-27,-68,-82,60,-127,6,22,-5,-18,68,23,11,-87,-48,127, -48,0,21,23,23,5,-14,37,-15,-14,19,28,21,-21,-14,-18,5,-1,-35,-25,-27,-2,0,21,-13,19,-27,-1,-21,-17,-26,2,1,3,19,13,-15,-28,-30,-6,-45,30,3,37,36,0,-67,20,-23,-2,-9,-18,23,-21,37,-9,71,4,1,-11,-16,12,12,39,-39,-16,-28,-16,33,6,-42,9,-48,-43,-17,-2,-79,6,101,-24,1,2,-93,-3,10,-3,69,13,-11,-18,-48,37,-4,-13,19,-5, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant17_scale = { 96, { 0.004502046387642622, 0.012404423207044601, 0.0033638211898505688, 0.0059419330209493637, 0.01044266764074564, 0.016294790431857109, 0.005899657029658556, 0.0074012479744851589, 0.017513908445835114, 0.013124536722898483, 0.01142389141023159, 0.01048603281378746, 0.0053073810413479805, 0.0073622474446892738, 0.010454135946929455, 0.0070162401534616947, 0.01088112685829401, 0.015068397857248783, 0.0060412618331611156, 0.016237558797001839, 0.01011611707508564, 0.0099750235676765442, 0.0051683578640222549, 0.0067661232315003872, 0.090937688946723938, 0.0094707580283284187, 0.0086030624806880951, 0.0080694202333688736, 0.0114843575283885, 0.0086029032245278358, 0.0068178493529558182, 0.01292916014790535, 0.0034370641224086285, 0.01819932833313942, 0.0071499166078865528, 0.011535623110830784, 0.010702262632548809, 0.0057221474125981331, 0.0065931882709264755, 0.0050445888191461563, 0.024394340813159943, 0.010384628549218178, 0.011920352466404438, 0.0070848227478563786, 0.0085407048463821411, 0.016489814966917038, 0.010038449428975582, 0.018895601853728294, 0.0071117528714239597, 0.01853431761264801, 0.011749460361897945, 0.0081060351803898811, 0.007190990261733532, 0.0096041709184646606, 0.011443402618169785, 0.012772255577147007, 0.010772818699479103, 0.021466584876179695, 0.017107194289565086, 0.012751824222505093, 0.0090389279648661613, 0.012709525413811207, 0.0069391033612191677, 0.0056088734418153763, 0.013625279068946838, 0.017780005931854248, 0.0054673352278769016, 0.0058716735802590847, 0.010877427645027637, 0.012503726407885551, 0.0051930937916040421, 0.010055569931864738, 0.024047639220952988, 0.0079801147803664207, 0.0081173814833164215, 0.0091525670140981674, 0.0025329231284558773, 0.0070626726374030113, 0.006819987203925848, 0.0073905307799577713, 0.005326390266418457, 0.01484940480440855, 0.0054332823492586613, 0.011586808599531651, 0.0031522361095994711, 0.014381530694663525, 0.0067078485153615475, 0.010620112530887127, 0.0063025089912116528, 0.0090537955984473228, 0.0050522089004516602, 0.011273084208369255, 0.019627170637249947, 0.007259800098836422, 0.0045760553330183029, 0.0091184563934803009, } };
const TfArray<96, int> quant17_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data18[96] = { 1768, 13836, 143, 1686, 7994, 24886, -113, 3824, 13997, -1481, 17421, 5675, 2324, 739, 7014, 287, 4255, 6454, -554, 14409, 863, 10909, -3392, 1575, -13446, 813, 3133, 1788, 8911, 1307, 5841, 5183, 2336, 16256, 5620, 8570, 4907, 2908, 4195, 3909, 31941, 1467, 2911, 1030, 3198, 12235, 11240, 10203, 1864, -1886, 2297, 8802, 3729, -3933, 9178, 286, 4596, 23963, 2671, 2437, 2854, 21006, 4740, -371, 27411, 18670, 1863, 5402, 6914, 6302, 3499, 2213, -5353, 6987, 2984, 3999, 6, 10019, 3683, 8737, 4516, 1853, 5014, 18624, 199, 18884, 5404, 2932, -1034, 4631, 1307, 12424, 5215, 3416, 4568, 7744, };
const TfArray<1, int> tensor_dimension18 = { 1, { 96 } };
const TfArray<96, float> quant18_scale = { 96, { 0.00015248529962264001, 6.0948030295548961e-05, 0.00021099057630635798, 0.00017934055358637124, 9.085759666049853e-05, 3.7677036743843928e-05, 0.00019775175314862281, 9.6708616183605045e-05, 6.1324979469645768e-05, 0.00011442347022239119, 4.5016058720648289e-05, 8.3755105151794851e-05, 0.0001381275214953348, 0.00023450424487236887, 7.9780817031860352e-05, 8.7401262135244906e-05, 0.00012880073336418718, 9.5874354883562773e-05, 0.00012127323134336621, 5.7407967688050121e-05, 0.0001588443701621145, 7.5600473792292178e-05, 0.00010817229485837743, 0.00014229399675969034, 5.9148027503397316e-05, 0.00015523325419053435, 0.00014654337428510189, 0.00014615240797866136, 0.00010283911251462996, 0.00016883964417502284, 0.00010373540135333315, 9.1853740741498768e-05, 0.0001636855595279485, 5.136335312272422e-05, 9.5842915470711887e-05, 7.8088429290801287e-05, 0.00012951005192007869, 0.00014456553617492318, 0.00011084773723268881, 0.00012381060514599085, 3.1780837161932141e-05, 0.000153201530338265, 0.00012575603614095598, 0.00013043361832387745, 0.00012999401951674372, 6.5063533838838339e-05, 6.8531320721376687e-05, 7.2610469942446798e-05, 0.00016297247202601284, 0.00012720325321424752, 0.00017195900727529079, 8.7189662735909224e-05, 0.0001305292098550126, 9.2579895863309503e-05, 7.7783573942724615e-05, 0.00021511509839911014, 9.440805297344923e-05, 3.8060632505221292e-05, 9.7229421953670681e-05, 0.00012193306611152366, 0.00014978494436945766, 4.2939933337038383e-05, 0.00013053948350716382, 0.00016846670769155025, 3.7538531614700332e-05, 4.9148911784868687e-05, 0.000187236990313977, 0.00012282056559342891, 0.00010193718480877578, 7.8329765528906137e-05, 0.00015034367970656604, 8.6894244304858148e-05, 0.00011213483958272263, 0.00010578057117527351, 0.00014985563757363707, 0.00014946208102628589, 0.00012731585593428463, 7.1054731961339712e-05, 0.00013675336958840489, 9.9421777122188359e-05, 9.7382879175711423e-05, 8.3987069956492633e-05, 9.5368828624486923e-05, 5.083751238998957e-05, 0.0001116248095058836, 4.239667032379657e-05, 0.0001101017405744642, 0.00014681511675007641, 0.00014189958164934069, 0.0001399032335029915, 0.00015122762124519795, 6.9829919084440917e-05, 0.00010154558549402282, 0.00012186152889626101, 0.00010417456360301003, 9.3423026555683464e-05, } };
const TfArray<96, int> quant18_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data19[96*1*1*16] = { 
  /* [0][0][][] */ 43,-16,-20,76,-127,-23,83,44,61,108,-2,50,34,29,58,93, 
  /* [1][0][][] */ -49,47,-53,-9,126,127,16,13,-23,-7,-90,36,-49,116,-61,-51, 
  /* [2][0][][] */ -51,53,64,0,49,98,7,43,25,-23,41,-28,57,-127,-22,18, 
  /* [3][0][][] */ 127,-17,6,-10,46,54,8,-10,50,42,-48,-9,-13,52,-28,47, 
  /* [4][0][][] */ -66,-7,-3,56,-127,20,-87,-39,7,15,9,-49,-7,32,-39,123, 
  /* [5][0][][] */ -98,49,35,-8,114,46,15,-23,-41,41,-26,31,-53,62,-127,-30, 
  /* [6][0][][] */ -127,26,-27,50,-32,-94,74,18,-5,-27,-55,54,12,14,-29,16, 
  /* [7][0][][] */ 19,88,38,-105,101,82,127,-36,60,13,-2,62,120,4,-25,27, 
  /* [8][0][][] */ -12,-46,-36,75,-34,46,-67,-40,13,-25,61,57,127,41,-104,5, 
  /* [9][0][][] */ -11,-127,-22,108,-30,-66,-18,53,60,38,6,56,-56,-5,-14,-26, 
  /* [10][0][][] */ 14,-32,-127,65,-86,104,24,-92,13,-33,75,-1,45,56,-54,86, 
  /* [11][0][][] */ -56,-65,-52,16,5,121,60,-33,19,19,18,-118,-20,127,-74,100, 
  /* [12][0][][] */ -38,-86,-64,70,-63,-127,10,69,29,73,-24,93,-10,-35,-4,-3, 
  /* [13][0][][] */ -52,-23,-35,2,-2,2,25,9,-5,127,-15,-19,42,26,11,-24, 
  /* [14][0][][] */ -109,2,-45,-71,-21,66,-34,-121,127,-33,80,5,55,-34,-58,-55, 
  /* [15][0][][] */ 11,-127,124,-54,-81,-51,-13,81,31,-44,-107,-30,77,-31,-24,-62, 
  /* [16][0][][] */ -11,-47,14,-17,34,27,-34,-6,47,-127,20,-26,5,-14,-81,-71, 
  /* [17][0][][] */ 2,-18,29,-31,15,-16,-57,4,74,-64,9,82,127,-64,-37,-117, 
  /* [18][0][][] */ 35,-2,-46,-106,0,-5,127,-49,-4,39,-8,13,29,80,-24,-76, 
  /* [19][0][][] */ -49,-42,-43,-65,-106,60,-34,25,42,-44,25,-127,5,-69,-20,24, 
  /* [20][0][][] */ 35,44,83,-60,94,-30,-36,87,-104,-106,14,-66,-12,127,-3,-41, 
  /* [21][0][][] */ -19,-79,-103,-20,102,25,57,107,-69,-52,-5,57,127,-65,-60,-5, 
  /* [22][0][][] */ 60,-24,73,1,3,20,47,47,41,127,37,33,6,11,126,-25, 
  /* [23][0][][] */ -127,-52,-25,74,52,40,-8,7,-21,19,21,-56,-10,85,74,120, 
  /* [24][0][][] */ 15,13,13,33,1,-78,29,-93,36,127,-105,116,6,-55,83,-71, 
  /* [25][0][][] */ 127,-41,68,93,28,8,-15,27,-84,62,46,-10,8,34,68,-11, 
  /* [26][0][][] */ -13,21,-4,41,-50,127,-12,27,-52,-46,-78,29,11,4,36,-110, 
  /* [27][0][][] */ 32,19,5,-72,-45,3,-101,23,-108,-11,-76,-51,-99,35,-26,127, 
  /* [28][0][][] */ -64,30,19,-5,17,-21,-127,-1,-12,-25,8,11,-2,-35,-55,-24, 
  /* [29][0][][] */ -10,-127,-39,103,-31,13,117,10,67,53,-112,78,53,-40,-54,90, 
  /* [30][0][][] */ 46,-48,-43,14,-127,-2,58,-53,15,-14,-22,-42,1,54,14,40, 
  /* [31][0][][] */ -122,-23,-14,127,-32,8,-69,-12,-24,-73,-4,-54,-4,-84,-20,94, 
  /* [32][0][][] */ -127,-117,-94,2,-81,-71,-6,-19,108,74,-52,-58,51,62,44,-30, 
  /* [33][0][][] */ -28,29,-94,17,-127,-60,64,-28,-123,4,-29,-79,-31,67,66,81, 
  /* [34][0][][] */ 54,41,-8,51,-56,-74,49,13,53,-127,-17,30,-25,17,62,70, 
  /* [35][0][][] */ 34,6,-108,-38,-105,35,127,-20,-1,62,-35,-22,43,86,20,85, 
  /* [36][0][][] */ -16,13,-18,32,127,-20,41,39,-48,33,-79,-73,6,-3,16,3, 
  /* [37][0][][] */ -127,24,-17,-62,56,-96,-53,-32,-34,-13,-3,46,54,-64,10,-92, 
  /* [38][0][][] */ 37,127,-3,-97,-103,-12,-107,-65,-26,-72,72,87,-59,-59,34,-1, 
  /* [39][0][][] */ -18,-52,6,57,16,73,46,-25,-43,44,27,-37,-24,106,45,127, 
  /* [40][0][][] */ 119,20,75,97,-81,-36,14,17,-52,38,-1,-25,-45,-44,127,25, 
  /* [41][0][][] */ -7,-35,13,68,-69,89,-11,33,-50,38,-90,24,24,45,63,-127, 
  /* [42][0][][] */ 21,-72,48,-35,127,2,70,-18,-11,-62,-108,-50,-18,22,-8,4, 
  /* [43][0][][] */ -17,-65,-30,-6,119,0,-26,64,-74,-15,-127,-55,79,-35,-35,33, 
  /* [44][0][][] */ -67,-70,-45,-66,13,57,32,17,-9,-127,-30,54,-37,44,34,100, 
  /* [45][0][][] */ 12,-27,-69,-34,-127,40,-10,-67,42,-30,38,-61,-18,23,-20,47, 
  /* [46][0][][] */ 10,-86,-28,-12,81,-56,-23,96,6,-30,45,38,-59,-63,33,-127, 
  /* [47][0][][] */ -127,-72,-19,96,3,49,58,48,-9,115,103,79,-26,46,-60,111, 
  /* [48][0][][] */ 45,-20,-68,-66,35,-64,-6,63,51,-59,0,27,-47,13,-35,-127, 
  /* [49][0][][] */ 40,55,3,22,-18,-19,54,31,-43,127,-34,44,-40,-26,57,85, 
  /* [50][0][][] */ -1,-4,-1,13,-127,-5,1,-26,38,4,19,43,-27,-59,22,10, 
  /* [51][0][][] */ 28,-2,-7,-127,-18,102,26,-37,-1,2,24,-16,77,71,-34,23, 
  /* [52][0][][] */ 20,-25,-6,-84,82,-104,3,-39,46,-13,127,-84,34,0,-29,117, 
  /* [53][0][][] */ -65,-104,45,-32,-33,-123,24,-114,12,98,-127,68,-9,-49,13,-117, 
  /* [54][0][][] */ 88,88,40,-24,-106,-50,-78,-127,-9,37,39,83,-67,-34,89,15, 
  /* [55][0][][] */ 0,-2,-46,68,-28,42,44,-25,-5,127,13,37,4,10,-10,36, 
  /* [56][0][][] */ 54,-86,-39,86,-63,10,-41,55,127,16,66,50,-18,-48,26,41, 
  /* [57][0][][] */ 8,-13,109,-124,95,-8,-38,17,64,4,7,127,43,-21,95,-83, 
  /* [58][0][][] */ 42,-64,16,-75,39,25,-28,127,8,79,-27,39,40,-5,48,-4, 
  /* [59][0][][] */ -41,18,15,-64,17,-80,-15,-3,13,33,-127,-96,-120,-91,68,-41, 
  /* [60][0][][] */ 44,-2,21,17,-9,-30,5,-48,20,127,3,78,-9,-17,5,0, 
  /* [61][0][][] */ 104,46,11,11,-113,-127,-21,-88,-39,-38,-21,13,-49,-76,118,100, 
  /* [62][0][][] */ -16,67,-28,50,-52,127,-59,19,-38,8,-27,34,-36,49,50,-98, 
  /* [63][0][][] */ -6,-8,-45,-127,-21,-64,76,14,-27,-84,-31,43,-50,91,44,-20, 
  /* [64][0][][] */ -52,-13,-8,-40,31,-37,46,94,-127,-33,-48,-53,-34,61,38,74, 
  /* [65][0][][] */ -44,14,-44,-36,44,38,-30,-99,-86,-65,25,-6,-127,115,-28,60, 
  /* [66][0][][] */ -4,55,-19,18,-45,127,-20,22,-55,22,-37,51,-19,34,53,-76, 
  /* [67][0][][] */ 0,-40,-28,-18,20,-81,34,-64,-11,38,10,91,-68,-40,-39,-127, 
  /* [68][0][][] */ 27,-127,-40,83,-4,-20,5,80,18,59,48,23,-53,16,15,11, 
  /* [69][0][][] */ -3,88,54,-100,10,-22,-35,101,-5,127,78,79,75,-73,52,-96, 
  /* [70][0][][] */ 32,38,34,-50,106,21,-74,-61,-127,-93,-5,34,-30,48,-107,3, 
  /* [71][0][][] */ -27,-59,23,-43,86,-8,33,33,-113,101,-117,-22,41,127,-47,26, 
  /* [72][0][][] */ 2,-6,51,6,-13,4,-77,-91,-6,64,-49,18,55,93,-127,-26, 
  /* [73][0][][] */ -22,-44,-26,-37,53,-91,40,-47,59,64,90,-32,38,-4,-87,127, 
  /* [74][0][][] */ -4,-9,-37,85,-66,8,69,37,61,47,30,92,127,7,-64,11, 
  /* [75][0][][] */ -45,52,-28,18,-31,127,-5,2,-40,31,-39,26,-15,38,8,-70, 
  /* [76][0][][] */ -50,111,-78,49,-104,12,19,-2,74,31,-23,-21,68,-24,-127,72, 
  /* [77][0][][] */ 100,87,-123,127,75,70,53,53,50,12,120,-40,69,44,64,23, 
  /* [78][0][][] */ 13,-53,2,-48,65,-101,21,-55,46,30,127,-19,7,-7,-46,121, 
  /* [79][0][][] */ -50,44,4,4,2,-41,-38,1,-127,-5,49,-4,83,28,-81,-32, 
  /* [80][0][][] */ -110,35,89,-26,73,41,-13,-127,-126,74,-68,-58,5,-96,47,115, 
  /* [81][0][][] */ 78,67,-8,-3,27,-47,59,114,-127,127,-65,-35,-45,19,109,117, 
  /* [82][0][][] */ 21,119,-59,-82,-15,-14,127,-99,6,6,-19,60,113,-5,37,-12, 
  /* [83][0][][] */ 0,-40,35,27,12,3,-48,-73,42,-6,97,24,23,-54,-41,-127, 
  /* [84][0][][] */ -127,-103,-48,-6,-4,93,68,13,72,60,103,74,65,73,-72,25, 
  /* [85][0][][] */ 99,-6,127,-48,64,-28,-51,102,39,79,-59,8,-25,60,110,12, 
  /* [86][0][][] */ -80,87,-15,-28,14,53,2,21,62,59,127,-3,-41,87,14,-5, 
  /* [87][0][][] */ 10,-81,16,-46,51,-127,38,-29,42,-28,77,-46,49,-50,-57,81, 
  /* [88][0][][] */ -78,13,59,10,127,-47,7,26,-75,-52,77,-61,72,108,96,-127, 
  /* [89][0][][] */ -35,48,-4,19,-44,127,-16,24,-34,21,-22,12,-19,55,35,-103, 
  /* [90][0][][] */ 36,-68,13,32,103,13,79,44,-39,-127,-95,-50,-22,-33,-75,61, 
  /* [91][0][][] */ -21,30,-18,-42,23,-54,-87,36,-87,10,-127,-111,-70,-107,-35,30, 
  /* [92][0][][] */ 80,38,79,32,-127,-124,-6,5,-28,48,-27,-34,-29,-90,16,-14, 
  /* [93][0][][] */ -16,-99,-83,49,-56,-82,7,127,54,29,1,42,-64,62,16,-8, 
  /* [94][0][][] */ 98,31,79,-3,-8,-15,26,16,37,57,20,62,25,24,127,13, 
  /* [95][0][][] */ -46,-53,-25,-44,127,11,18,35,-43,18,-68,-32,-3,10,-66,16, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant19_scale = { 96, { 0.0038416476454585791, 0.0015354979550465941, 0.0053156041540205479, 0.0045182271860539913, 0.0022890265099704266, 0.00094921869458630681, 0.0049820709973573685, 0.0024364343844354153, 0.0015449946513399482, 0.002882734639570117, 0.0011341148056089878, 0.0021100894082337618, 0.0034799240529537201, 0.0059079970233142376, 0.0020099629182368517, 0.0022019490133970976, 0.0032449490390717983, 0.0024154165294021368, 0.0030553045216947794, 0.0014463111292570829, 0.0040018553845584393, 0.0019046451197937131, 0.0027252454310655594, 0.0035848924890160561, 0.0014901494141668081, 0.0039108786731958389, 0.0036919494159519672, 0.0036820995155721903, 0.0025908835232257843, 0.00425367197021842, 0.0026134641375392675, 0.0023141228593885899, 0.0041238223202526569, 0.0012940258020535111, 0.0024146244395524263, 0.0019673255737870932, 0.0032628194894641638, 0.0036421208642423153, 0.0027926492039114237, 0.0031192300375550985, 0.00080067251110449433, 0.003859692020341754, 0.0031682422850281, 0.0032860871870070696, 0.0032750123646110296, 0.0016391820972785354, 0.0017265480710193515, 0.0018293162574991584, 0.0041058571077883244, 0.003204702865332365, 0.004332259763032198, 0.0021966181229799986, 0.0032884958200156689, 0.002332417294383049, 0.001959645189344883, 0.0054195155389606953, 0.0023784751538187265, 0.00095888285432010889, 0.0024495553225278854, 0.0030719281639903784, 0.0037736161611974239, 0.0010818098671734333, 0.0032887544948607683, 0.0042442763224244118, 0.00094572926172986627, 0.0012382360873743892, 0.0047171665355563164, 0.0030942875891923904, 0.0025681606493890285, 0.0019734057132154703, 0.0037876926362514496, 0.002189175458624959, 0.0028250759933143854, 0.0026649893261492252, 0.0037753970827907324, 0.0037654819898307323, 0.0032075399067252874, 0.0017901216633617878, 0.0034453042317181826, 0.0025047885719686747, 0.0024534214753657579, 0.0021159334573894739, 0.0024026804603636265, 0.0012807779712602496, 0.0028122265357524157, 0.0010681231506168842, 0.0027738548815250397, 0.0036987955681979656, 0.0035749559756368399, 0.0035246605984866619, 0.0038099621888250113, 0.001759264268912375, 0.0025582949165254831, 0.0030701258219778538, 0.0026245282497256994, 0.0023536586668342352, } };
const TfArray<96, int> quant19_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data20[16] = { -6583, 6868, -16279, -99, 11941, -14003, -34230, -7097, -6457, 1914, -14935, -11548, 6679, -10970, -4380, -2376, };
const TfArray<1, int> tensor_dimension20 = { 1, { 16 } };
const TfArray<16, float> quant20_scale = { 16, { 0.00014731069677509367, 0.000150608568219468, 0.00013153033796697855, 0.00015962049656081945, 9.1849353339057416e-05, 0.00015158244059421122, 8.938556129578501e-05, 0.00012541032629087567, 9.1718116891570389e-05, 8.4896855696570128e-05, 0.00016719907580409199, 0.00014458561781793833, 0.00012012743536615744, 9.3594688223674893e-05, 0.00018091904348693788, 0.00012547906953841448, } };
const TfArray<16, int> quant20_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data21[16*1*1*48] = { 
  /* [0][0][][] */ 32,26,8,-41,74,73,-41,52,-20,123,3,54,-35,22,-34,43,39,76,44,-53,-53,80,-5,56,75,49,39,48,-39,-49,-18,77,-26,18,-65,52,59,-127,-24,23,18,-21,66,-9,-3,-59,-52,-11, 
  /* [1][0][][] */ -45,3,-77,-36,14,90,-43,9,-16,-33,-29,40,64,-7,-20,-34,-18,-13,-5,3,-60,46,-92,-55,-47,-24,42,70,-26,-30,41,-29,13,-50,-46,54,15,-39,127,-43,-9,40,-42,-3,41,62,41,28, 
  /* [2][0][][] */ -10,6,56,-27,-32,-88,21,13,99,67,-56,11,104,-30,127,76,-83,-14,-37,30,59,-84,-40,-102,3,-38,32,-79,21,49,-28,9,25,-38,57,36,-76,16,-12,-43,26,13,55,-16,8,-90,88,-56, 
  /* [3][0][][] */ 39,7,-21,-31,39,108,8,-24,22,-40,17,-16,-48,-3,-3,32,-34,-66,41,-110,-10,7,-25,-4,-30,94,127,66,-13,-31,23,35,66,-21,96,38,-38,-49,8,55,19,18,-15,-3,18,14,-4,-13, 
  /* [4][0][][] */ 109,-7,25,-48,75,81,53,17,74,-31,-102,21,49,-7,38,-10,-102,-119,-31,-109,-5,24,-21,-41,-94,109,-107,127,-50,-64,27,90,38,-56,14,-25,-16,12,-32,-1,-44,-2,-1,60,-62,109,-24,-73, 
  /* [5][0][][] */ -9,-4,-44,13,-11,46,18,-15,53,43,40,80,44,-13,23,-2,-45,127,-11,28,-5,-6,-69,-14,27,6,-61,-25,-21,30,27,-14,-37,-7,38,18,-51,10,-77,8,85,-32,24,45,-14,8,-43,30, 
  /* [6][0][][] */ 45,24,3,74,-8,-40,92,-56,-6,57,127,94,37,54,-54,40,25,-33,-79,78,59,-73,-51,59,-94,63,69,-1,116,58,-19,-13,75,-64,-103,-16,81,41,11,-23,-2,65,43,-30,62,120,32,-18, 
  /* [7][0][][] */ -78,13,-32,15,-63,-48,11,68,82,119,-65,-83,-76,2,-15,-19,-80,83,-4,127,-56,52,40,20,-9,-107,-24,-76,20,28,-22,-1,-2,28,5,-11,18,-70,112,-2,-1,46,41,-21,42,58,-19,10, 
  /* [8][0][][] */ -25,-91,65,-52,68,-61,77,-38,-16,-125,20,-2,-49,6,38,41,-4,16,-33,90,5,41,-13,46,76,2,-51,-40,-127,-37,-55,-102,16,-70,21,88,-12,26,116,32,29,-16,75,124,-3,-61,-51,64, 
  /* [9][0][][] */ 41,-36,11,-67,53,95,-39,48,10,-36,-21,-11,27,-63,101,-16,21,-103,50,44,-51,47,69,-30,-17,-72,-22,87,82,66,-51,-21,-45,49,6,127,-15,-42,-42,-11,-22,20,45,119,51,92,-59,22, 
  /* [10][0][][] */ -23,18,-21,-2,16,22,-57,-41,59,36,70,-19,-45,-1,52,-42,-65,127,0,43,14,-21,17,38,-50,43,8,81,30,-4,-28,-4,59,9,6,19,-19,-50,-26,15,-88,-3,17,-18,22,46,28,21, 
  /* [11][0][][] */ -19,30,-8,40,38,46,3,-5,26,15,-127,-80,56,32,6,-37,-12,23,-52,-44,1,-5,102,14,37,8,-20,24,-5,20,-16,59,28,2,-35,-11,30,75,84,23,29,-26,50,0,-40,-18,80,-9, 
  /* [12][0][][] */ -59,-17,42,29,-65,-58,13,0,-24,-41,-121,6,53,-86,31,45,41,102,81,-127,-10,31,-33,-62,-4,-19,26,-34,17,6,-16,79,57,60,50,-37,-60,-36,26,-5,-23,15,56,7,44,-3,-47,-49, 
  /* [13][0][][] */ -43,-117,-61,-110,20,33,48,5,-121,37,108,-52,60,24,106,-3,127,14,-6,-81,92,-76,96,-3,-74,2,-24,21,-24,-77,-114,6,44,-26,-67,55,37,-53,81,-58,-27,71,65,31,47,-32,109,-56, 
  /* [14][0][][] */ 77,-4,-55,-5,-33,14,-77,-34,-26,63,47,44,-6,-71,20,-51,59,-116,23,18,93,-53,27,-7,-3,117,-91,2,-46,-27,-96,2,127,54,81,-24,-70,21,-36,59,-25,-34,101,-21,-47,-43,-47,63, 
  /* [15][0][][] */ -59,17,34,15,95,7,0,32,11,93,-15,79,70,-19,-54,-31,13,34,-7,-27,20,-38,-60,-80,56,-78,-40,69,-45,11,20,-4,-60,-1,127,-3,-91,17,62,-21,-56,-24,22,-14,-50,-45,-11,12, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant21_scale = { 16, { 0.0062607047148048878, 0.0064008641056716442, 0.0055900393053889275, 0.0067838709801435471, 0.0039035975933074951, 0.006442253477871418, 0.0037988864351063967, 0.0053299390710890293, 0.003898019902408123, 0.0036081161815673113, 0.0071059605106711388, 0.006144888699054718, 0.0051054158248007298, 0.0039777741767466068, 0.0076890592463314533, 0.0053328606300055981, } };
const TfArray<16, int> quant21_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data22[48] = { 13742, -156, 19443, -512, 16132, -2355, 39174, 160, 10308, 37637, -42, 23541, 783, 8072, 26637, 17272, -607, 1233, 5625, 37354, 0, 20789, 394, 18252, 16949, 36413, 625, -975, -1183, 17131, 21598, 318, 1037, 13, 1172, 15433, 7593, 28253, 3039, 22874, 25400, -1353, 815, 12863, -540, -853, 33273, 27552, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 8.8183493062388152e-05, 0.00013739005953539163, 6.7388289608061314e-05, 9.3914328317623585e-05, 9.0065223048441112e-05, 0.00011433651525294408, 5.0493083108449355e-05, 0.00024085408949758857, 0.0001120988599723205, 5.634110129904002e-05, 8.2873753854073584e-05, 0.00011680422176141292, 6.1732913309242576e-05, 0.00013376014248933643, 6.4748732256703079e-05, 0.00011688048107316718, 9.7128868219442666e-05, 5.4005096899345517e-05, 0.00012629595585167408, 5.5041400628397241e-05, 7.0413458161056042e-05, 7.2215989348478615e-05, 0.00012044313189107925, 0.00013563656830228865, 8.7736218119971454e-05, 6.7969005613122135e-05, 7.2061324317473918e-05, 5.5686472478555515e-05, 0.00033927569165825844, 8.3332168287597597e-05, 6.2485785747412592e-05, 0.00036028635804541409, 0.00010881484195124358, 0.00016848435916472226, 0.00010071896394947544, 8.700729813426733e-05, 0.00011460270616225898, 6.5934313170146197e-05, 9.0259229182265699e-05, 9.5421979494858533e-05, 5.9704292652895674e-05, 0.00019165681442245841, 0.00022071223065722734, 9.4238865131046623e-05, 0.00016702058201190084, 7.3228184191975743e-05, 5.5611584684811532e-05, 6.0767812101403251e-05, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ -83,82,-127,92,-127,54,-76,64,-100,-51,66,-64,66,-21,-15,-23,106,87,78,-102,55,-89,42,-56,-89,-60,45,119,-72,-73,-90,15,87,-94,33,-105,-63,-105,70,-3,-23,-87,71,-46,127,43,-54,-35, -109,127,-48,127,-112,76,-73,127,-127,-87,73,-72,91,-56,-40,-72,127,127,117,-127,75,-68,56,-127,-101,-121,75,127,13,-73,-96,127,79,-127,76,-85,-54,-80,83,-78,-82,127,69,-59,-33,127,-103,-127, -62,87,28,39,-4,42,-34,97,-55,-30,16,-35,91,-1,11,11,49,77,47,-47,45,-82,13,-30,-76,-42,38,43,73,-34,-70,-5,60,-71,31,-27,-31,-25,34,-50,-96,-16,7,-10,-70,49,-42,-121, 
  /* [0][1][][] */ -63,63,-110,107,-87,88,-112,121,-75,-72,87,-91,116,-86,-63,-69,84,117,-50,-66,120,-123,92,-60,-106,-109,70,63,-127,-74,-127,48,101,34,92,-127,-86,-127,74,-108,-127,-123,127,-83,109,52,-127,-65, -127,125,-120,125,-119,127,-127,41,-110,-127,127,-127,127,-127,-127,-127,117,125,-53,-66,127,-127,127,-97,-95,-127,127,97,22,-90,-116,43,127,36,127,-119,-127,-70,127,-111,-101,116,126,-127,-73,119,-106,-112, -67,106,-52,42,-20,38,-56,24,-73,-73,48,-89,91,-69,-38,1,56,41,-63,0,58,-95,39,-84,-127,-47,76,55,91,-74,-48,7,36,12,34,-32,-10,-24,65,-120,-61,-42,47,-77,-113,97,-56,-105, 
  /* [0][2][][] */ -36,55,8,60,-57,46,-91,8,-37,-53,24,-33,94,-77,-26,-47,52,39,-75,1,54,-74,39,-69,-79,-32,20,-10,-62,-111,-43,1,-2,57,38,-22,-31,-68,35,-104,-127,-21,27,-84,101,16,-12,-50, -93,46,-78,56,-102,42,-76,65,-40,-77,22,-40,52,-32,-67,-37,56,54,-127,4,52,-53,29,-76,-26,-29,14,5,15,-127,-65,34,15,78,62,-72,-61,-51,46,-127,-23,99,21,-89,-7,43,-17,-78, -41,54,-74,31,-29,31,-33,61,1,-3,6,-22,73,-32,-14,21,18,28,-89,8,26,-20,26,-40,-3,-13,7,1,37,-26,-39,-16,-4,43,33,-32,-6,-17,-3,-48,3,-13,-10,-9,-25,59,33,-100, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.0037477985024452209, 0.005839077290147543, 0.0028640022501349449, 0.0039913589134812355, 0.003827771870419383, 0.0048593017272651196, 0.0021459560375660658, 0.01023629866540432, 0.0047642015852034092, 0.0023944966960698366, 0.0035221343860030174, 0.0049641793593764305, 0.0026236486155539751, 0.0056848060339689255, 0.0027518211863934994, 0.0049674203619360924, 0.0041279769502580166, 0.0022952165454626083, 0.0053675780072808266, 0.0023392594885081053, 0.002992571797221899, 0.0030691793654114008, 0.0051188329234719276, 0.0057645542547106743, 0.0037287890445441008, 0.0028886825311928988, 0.0030626060906797647, 0.0023666750639677048, 0.01441921666264534, 0.0035416169557720423, 0.0026556458324193954, 0.015312169678509235, 0.0046246307902038097, 0.0071605853736400604, 0.0042805559933185577, 0.0036978102289140224, 0.0048706149682402611, 0.002802208298817277, 0.0038360171020030975, 0.0040554339066147804, 0.0025374323595315218, 0.0081454142928123474, 0.0093802697956562042, 0.0040051518008112907, 0.0070983744226396084, 0.0031121978536248207, 0.0023634922690689564, 0.0025826320052146912, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data24[48] = { 2074, -2112, 770, -2400, 4372, -1101, 6246, -4764, 1717, 660, 3097, 5963, 562, -947, 927, 8090, -2048, 6074, 8820, 1151, -633, 2832, -723, 7916, 3119, 2304, 1096, -1052, 12256, -107, 2576, -3948, -1159, 6312, -1903, 3941, 2835, 1277, 551, 5072, 2068, 7193, -4111, 2108, 7302, 311, 2738, 4744, };
const TfArray<1, int> tensor_dimension24 = { 1, { 48 } };
const TfArray<48, float> quant24_scale = { 48, { 0.00016558346396777779, 0.00020593749650288373, 0.00024187202507164329, 0.00017588937771506608, 0.00016096325998660177, 0.0001593160122865811, 0.00012389704352244735, 0.00010685685265343636, 0.00020516234508249909, 0.00022321841970551759, 0.00015326705761253834, 0.00012328919547144324, 0.00023482683172915131, 0.00022117278422228992, 0.00018338495283387601, 0.00010630225733621046, 0.0001945554104167968, 0.00012837193207815289, 0.00010575367923593149, 0.0001988034782698378, 0.00027116664568893611, 0.00020448517170734704, 0.00016245794540736824, 0.00010964988177875057, 0.00016493862494826317, 0.0001630186743568629, 0.0002145334001397714, 0.00021509919315576553, 7.6555093983188272e-05, 0.00023861219233367592, 0.00016565031546633691, 0.00010118654608959332, 0.00016663536371197551, 0.00013471330748870969, 0.00014795515744481236, 0.0001443765067961067, 0.00017169053899124265, 0.00021144775382708758, 0.00017865808331407607, 0.00014647100761067122, 0.0002225941134383902, 0.0001140214953920804, 0.00012079800944775343, 0.00020363819203339517, 0.00011304438521619886, 0.00018914554675575346, 0.00017937872326001525, 0.00014228516374714673, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ 63,16,127,-52,78,106,-62,-60, 
  /* [1][0][][] */ 1,-66,-127,18,41,29,20,5, 
  /* [2][0][][] */ -127,-9,-32,-30,40,22,-77,-42, 
  /* [3][0][][] */ 30,48,127,-70,-18,-94,5,-19, 
  /* [4][0][][] */ -127,12,-72,-38,42,25,-53,-62, 
  /* [5][0][][] */ -89,29,-30,-4,0,17,-85,-127, 
  /* [6][0][][] */ -27,-127,-110,31,83,23,-2,29, 
  /* [7][0][][] */ -69,-127,-102,-58,-78,-52,1,70, 
  /* [8][0][][] */ 92,19,-14,-18,82,-77,-127,-1, 
  /* [9][0][][] */ -35,63,-39,79,-70,-45,127,-41, 
  /* [10][0][][] */ -16,102,34,59,127,-17,-19,58, 
  /* [11][0][][] */ -79,-50,-40,-25,-91,124,127,-11, 
  /* [12][0][][] */ 60,39,-127,47,0,-23,-59,-4, 
  /* [13][0][][] */ 64,-15,-46,0,2,-127,-19,-32, 
  /* [14][0][][] */ 16,-81,83,30,123,-127,-96,29, 
  /* [15][0][][] */ -39,-45,-12,127,62,98,-83,44, 
  /* [16][0][][] */ 96,35,-37,21,52,-108,-127,-18, 
  /* [17][0][][] */ 56,127,66,66,47,62,36,-93, 
  /* [18][0][][] */ 27,-8,9,7,127,-8,20,-19, 
  /* [19][0][][] */ 16,127,28,4,-121,9,15,-20, 
  /* [20][0][][] */ -53,23,73,-127,14,16,-5,121, 
  /* [21][0][][] */ -41,68,22,-103,46,45,-10,127, 
  /* [22][0][][] */ -71,-73,-88,11,-127,111,97,-22, 
  /* [23][0][][] */ 95,48,-127,25,9,-54,-70,-16, 
  /* [24][0][][] */ -45,45,-16,4,-12,90,-127,121, 
  /* [25][0][][] */ -94,-60,-127,9,-49,-71,57,87, 
  /* [26][0][][] */ 40,-9,-25,-39,127,-7,124,-47, 
  /* [27][0][][] */ 127,-59,33,80,-2,35,-12,97, 
  /* [28][0][][] */ 42,54,47,-31,127,-43,69,-32, 
  /* [29][0][][] */ -9,-27,-38,-53,-78,29,127,-38, 
  /* [30][0][][] */ 46,-127,-51,-57,-85,9,3,-40, 
  /* [31][0][][] */ 20,21,-16,-18,-127,15,-31,-7, 
  /* [32][0][][] */ 50,-55,-60,92,-3,-84,125,-127, 
  /* [33][0][][] */ 58,127,21,47,34,5,-24,-7, 
  /* [34][0][][] */ -100,-45,127,-11,-20,96,116,-7, 
  /* [35][0][][] */ -16,92,127,-21,-90,-85,-41,16, 
  /* [36][0][][] */ -84,15,94,-5,-19,127,75,4, 
  /* [37][0][][] */ -17,-80,-17,-127,-25,-58,56,39, 
  /* [38][0][][] */ 50,-18,77,-63,60,67,-127,1, 
  /* [39][0][][] */ -7,80,-127,-36,-4,6,-3,78, 
  /* [40][0][][] */ 61,-43,19,17,11,8,2,127, 
  /* [41][0][][] */ -46,72,127,-24,18,53,-61,21, 
  /* [42][0][][] */ 71,-109,-87,-17,-127,1,0,-90, 
  /* [43][0][][] */ -13,-80,22,-46,127,-31,6,30, 
  /* [44][0][][] */ 5,127,88,24,21,61,-46,25, 
  /* [45][0][][] */ -50,57,7,99,-127,86,-125,35, 
  /* [46][0][][] */ -30,-40,47,34,-127,-108,-25,-17, 
  /* [47][0][][] */ -37,73,47,-113,-127,27,-39,87, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.0025304595474153757, 0.0031471529509872198, 0.0036963073071092367, 0.0026879552751779556, 0.0024598531890660524, 0.0024346797727048397, 0.0018934044055640697, 0.0016329948557540774, 0.0031353069934993982, 0.0034112413413822651, 0.0023422392550855875, 0.0018841151613742113, 0.003588641993701458, 0.003379979869350791, 0.0028025032952427864, 0.0016245194710791111, 0.0029732109978795052, 0.0019617900252342224, 0.001616136054508388, 0.0030381304677575827, 0.0041439901106059551, 0.0031249583698809147, 0.0024826950393617153, 0.0016756780678406358, 0.0025206049904227257, 0.0024912641383707523, 0.0032785162329673767, 0.0032871628645807505, 0.0011699210153892636, 0.0036464901641011238, 0.0025314812082797289, 0.001546340761706233, 0.0025465346407145262, 0.0020586992613971233, 0.0022610623855143785, 0.0022063730284571648, 0.0026237883139401674, 0.0032313612755388021, 0.0027302668895572424, 0.0022383814211934805, 0.0034017006400972605, 0.0017424854449927807, 0.0018460446735844016, 0.0031120148487389088, 0.0017275532009080052, 0.0028905370272696018, 0.0027412797790020704, 0.002174413064494729, } };
const TfArray<48, int> quant25_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data26[8] = { 3365, 602, 24887, -7037, 6492, -13147, 3422, -13440, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 7.606539293192327e-05, 0.00010596501670079306, 0.00015262202941812575, 8.8388609583489597e-05, 0.00013436136941891164, 0.00012955290731042624, 8.0183315731119365e-05, 0.00010390388342784718, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ -33,-37,-13,-83,15,-2,84,77,-96,-84,-45,19,-76,-18,-77,40,-93,25,6,123,59,-4,-2,105,74,73,13,-6,-98,-62,-103,-83,-58,124,22,-53,18,-20,81,-26,39,11,5,-127,41,-26,-24,-83, 
  /* [1][0][][] */ -21,58,-20,-33,-64,45,-33,-50,-31,68,-13,7,38,32,-51,-5,-23,-103,60,-53,127,21,-60,30,45,-1,-88,67,26,-4,60,18,-22,-13,-9,-4,3,106,-23,-43,71,38,-2,5,86,23,-16,40, 
  /* [2][0][][] */ -12,-32,110,-9,89,-37,-15,18,-38,-4,-6,33,0,-49,-45,-127,-58,-103,-36,13,-101,30,-45,-20,-43,10,-6,-43,-43,4,-29,-18,-6,-4,21,1,18,-28,-52,-4,36,-38,21,-52,-55,-43,-62,-43, 
  /* [3][0][][] */ 34,12,73,24,35,-40,19,78,-38,-36,30,-22,-54,36,-28,62,72,40,-48,30,-90,-49,127,1,20,1,-46,-22,-34,63,118,-52,11,-108,-37,47,-9,-63,-21,52,-60,-40,70,-16,-105,-56,62,-24, 
  /* [4][0][][] */ 25,-14,73,-33,5,-5,-4,2,-54,-14,-19,0,36,-78,37,-97,37,46,-6,-40,0,34,7,16,8,-8,52,-28,26,27,-127,-20,-32,-18,10,19,45,-14,31,-6,-38,-22,-68,25,-16,-102,5,29, 
  /* [5][0][][] */ 24,-50,52,24,24,17,28,-9,-82,-8,-35,39,25,4,13,-54,90,62,-2,-15,81,-70,127,-75,-12,54,11,56,1,19,-34,-52,-30,-41,-36,14,46,35,63,-3,-84,17,23,29,45,-24,69,2, 
  /* [6][0][][] */ -44,40,-120,93,54,16,22,16,-26,-13,50,-58,-98,-18,-21,24,-115,30,-22,91,24,33,-79,-100,-13,-24,43,78,-33,-44,-34,17,39,65,-63,-30,-15,-22,73,3,50,68,-102,-57,-53,127,-59,-44, 
  /* [7][0][][] */ 50,73,-84,11,8,79,127,73,28,69,-77,7,-39,7,-49,-44,26,19,114,100,60,-12,120,37,115,87,-60,84,-61,46,-1,-77,7,-64,-8,18,0,80,-48,79,-81,42,-19,-69,99,-30,47,-16, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.0032327792141586542, 0.0045035132206976414, 0.0064864363521337509, 0.0037565159145742655, 0.0057103578001260757, 0.0055059981532394886, 0.0034077907912433147, 0.0044159148819744587, } };
const TfArray<8, int> quant27_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data28[48] = { 968, 11058, -744, -1062, -523, -1253, 2235, -1701, -3958, 935, -5171, 6, -2147, -1149, -2056, 5537, 4483, 3526, 1507, -6003, -6209, -1566, 16246, -3934, -2965, -1055, 3313, -6322, 409, 1688, -8055, 10073, 5365, -680, 2623, -802, 266, 777, 10471, -2044, 4967, -2316, 3012, 4052, 821, 10026, -1607, -1926, };
const TfArray<1, int> tensor_dimension28 = { 1, { 48 } };
const TfArray<48, float> quant28_scale = { 48, { 0.00026879244251176715, 0.00014639012806583196, 0.00074589374708011746, 0.00021579400345217437, 0.00024824871798045933, 0.000308610760839656, 0.00026598159456625581, 0.00032267923234030604, 0.00011527550668688491, 0.00031609376310370862, 0.00022864116181153804, 0.0012273056199774146, 0.00043327559251338243, 0.00049872614908963442, 0.0003652924788184464, 0.00059476238675415516, 0.00024902372388169169, 7.2172195359598845e-05, 0.00024986182688735425, 0.00021249700512271374, 0.00025629313313402236, 0.00028878106968477368, 9.498847066424787e-05, 0.00044849573168903589, 0.00019933698058594018, 0.0004384252242743969, 0.00042124339961446822, 0.00019915656594093889, 0.00022559256467502564, 0.0004703256709035486, 0.00014240969903767109, 0.00013845248031429946, 0.00015619596524629742, 0.00020889451843686402, 0.00019400527526158839, 0.00035169534385204315, 0.0010608780430629849, 0.00037522416096180677, 0.00013089278945699334, 0.00015379651449620724, 0.00015344069106504321, 0.00013948694686405361, 0.00027687646797858179, 0.00024359277449548244, 0.00033440705738030374, 7.0799804234411567e-05, 6.0672060499200597e-05, 0.00016822658653836697, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ 1,-66,10,16,-11,-104,-44,39,-48,-20,-12,11,55,4,-16,-2,83,-1,-8,18,-12,-10,-74,17,10,-4,-1,-19,-71,65,-19,-72,27,-1,-55,-33,-14,-52,5,20,-4,48,-4,-3,-29,80,127,-30, -127,-111,-22,127,-56,83,-90,127,11,1,44,-6,55,31,2,-46,-19,36,2,19,15,127,6,127,127,-21,-56,40,70,-127,-14,-92,48,9,-28,-95,19,-3,-61,-49,-110,-14,-102,-90,24,77,56,127, -13,-21,13,21,-13,34,30,32,-9,-35,-4,-1,-7,8,1,0,-48,14,-67,-27,-7,-11,127,16,-45,13,5,14,12,28,2,2,-21,3,-9,60,2,-10,8,87,40,-28,14,-24,-24,48,-45,-9, 
  /* [0][1][][] */ -23,-11,-27,9,35,-112,127,-50,-19,-7,4,33,127,21,1,-37,-26,-43,20,65,44,-63,56,9,-51,127,-71,-22,127,-92,41,-127,-49,13,-67,36,3,-92,-37,39,127,127,9,-127,-85,-55,8,118, 88,-127,127,1,127,77,-60,-23,34,127,127,-127,-79,127,127,127,127,126,97,127,127,104,5,-2,123,-101,-127,85,27,104,127,-18,-127,127,127,127,-127,127,-127,-127,49,10,-127,-16,127,-127,11,115, 20,56,-37,1,-40,127,-109,111,96,-81,2,54,-28,18,12,-68,24,-11,-127,29,17,-102,-50,-11,69,-14,-14,127,-92,-48,38,-51,-39,20,92,-29,30,-20,-12,-90,117,-14,22,55,-72,105,127,-75, 
  /* [0][2][][] */ -15,39,6,-20,3,-59,-13,-29,-1,-14,-17,-2,0,-7,0,-8,-45,6,6,-19,-2,-4,102,-11,-78,4,69,-23,8,-3,1,4,-16,7,-55,47,-6,-38,23,58,-12,9,14,-10,-19,27,-33,19, 13,-13,-34,-30,32,47,112,-100,127,-39,-22,0,-52,-13,-24,-71,-15,127,-13,46,21,46,-13,-36,-49,57,119,-5,-119,2,-26,-35,-40,-4,-13,13,47,-43,4,125,-103,7,-6,47,36,81,0,-99, -20,42,5,-9,-5,-21,-13,-51,-15,-36,-23,-2,27,-5,-17,6,42,38,-42,4,-4,-2,-64,-16,34,-18,47,4,-29,-9,-4,9,15,0,-15,-49,-12,7,36,7,1,-7,10,27,-23,34,68,-36, 
};
const TfArray<4, int> tensor_dimension29 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant29_scale = { 48, { 0.011423679068684578, 0.0062215803191065788, 0.031700484454631805, 0.0091712446883320808, 0.010550570674240589, 0.013115957379341125, 0.011304217390716076, 0.013713867403566837, 0.0048992088995873928, 0.013433984480798244, 0.0097172493115067482, 0.052160486578941345, 0.018414212390780449, 0.021195860579609871, 0.015524930320680141, 0.025277400389313698, 0.01058350782841444, 0.0030673181172460318, 0.010619127191603184, 0.009031122550368309, 0.010892458260059357, 0.012273195199668407, 0.0040370100177824497, 0.019061068072915077, 0.0084718214347958565, 0.018633071333169937, 0.017902843654155731, 0.0084641538560390472, 0.0095876837149262428, 0.019988840445876122, 0.0060524120926856995, 0.0058842301368713379, 0.0066383285447955132, 0.0088780168443918228, 0.0082452241331338882, 0.014947052113711834, 0.045087315142154694, 0.015947027131915092, 0.0055629434064030647, 0.0065363515168428421, 0.0065212291665375233, 0.0059281950816512108, 0.011767249554395676, 0.010352692566812038, 0.014212299138307571, 0.0030089914798736572, 0.0025785625912249088, 0.0071496297605335712, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data30[48] = { 3018, 7933, 18510, 2139, 2457, -2413, 7586, 26898, 4443, -809, 6962, -2568, 21758, -2500, 3177, 26436, -1024, 4228, 304, 4869, 5118, 4811, 600, 39766, 7385, 3967, 20949, 1795, 7444, 7913, 564, 1450, 1395, 2334, -827, -68, -3565, -887, 3093, 3012, 5802, 3473, 4700, 6554, 5455, 4003, 2517, 9983, };
const TfArray<1, int> tensor_dimension30 = { 1, { 48 } };
const TfArray<48, float> quant30_scale = { 48, { 0.00019071996212005615, 0.00011266536603216082, 4.9591581046115607e-05, 0.00013647542800754309, 0.00017615695833228528, 0.00018638130859471858, 9.6707299235276878e-05, 3.7473673728527501e-05, 0.00010883749928325415, 0.00017832756566349417, 0.00012642356159631163, 0.00017318619939032942, 4.179622555966489e-05, 0.00018045499746222049, 0.00016323119052685797, 4.0728980820858851e-05, 0.00018374522915109992, 0.0001210277114296332, 0.00023236950801219791, 0.00012934922415297478, 0.00014644386828877032, 0.00014569278573617339, 0.00023746049555484205, 2.8838259822805412e-05, 0.00011149112833663821, 0.00012928020441904664, 4.988826549379155e-05, 0.0002042791893472895, 0.00010424429638078436, 0.00010255420056637377, 0.00037977658212184906, 0.00028606661362573504, 0.00017413961177226156, 0.00019090884597972035, 0.00017554833902977407, 0.00028824448236264288, 0.00013672369823325425, 0.00022185643319971859, 0.00017784739611670375, 0.00015797758533153683, 0.00013453449355438352, 0.00015305177657864988, 0.00016094114107545465, 0.0001230034395121038, 0.00013473667786456645, 0.00016933426377363503, 0.0002634174597915262, 8.9647641289047897e-05, } };
const TfArray<48, int> quant30_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ 49,127,-39,-70,28,55,3,75, 
  /* [1][0][][] */ 44,-87,30,-127,-62,80,-67,-37, 
  /* [2][0][][] */ -40,125,127,30,124,15,73,11, 
  /* [3][0][][] */ 122,46,-96,67,-21,-127,-119,-53, 
  /* [4][0][][] */ -15,21,7,-68,-16,127,120,56, 
  /* [5][0][][] */ 14,73,-127,-72,45,76,16,-32, 
  /* [6][0][][] */ -26,127,74,47,90,10,0,-90, 
  /* [7][0][][] */ 127,-59,-67,41,17,2,110,8, 
  /* [8][0][][] */ 65,119,53,81,127,87,68,-112, 
  /* [9][0][][] */ 25,104,-127,-78,-2,63,-8,95, 
  /* [10][0][][] */ -61,-51,31,-68,12,-45,-58,127, 
  /* [11][0][][] */ 8,-95,-127,-1,8,-4,49,-5, 
  /* [12][0][][] */ -17,-123,-127,-31,-120,2,-28,5, 
  /* [13][0][][] */ -5,5,-94,95,-127,-26,-10,-22, 
  /* [14][0][][] */ -73,-50,-127,6,25,-12,-18,-64, 
  /* [15][0][][] */ 12,-106,-127,17,-84,-9,-7,1, 
  /* [16][0][][] */ 127,-75,-24,67,-83,20,60,122, 
  /* [17][0][][] */ -26,127,125,-30,-63,-1,-42,-36, 
  /* [18][0][][] */ -15,-127,48,65,-6,-62,43,-60, 
  /* [19][0][][] */ 127,-42,-79,26,-108,21,44,107, 
  /* [20][0][][] */ -35,-127,72,71,-10,-81,-9,-60, 
  /* [21][0][][] */ -2,-70,-24,-47,127,16,45,1, 
  /* [22][0][][] */ -127,6,-94,40,56,59,-91,-126, 
  /* [23][0][][] */ -78,-29,72,12,-88,127,102,-47, 
  /* [24][0][][] */ -7,82,-5,-13,-24,116,127,-5, 
  /* [25][0][][] */ -35,-88,-127,-72,-31,-24,-8,-50, 
  /* [26][0][][] */ -2,88,5,127,-82,51,-49,-6, 
  /* [27][0][][] */ 11,-127,32,74,13,-71,-3,-116, 
  /* [28][0][][] */ 28,127,39,23,90,-25,7,-33, 
  /* [29][0][][] */ 96,35,-23,-13,55,-127,-119,25, 
  /* [30][0][][] */ 30,-14,22,-127,15,-35,27,-13, 
  /* [31][0][][] */ 39,-46,6,56,-9,41,26,127, 
  /* [32][0][][] */ -91,-46,6,-40,-52,127,57,97, 
  /* [33][0][][] */ -32,51,35,-31,20,125,-127,58, 
  /* [34][0][][] */ 20,127,-99,-70,-19,62,-70,55, 
  /* [35][0][][] */ 10,-127,16,33,-26,-44,42,-59, 
  /* [36][0][][] */ -28,-24,-108,-19,-127,-57,-17,31, 
  /* [37][0][][] */ -53,-127,46,64,-30,-88,-22,-43, 
  /* [38][0][][] */ -61,26,65,-68,-127,-100,-60,71, 
  /* [39][0][][] */ 60,-113,127,64,25,-86,-34,-71, 
  /* [40][0][][] */ 4,50,5,43,-127,-4,-59,13, 
  /* [41][0][][] */ 93,123,-93,-127,56,29,-26,22, 
  /* [42][0][][] */ -13,-40,-15,17,127,13,36,18, 
  /* [43][0][][] */ 127,45,86,27,-72,-7,51,108, 
  /* [44][0][][] */ 42,25,-39,-1,49,-97,-127,44, 
  /* [45][0][][] */ 43,10,14,15,70,-127,-21,-61, 
  /* [46][0][][] */ 64,-48,-15,127,36,63,28,74, 
  /* [47][0][][] */ -90,-84,28,47,-42,24,127,-84, 
};
const TfArray<4, int> tensor_dimension31 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant31_scale = { 48, { 0.0037244879640638828, 0.0022001934703439474, 0.00096845265943557024, 0.002665169769898057, 0.0034400932490825653, 0.0036397604271769524, 0.0018885552417486906, 0.0007318072603084147, 0.0021254406310617924, 0.0034824821632355452, 0.0024688714183866978, 0.003382078604772687, 0.00081622047582641244, 0.0035240279976278543, 0.0031876715365797281, 0.00079537875717505813, 0.0035882815718650818, 0.0023634980898350477, 0.0045378440991044044, 0.0025260052643716335, 0.0028598392382264137, 0.0028451716061681509, 0.0046372637152671814, 0.00056316994596272707, 0.0021772622130811214, 0.0025246574077755213, 0.00097424641717225313, 0.0039892802014946938, 0.0020357419271022081, 0.0020027367863804102, 0.007416493259370327, 0.0055864714086055756, 0.0034006976056843996, 0.0037281766999512911, 0.0034282079432159662, 0.0056290021166205406, 0.0026700182352215052, 0.0043325386941432953, 0.0034731051418930292, 0.0030850763432681561, 0.0026272661052644253, 0.0029888823628425598, 0.0031429501250386238, 0.0024020811542868614, 0.0026312146801501513, 0.0033068559132516384, 0.0051441662944853306, 0.0017506901640444994, } };
const TfArray<48, int> quant31_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data32[8] = { 7147, 13177, -4545, 5495, -1462, 4170, -12950, -17960, };
const TfArray<1, int> tensor_dimension32 = { 1, { 8 } };
const TfArray<8, float> quant32_scale = { 8, { 0.00022090633865445852, 0.00013086167746223509, 0.00014007788558956236, 0.00012043952301610261, 0.00017796056636143476, 0.00019449678075034171, 0.00020310113904997706, 0.00014178937999531627, } };
const TfArray<8, int> quant32_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ -40,-4,39,18,-29,-8,5,8,-41,0,-63,-52,-24,-49,-7,-27,43,-43,33,32,-18,24,-43,11,1,-35,49,-19,-4,-10,20,6,78,40,31,-127,23,-2,-19,-35,-4,-7,41,50,35,7,24,4, 
  /* [1][0][][] */ -8,28,54,-30,-14,45,-40,-15,10,31,-24,-84,15,85,-10,60,-23,14,-15,-57,11,-78,-26,22,-65,-10,-9,-116,-20,-11,38,-56,40,69,-34,5,127,-26,-5,40,-32,27,-71,-28,107,-13,-30,-24, 
  /* [2][0][][] */ -10,-31,-66,12,-9,46,26,11,0,45,1,29,60,-84,25,-52,39,-92,32,22,-19,46,-10,20,-13,71,-29,-69,15,12,25,-71,-49,-78,25,-28,101,21,-14,-69,3,23,86,31,127,26,26,18, 
  /* [3][0][][] */ -11,22,-70,33,22,-33,-62,-101,12,-13,-41,1,13,28,40,82,-7,7,-28,26,2,-98,27,-48,-77,-6,127,-23,-31,7,-61,18,-7,-79,14,-1,-13,-33,-14,88,-46,-26,8,24,45,11,-31,46, 
  /* [4][0][][] */ -29,-53,-9,14,30,-28,-16,-7,31,-29,68,-73,5,32,13,11,-16,-27,15,-20,-5,-54,2,-18,12,-3,40,49,37,19,-7,25,-14,-6,5,-2,-65,83,38,-25,34,-20,-13,-23,-72,10,127,4, 
  /* [5][0][][] */ 43,-13,-3,22,32,-51,42,-123,27,-27,-21,127,-87,51,33,-64,4,-84,14,0,-33,62,-51,-55,-51,90,-33,7,-29,41,-47,-28,19,46,23,-4,-51,-1,-40,-51,23,-48,-45,-2,-43,47,88,31, 
  /* [6][0][][] */ 47,-24,22,-16,-36,-21,-32,26,-42,11,-43,127,-37,-36,-5,59,16,45,26,32,36,-84,-24,16,24,49,-69,10,15,-43,15,35,1,16,-9,0,17,3,4,-9,-2,-22,46,62,7,-37,82,-12, 
  /* [7][0][][] */ -22,7,5,55,20,32,5,36,13,-7,68,-7,107,106,59,57,55,54,-13,-6,20,-14,-88,-31,21,5,-34,78,31,-21,-30,-11,38,12,30,-102,-78,36,30,45,-20,36,73,127,-64,-23,-99,63, 
};
const TfArray<4, int> tensor_dimension33 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant33_scale = { 8, { 0.0093885194510221481, 0.0055616209283471107, 0.0059533100575208664, 0.0051186797209084034, 0.0075633241795003414, 0.0082661127671599388, 0.0086317984387278557, 0.0060260486789047718, } };
const TfArray<8, int> quant33_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data34[48] = { 9793, 5796, 5087, -436, 1642, -3259, -213, 35904, -1260, 1872, 5361, 58025, 2016, 4616, -285, 11211, 620, 11515, -123, 6482, 9663, 35, 6764, -7419, 10705, 314, 1521, 11704, 133, -3825, -6466, 9940, 5796, 1659, 1290, 1769, -7755, 11375, -1436, 17500, 475, -1657, 6112, 548, -485, -2170, -268, -1652, };
const TfArray<1, int> tensor_dimension34 = { 1, { 48 } };
const TfArray<48, float> quant34_scale = { 48, { 7.492442091461271e-05, 0.00010204839054495096, 0.00017719094466883689, 0.00020336048328317702, 0.00054953020298853517, 0.00016326243348885328, 0.00011045728024328128, 8.9124194346368313e-05, 0.00013727264013141394, 9.1833317128475755e-05, 8.200543379643932e-05, 5.100444468553178e-05, 7.6451178756542504e-05, 7.0123525802046061e-05, 0.00024635001318529248, 0.00016185037384275347, 0.00013675614900421351, 0.00034315395168960094, 0.00012639754277188331, 0.00014540406118612736, 9.7122989245690405e-05, 0.00030892438371665776, 0.0001148280207416974, 0.00021696639305446297, 0.00011273752170382068, 0.00012931659875903279, 5.554400195251219e-05, 0.00010657446546247229, 0.00012094684643670917, 0.00082524953177198768, 0.00026846062974072993, 8.6297128291334957e-05, 0.00010815281711984426, 0.00017837822088040411, 0.0001494664466008544, 7.5739349995274097e-05, 8.9802393631543964e-05, 4.43395329057239e-05, 0.00010163219849346206, 7.4025752837769687e-05, 0.00014334956358652562, 0.00014629044744651765, 6.7438006226439029e-05, 9.6835945441853255e-05, 9.0864370577037334e-05, 0.0002782410301733762, 8.1468206190038472e-05, 0.00025520636700093746, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ -37,-83,-16,-23,127,-35,97,-38,-87,-74,-33,-47,125,21,82,-127,61,-8,15,-8,-101,119,9,-11,-9,72,100,-36,61,-52,-15,-60,-107,-53,36,66,35,75,118,-87,-127,-28,24,55,40,-121,79,83, -61,-120,-104,46,-116,113,82,-45,-91,27,57,-127,127,75,97,-52,-79,-64,45,-49,-87,77,-88,102,-85,87,106,-127,78,-38,-12,-107,-32,-73,70,114,127,127,120,-76,-124,-73,73,68,71,127,96,64, -8,-31,-58,74,-58,-5,58,-23,100,30,43,-78,28,45,-29,-17,-81,-21,32,-12,-53,53,-84,-17,-71,24,40,-79,23,65,89,-65,49,18,-23,41,94,65,37,-8,-21,115,57,1,53,50,13,-102, 
  /* [0][1][][] */ -83,-96,-15,-64,-114,-46,80,-127,-127,-127,73,-71,89,21,-116,-49,127,-127,-52,-58,-86,120,-28,-10,-11,116,127,-43,-102,-65,-9,-80,-123,-127,-127,73,50,79,28,-96,41,-23,60,125,69,119,113,-103, -127,-127,-127,-70,-38,127,127,-107,102,57,127,-111,108,127,65,-92,47,-77,-127,-127,-127,127,-124,127,-127,127,115,-111,-127,127,-37,-127,-127,-107,40,127,102,124,8,-127,102,-88,127,127,127,-4,127,127, -53,-64,-125,127,91,-40,72,-47,74,34,14,-61,19,71,95,-63,-27,-5,-21,-66,-52,15,-127,-36,-120,32,43,-60,-54,43,127,-87,-81,11,45,81,77,70,-7,-18,26,127,86,28,45,-35,-4,39, 
  /* [0][2][][] */ -112,-53,7,12,-50,-15,-5,-75,61,-48,25,-33,17,4,-56,-5,-83,-30,97,-9,1,82,-120,-24,12,77,58,-13,53,62,-24,9,23,-82,-53,58,22,17,-94,-23,21,3,21,48,29,62,21,-36, -64,-41,-18,-50,112,48,47,-73,104,14,-24,-57,11,48,-127,-78,35,-3,42,-56,-12,64,-58,66,-81,69,53,-42,71,16,-35,-35,-56,-21,-77,57,12,15,-127,-42,20,-22,93,77,50,-112,26,25, -43,-13,-74,-22,-18,13,46,-42,-86,20,2,-28,-9,18,35,-37,26,25,-9,-34,1,18,-6,-48,-50,-15,17,-29,40,-51,45,-17,-80,14,8,55,17,24,-95,-23,-8,59,16,25,22,7,-2,60, 
};
const TfArray<4, int> tensor_dimension35 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.0031842878088355064, 0.004337056539952755, 0.0075306147336959839, 0.0086428206413984299, 0.023355033248662949, 0.0069386535324156284, 0.0046944343484938145, 0.0037877783179283142, 0.0058340867981314659, 0.0039029158651828766, 0.0034852307289838791, 0.0021676889155060053, 0.0032491751480847597, 0.0029802497010678053, 0.010469875298440456, 0.0068786409683525562, 0.0058121359907090664, 0.014584043063223362, 0.0053718956187367439, 0.0061796726658940315, 0.0041277268901467323, 0.013129286468029022, 0.0048801908269524574, 0.0092210713773965836, 0.00479134451597929, 0.0054959552362561226, 0.0023606200702488422, 0.0045294146984815598, 0.0051402407698333263, 0.035073105245828629, 0.01140957698225975, 0.003667627926915884, 0.0045964946039021015, 0.0075810742564499378, 0.0063523235730826855, 0.0032189222984015942, 0.003816601587459445, 0.001884430181235075, 0.0043193683959543705, 0.0031460945028811693, 0.0060923565179109573, 0.006217343732714653, 0.0028661151882261038, 0.0041155274957418442, 0.0038617358077317476, 0.011825243011116982, 0.0034623986575752497, 0.010846270248293877, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data36[48] = { 1512, -777, -642, 1696, 20442, 2587, -549, 8181, 1924, 1813, 354, 5458, 1619, 541, -1319, 1008, 3420, 12472, 5675, -908, 1243, -2111, 163, 3573, -753, -1077, 2038, -84, 4476, 36767, 3832, -109, 803, -566, 3711, -67, 517, -601, 1730, 2221, 3179, 2701, -161, -599, 902, 3533, 2720, -306, };
const TfArray<1, int> tensor_dimension36 = { 1, { 48 } };
const TfArray<48, float> quant36_scale = { 48, { 0.00031128758564591408, 0.00023677592980675399, 0.00022164851543493569, 0.00021050884970463812, 4.728138810605742e-05, 0.0002448628656566143, 0.00037821024307049811, 0.00011858000652864575, 0.00020197623234707862, 0.00042000573012046516, 0.00019661420083139092, 0.00016467233945149928, 0.00015791879559401423, 0.00026795375742949545, 0.00021180664771236479, 0.00019312747463118285, 0.00019714322115760297, 6.9019886723253876e-05, 0.00013915853924117982, 0.00022850657114759088, 0.00026886019622907043, 0.00011855764023493975, 0.0002778081689029932, 0.00021908564667683095, 0.00024806239525787532, 0.00048506876919418573, 0.00024279343779198825, 0.00051355746109038591, 0.00016619668167550117, 2.8254102289793082e-05, 0.00020238019351381809, 0.00048868352314457297, 0.00026318678283132613, 0.00022993538004811853, 0.00020242751634214073, 0.00023057954967953265, 0.00024816044606268406, 0.00029951494070701301, 0.00025727314641699195, 0.00028268754249438643, 0.00018826007726602256, 0.00024500314611941576, 0.00024329025472979993, 0.00027799379313364625, 0.00029380538035184145, 0.00015419525152537972, 0.00015499642177019268, 0.00021315040066838264, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ -22,15,-3,-6,-94,-36,-127,17, 
  /* [1][0][][] */ 93,-75,-52,-57,127,-92,78,29, 
  /* [2][0][][] */ -98,104,-52,-127,39,-15,-31,48, 
  /* [3][0][][] */ 80,2,86,38,82,113,127,-13, 
  /* [4][0][][] */ -46,-120,87,25,-48,-127,4,-37, 
  /* [5][0][][] */ 127,-25,65,46,-76,-11,4,-15, 
  /* [6][0][][] */ 25,34,127,-32,39,-27,-34,23, 
  /* [7][0][][] */ 29,23,-127,-43,-34,110,86,-57, 
  /* [8][0][][] */ 27,108,-32,37,63,127,60,40, 
  /* [9][0][][] */ -35,127,-71,59,42,-98,19,77, 
  /* [10][0][][] */ 4,-127,-12,-29,-69,-126,-72,-94, 
  /* [11][0][][] */ -127,-95,112,55,-22,-83,125,55, 
  /* [12][0][][] */ -31,39,-127,70,24,-53,-78,101, 
  /* [13][0][][] */ 84,-127,86,72,-3,27,37,-53, 
  /* [14][0][][] */ -18,76,-13,-127,-34,-100,-39,-85, 
  /* [15][0][][] */ 49,122,42,-27,24,-56,88,-127, 
  /* [16][0][][] */ -66,-127,-28,95,-25,33,10,59, 
  /* [17][0][][] */ -8,-108,-127,79,-61,90,-55,91, 
  /* [18][0][][] */ -87,-88,-42,127,-10,90,4,114, 
  /* [19][0][][] */ 63,-117,99,-127,22,-75,34,-46, 
  /* [20][0][][] */ -6,70,26,8,30,127,55,10, 
  /* [21][0][][] */ 20,115,48,-39,38,-60,106,-127, 
  /* [22][0][][] */ 25,27,123,22,-2,127,35,-44, 
  /* [23][0][][] */ -74,-69,32,-43,76,83,-48,-127, 
  /* [24][0][][] */ -109,-91,31,-114,127,110,-66,-124, 
  /* [25][0][][] */ 127,8,-54,-18,23,33,-68,-7, 
  /* [26][0][][] */ -112,-15,-127,-31,-34,-20,22,3, 
  /* [27][0][][] */ 71,34,-3,-62,-127,-23,74,99, 
  /* [28][0][][] */ -127,-107,-21,66,-72,-112,7,35, 
  /* [29][0][][] */ 127,102,48,-120,41,10,-81,-93, 
  /* [30][0][][] */ -68,-62,48,-71,67,72,-49,-127, 
  /* [31][0][][] */ 51,46,-6,127,0,-78,1,18, 
  /* [32][0][][] */ -33,127,-12,27,34,53,-6,40, 
  /* [33][0][][] */ -41,127,-95,34,31,-33,-41,8, 
  /* [34][0][][] */ -127,-91,-52,66,-5,2,7,114, 
  /* [35][0][][] */ -50,127,-34,-7,79,105,60,66, 
  /* [36][0][][] */ 66,43,-7,-40,-127,-29,111,125, 
  /* [37][0][][] */ -57,113,35,22,-127,112,-29,-100, 
  /* [38][0][][] */ 26,24,22,-1,127,62,108,36, 
  /* [39][0][][] */ -15,-85,48,-17,6,46,-109,127, 
  /* [40][0][][] */ -56,-80,-105,127,-36,-24,12,57, 
  /* [41][0][][] */ 127,8,35,94,-49,-19,-4,-12, 
  /* [42][0][][] */ -42,-2,-65,-127,56,-119,-9,77, 
  /* [43][0][][] */ 25,-14,97,7,25,127,89,7, 
  /* [44][0][][] */ -24,-14,-59,127,45,10,-43,-27, 
  /* [45][0][][] */ 52,109,90,-112,47,-49,28,-127, 
  /* [46][0][][] */ -21,-127,-37,44,2,26,-70,121, 
  /* [47][0][][] */ 46,57,127,-9,72,100,123,4, 
};
const TfArray<4, int> tensor_dimension37 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant37_scale = { 48, { 0.004963199608027935, 0.0037751784548163414, 0.0035339854657649994, 0.0033563736360520124, 0.00075385905802249908, 0.0039041172713041306, 0.0060302210040390491, 0.0018906511832028627, 0.0032203285954892635, 0.0066966121084988117, 0.0031348359771072865, 0.0026255517732352018, 0.0025178724899888039, 0.0042722807265818119, 0.0033770657610148191, 0.0030792432371526957, 0.0031432707328349352, 0.0011004597181454301, 0.0022187572903931141, 0.0036433308850973845, 0.0042867329902946949, 0.001890294486656785, 0.0044294004328548908, 0.0034931227564811707, 0.0039551309309899807, 0.0077339834533631802, 0.0038711221423000097, 0.0081882104277610779, 0.0026498560328036547, 0.00045048614265397191, 0.0032267693895846605, 0.0077916178852319717, 0.0041962754912674427, 0.0036661119665950537, 0.0032275239937007427, 0.0036763828247785568, 0.0039566941559314728, 0.0047754952684044838, 0.0041019879281520844, 0.0045071975328028202, 0.0030016370583325624, 0.0039063538424670696, 0.0038790435064584017, 0.0044323601759970188, 0.0046844612807035446, 0.0024585041683167219, 0.0024712779559195042, 0.0033984906040132046, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data38[8] = { -7050, -2275, 12686, -9975, 24094, 7405, -9631, 10634, };
const TfArray<1, int> tensor_dimension38 = { 1, { 8 } };
const TfArray<8, float> quant38_scale = { 8, { 0.00017068332817871124, 0.00025044669746421278, 0.00016577975475229323, 0.00026654551038518548, 0.00017478640074841678, 0.00017172488151118159, 0.00016489060362800956, 0.00024492086959071457, } };
const TfArray<8, int> quant38_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data39[8*1*1*16] = { 
  /* [0][0][][] */ -11,-11,-19,-68,-18,-42,19,-21,34,3,-27,-13,112,127,-21,-95, 
  /* [1][0][][] */ 127,-50,-34,21,-39,63,-72,-45,-46,75,-31,-50,-13,-2,-61,-5, 
  /* [2][0][][] */ -37,-98,35,55,63,-68,-88,-15,30,-104,19,-127,52,-29,-95,33, 
  /* [3][0][][] */ 34,-1,16,13,-18,72,-52,-22,127,51,14,20,10,-13,15,19, 
  /* [4][0][][] */ -105,-46,-33,-127,-18,35,61,-115,31,-30,-52,-46,-118,30,-31,-29, 
  /* [5][0][][] */ 87,47,68,-39,37,-43,-127,-125,-6,-76,68,39,-52,54,65,-43, 
  /* [6][0][][] */ 122,50,-127,-64,39,-74,-14,-86,-55,32,-126,101,90,-96,-4,87, 
  /* [7][0][][] */ -127,2,102,-30,-59,6,5,-58,-43,63,84,-25,59,-23,30,29, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant39_scale = { 8, { 0.0072540412656962872, 0.010643984191119671, 0.0070456392131745815, 0.011328184045851231, 0.0074284221045672894, 0.0072983074933290482, 0.0070078503340482712, 0.010409137234091759, } };
const TfArray<8, int> quant39_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data40[16] = { 19413, -526, -525, 3608, -1454, 298, 9549, 935, -736, 186, -2031, 3726, 1095, -978, -371, -1215, };
const TfArray<1, int> tensor_dimension40 = { 1, { 16 } };
const TfArray<16, float> quant40_scale = { 16, { 0.00012084597983630374, 0.00020553998183459044, 0.00017006103007588536, 0.0001879930350696668, 0.0010990079026669264, 0.00090928946156054735, 0.00017116883827839047, 0.00081192766083404422, 0.00039502073195762932, 0.0014008346479386091, 0.00020830571884289384, 0.00018366816220805049, 0.00010403138730907813, 0.00022848378284834325, 0.00022694320068694651, 0.00047678552800789475, } };
const TfArray<16, int> quant40_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data41[1*3*3*16] = { 
  /* [0][0][][] */ -4,-11,8,0,-15,11,2,17,-4,-10,-5,-9,5,-5,-3,-3, 0,-8,12,-1,16,-2,6,-25,-15,10,-10,90,-9,22,1,-3, -5,-6,-7,-3,5,-14,-5,12,0,3,-4,-6,-8,-3,2,-3, 
  /* [0][1][][] */ 12,-22,0,2,127,-24,-127,-19,127,127,-8,-20,123,-22,-9,-22, -127,127,127,-5,-82,-92,-6,-99,14,-105,127,127,127,127,127,127, 21,-16,-7,5,-8,127,11,-9,-5,-12,0,-7,-1,-2,-10,-11, 
  /* [0][2][][] */ 4,-5,3,-13,-15,16,59,9,-5,-8,-5,-13,-12,2,0,-14, 27,-27,-3,-127,9,-16,-7,127,-7,1,3,-26,-21,-57,-8,-39, 5,-14,-2,6,2,-5,9,-1,-2,2,6,-2,-5,-4,-5,-14, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant41_scale = { 16, { 0.0051359538920223713, 0.0087354490533471107, 0.0072275935672223568, 0.0079897036775946617, 0.046707835048437119, 0.038644801825284958, 0.0072746751829981804, 0.034506924450397491, 0.016788380220532417, 0.059535469859838486, 0.0088529931381344795, 0.0078058969229459763, 0.0044213337823748589, 0.0097105605527758598, 0.0096450857818126678, 0.020263385027647018, } };
const TfArray<16, int> quant41_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data42[16] = { -991, -1091, 447, 2170, 70594, 57490, 8429, 14211, 5742, 2719, 1600, -627, 8546, -13953, 239, 36991, };
const TfArray<1, int> tensor_dimension42 = { 1, { 16 } };
const TfArray<16, float> quant42_scale = { 16, { 0.00016644439892843366, 0.00034940542536787689, 0.00018339694361202419, 0.00012463911843951792, 2.1493375243153423e-05, 2.7599964596447535e-05, 0.00010805536294355989, 2.1362548068282194e-05, 0.0001348416117252782, 3.7345238524721935e-05, 0.00026650982908904552, 0.00026757150772027671, 0.00020762311760336161, 1.4374603779288009e-05, 0.00030768002034164965, 3.4667165891733021e-05, } };
const TfArray<16, int> quant42_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data43[16*3*3*1] = { 
  /* [0][0][][] */ -81, -104, -26, 
  /* [0][1][][] */ 68, -33, 19, 
  /* [0][2][][] */ 34, 127, 21, 
  /* [1][0][][] */ 109, -94, -8, 
  /* [1][1][][] */ -127, 108, 26, 
  /* [1][2][][] */ 16, 0, -11, 
  /* [2][0][][] */ -24, -3, -48, 
  /* [2][1][][] */ 36, 95, 127, 
  /* [2][2][][] */ -12, -94, -79, 
  /* [3][0][][] */ 118, 124, 57, 
  /* [3][1][][] */ 1, -22, -15, 
  /* [3][2][][] */ -101, -127, -44, 
  /* [4][0][][] */ 17, -50, -7, 
  /* [4][1][][] */ 16, -127, -2, 
  /* [4][2][][] */ 12, -76, -13, 
  /* [5][0][][] */ -64, 28, -6, 
  /* [5][1][][] */ -127, 34, -7, 
  /* [5][2][][] */ -77, 28, -10, 
  /* [6][0][][] */ -21, 79, 127, 
  /* [6][1][][] */ -55, 55, -18, 
  /* [6][2][][] */ -39, -54, -92, 
  /* [7][0][][] */ 42, 26, -31, 
  /* [7][1][][] */ 127, 81, -17, 
  /* [7][2][][] */ 37, 8, -24, 
  /* [8][0][][] */ -20, -30, 53, 
  /* [8][1][][] */ -53, -86, 127, 
  /* [8][2][][] */ -26, -61, 96, 
  /* [9][0][][] */ -20, 51, -13, 
  /* [9][1][][] */ -17, 127, -14, 
  /* [9][2][][] */ -10, 79, -9, 
  /* [10][0][][] */ 25, 88, 12, 
  /* [10][1][][] */ -37, -127, -29, 
  /* [10][2][][] */ 12, 40, 18, 
  /* [11][0][][] */ 7, -19, 10, 
  /* [11][1][][] */ 65, -93, 35, 
  /* [11][2][][] */ -85, 127, -46, 
  /* [12][0][][] */ -41, 49, -10, 
  /* [12][1][][] */ -127, 114, 6, 
  /* [12][2][][] */ -78, 79, 5, 
  /* [13][0][][] */ 90, 25, -1, 
  /* [13][1][][] */ 122, 103, 4, 
  /* [13][2][][] */ 86, 127, 63, 
  /* [14][0][][] */ -30, -28, 47, 
  /* [14][1][][] */ 44, 98, -127, 
  /* [14][2][][] */ -16, -70, 80, 
  /* [15][0][][] */ -76, -23, 31, 
  /* [15][1][][] */ -125, -127, 32, 
  /* [15][2][][] */ -24, -75, -5, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 16,3,3,1 } };
const TfArray<16, float> quant43_scale = { 16, { 0.042443320155143738, 0.089098379015922546, 0.046766217797994614, 0.031782973557710648, 0.005480810534209013, 0.0070379907265305519, 0.027554115280508995, 0.0054474496282637119, 0.034384608268737793, 0.0095230350270867348, 0.067960001528263092, 0.068230733275413513, 0.052943892776966095, 0.003665523836389184, 0.078458398580551147, 0.0088401269167661667, } };
const TfArray<16, int> quant43_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.062719136476516724, } };
const TfArray<1, int> quant46_zero = { 1, { -16 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,48,48,48 } };
const TfArray<1, float> quant47_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant47_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,49,49,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant50_scale = { 1, { 0.051207028329372406, } };
const TfArray<1, int> quant50_zero = { 1, { -12 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant51_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant51_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant53_scale = { 1, { 0.053802438080310822, } };
const TfArray<1, int> quant53_zero = { 1, { 22 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.065436124801635742, } };
const TfArray<1, int> quant54_zero = { 1, { -22 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant55_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant55_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,25,25,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.039692681282758713, } };
const TfArray<1, int> quant58_zero = { 1, { -1 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant59_scale = { 1, { 0.021486431360244751, } };
const TfArray<1, int> quant59_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant60_scale = { 1, { 0.022847846150398254, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant61_scale = { 1, { 0.045935634523630142, } };
const TfArray<1, int> quant61_zero = { 1, { -16 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant62_scale = { 1, { 0.064678192138671875, } };
const TfArray<1, int> quant62_zero = { 1, { -25 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant63_scale = { 1, { 0.01934264600276947, } };
const TfArray<1, int> quant63_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant65_scale = { 1, { 0.037863045930862427, } };
const TfArray<1, int> quant65_zero = { 1, { -8 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant66_scale = { 1, { 0.0793427973985672, } };
const TfArray<1, int> quant66_zero = { 1, { -10 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant67_scale = { 1, { 0.021221861243247986, } };
const TfArray<1, int> quant67_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,12,12,32 } };
const TfArray<1, float> quant68_scale = { 1, { 0.045234136283397675, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,12,12,3 } };
const TfArray<1, float> quant69_scale = { 1, { 0.11107955873012543, } };
const TfArray<1, int> quant69_zero = { 1, { 2 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,12,12,3 } };
const TfArray<1, float> quant70_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant70_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 46,37,36 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfArray<2, int> inputs4 = { 2, { 47,1 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 48,35,34 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,33,32 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,31,30 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,29,28 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,27,26 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 50,53 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 54,25,24 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfArray<2, int> inputs12 = { 2, { 55,1 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 56,23,22 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,21,20 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,19,18 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,17,16 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,15,14 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 58,61 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 62,13,12 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,11,10 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,9,8 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 62,65 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 66,7,6 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,5,4 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,3,2 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 69 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 9216, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 12, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 96, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension12, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension13, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension14, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension15, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension16, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension17, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension18, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension19, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension20, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension21, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data23, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension24, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data27, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension28, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data29, (TfLiteIntArray*)&g0::tensor_dimension29, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data30, (TfLiteIntArray*)&g0::tensor_dimension30, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension31, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension32, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data34, (TfLiteIntArray*)&g0::tensor_dimension34, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data35, (TfLiteIntArray*)&g0::tensor_dimension35, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data36, (TfLiteIntArray*)&g0::tensor_dimension36, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension37, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension38, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant39))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data40, (TfLiteIntArray*)&g0::tensor_dimension40, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data41, (TfLiteIntArray*)&g0::tensor_dimension41, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension42, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant42))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant43))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension44, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension45, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant45))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension46, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant46))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension47, 110592, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant47))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension48, 115248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant48))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant49))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 55296), (TfLiteIntArray*)&g0::tensor_dimension50, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant50))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension51, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant51))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension52, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant52))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension53, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant53))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension54, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant54))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension55, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant55))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension56, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant56))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension57, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant57))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36912), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant58))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant59))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension60, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant60))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension61, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant61))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension62, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension63, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant63))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension64, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant64))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 16128), (TfLiteIntArray*)&g0::tensor_dimension65, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant65))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension66, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant66))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension67, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant67))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension68, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant68))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 432), (TfLiteIntArray*)&g0::tensor_dimension69, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant69))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension70, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant70))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 71, };
const size_t tflNodes_subgraph_index[] = {0, 27, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  70, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_2888_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 71;
  for (size_t i = 0; i < 71; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_2888_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_2888_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_2888_invoke() {
  for (size_t i = 0; i < 27; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_2888_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
