/*
 * Copyright (c) 2025 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://edgeimpulse.com/legal/terms-of-service) or Enterprise Terms of
 * Service (https://edgeimpulse.com/legal/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 13.03.2025 07:26:46

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#if defined(EI_MODEL_SECTION) && (defined(__GNUC__) || defined(__clang__))
#define MODEL_SECTION(X) __attribute__((section(STRINGIZE_VALUE_OF(X))))
#else
#define MODEL_SECTION(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 242656;
#else
constexpr int kTensorArenaSize = 241632;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,96,96,3 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(8) int32_t tensor_data2[3] = { 19370, -22835, -20650, };
const TfArray<1, int> tensor_dimension2 = { 1, { 3 } };
const TfArray<3, float> quant2_scale = { 3, { 0.00025687043671496212, 0.00024516449775546789, 0.0002736917813308537, } };
const TfArray<3, int> quant2_zero = { 3, { 0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data3[3*1*1*32] = { 
  /* [0][0][][] */ 87,25,127,-61,-107,1,-13,-11,-35,35,-8,20,-25,-95,104,-38,-57,70,91,125,3,1,66,-81,-95,101,-70,38,59,37,-10,4, 
  /* [1][0][][] */ 42,-45,-56,23,-26,120,1,-11,122,-56,-4,-101,-46,96,11,-42,89,-30,-17,-80,-127,7,92,70,-1,2,19,-26,-69,-43,-19,-10, 
  /* [2][0][][] */ -55,60,-59,47,68,-41,-13,94,81,6,112,-30,-72,-71,52,101,-81,-31,-33,-87,51,77,-63,-80,65,-63,-3,-127,4,-63,71,-7, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 3,1,1,32 } };
const TfArray<3, float> quant3_scale = { 3, { 0.0034445116762071848, 0.0032875407487154007, 0.0036700782366096973, } };
const TfArray<3, int> quant3_zero = { 3, { 0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data4[32] = { 44, -794, -816, -1519, -27, 240, -1296, 26, 166, 1243, 40, 1198, -1347, -614, -1620, -378, 295, -1229, 1204, -1129, -69, -824, -1337, 462, -1186, 973, -1083, 161, 1144, -385, -829, -1125, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 5.5060798331396654e-05, 4.8950456402963027e-05, 5.3987703722668812e-05, 5.5641725339228287e-05, 5.9510792198125273e-05, 5.4110434575704858e-05, 5.1861548854503781e-05, 5.9149959270143881e-05, 4.9266647693002596e-05, 5.8339861425338313e-05, 6.1332000768743455e-05, 7.207386806840077e-05, 5.2558556490112096e-05, 5.5274238548008725e-05, 5.7017063227249309e-05, 5.8731551689561456e-05, 4.9592326831771061e-05, 5.0555543566588312e-05, 6.0302896599750966e-05, 5.2120856707915664e-05, 5.7690504036145285e-05, 6.0398208006517962e-05, 5.2192073781043291e-05, 5.7960445701610297e-05, 4.949685899191536e-05, 6.9859794166404754e-05, 4.7623863792978227e-05, 6.8061133788432926e-05, 5.656452412949875e-05, 6.4823856519069523e-05, 5.1619528676383197e-05, 5.1096812967443839e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data5[32*1*1*96] = { 
  /* [0][0][][] */ -53,-52,76,5,62,-9,-65,-111,40,-112,-83,8,2,7,-30,44,-41,-23,-75,-77,-52,-78,2,87,-115,21,66,-45,88,-23,-19,-104,39,-71,-61,27,-87,-67,-111,24,60,-64,-80,76,24,-93,80,-19,-4,-60,-67,84,-72,-76,-84,68,-3,44,114,-86,-76,53,-40,34,-22,13,58,71,2,74,71,-84,87,-106,5,62,-93,10,-46,-11,41,7,71,-12,-47,-26,-68,80,25,92,-33,-127,5,62,9,16, 
  /* [1][0][][] */ -31,-4,-87,3,-4,64,22,24,30,-127,-97,64,121,-34,9,43,71,-80,57,81,-85,-20,7,11,35,-1,-66,61,-14,-31,37,-65,45,80,-4,-11,8,44,3,-58,-73,-17,-51,-99,-49,8,-36,-69,-35,-51,109,34,-1,58,-99,-76,-1,61,16,69,-67,82,-41,-82,-64,14,54,41,112,-14,-11,-6,-127,86,-65,14,66,-63,-51,29,-96,80,-96,-121,-1,105,-78,-71,27,36,103,45,81,59,50,-28, 
  /* [2][0][][] */ 19,86,-60,59,-39,-72,48,84,-81,127,-50,75,124,-32,46,-110,-68,-42,81,55,-96,-32,70,-6,-13,37,60,30,-72,87,56,83,-35,-25,-100,-27,-88,55,99,-43,-114,-82,19,-22,-71,84,-41,-75,75,81,112,-97,18,70,2,9,-61,85,-71,-19,-31,53,-55,59,54,17,18,51,-97,82,-15,-80,2,-39,22,9,-67,-40,-16,63,12,-96,-19,-44,-17,-102,-32,-46,52,70,-16,55,-58,-87,-48,-22, 
  /* [3][0][][] */ 22,-36,-6,-51,-87,9,-116,-6,6,-20,17,-14,47,39,23,-26,48,64,-81,-22,54,-101,-85,-122,-52,-83,-73,46,1,-103,32,-28,-78,-62,3,-47,-106,-51,-4,7,-49,-106,-109,-35,23,-13,-68,-100,18,-99,11,17,38,-11,52,-113,-126,-122,-124,-80,-107,-6,-25,29,10,-57,-81,-57,-58,-84,-33,45,-3,-117,8,-74,-10,41,41,-84,-99,-127,-6,36,-11,18,-68,-91,-100,18,-36,-109,38,-107,-83,3, 
  /* [4][0][][] */ 53,22,-13,48,12,12,31,12,21,9,2,11,-8,-22,-5,-42,-16,-7,-93,-14,57,-59,58,26,-9,15,52,-72,-52,-18,-74,-73,60,79,39,-127,-44,1,-84,47,-35,-40,-78,-76,9,66,28,28,12,-42,-61,-54,-127,5,-92,-13,17,-96,28,19,9,-79,2,-38,-41,39,8,-15,28,-108,-84,-47,-40,7,64,28,39,-17,-1,-90,-7,-22,-101,-18,-7,66,61,2,-103,-64,30,-8,33,88,-72,-52, 
  /* [5][0][][] */ 21,-95,57,53,13,-80,30,-16,85,-120,5,-36,-39,83,25,40,59,61,-92,35,46,50,19,-15,-127,-22,2,-78,44,7,20,-111,-67,-20,-39,-37,-84,-34,-9,25,-65,-29,39,78,-52,16,33,-48,-114,67,-14,43,14,-38,27,-22,56,36,-58,-29,30,-69,15,-62,-65,88,-14,6,-4,10,106,-43,-20,7,-50,-57,11,-33,17,28,93,22,38,96,-57,74,5,43,70,-73,35,22,-20,38,48,-56, 
  /* [6][0][][] */ -11,-31,67,37,-104,-81,-30,35,-36,-73,-22,-103,93,16,68,-127,5,-27,33,74,-92,-126,62,20,-75,-98,-36,-69,-47,-100,13,-85,-99,-123,-68,-56,-37,6,-107,39,44,17,-3,-39,-116,63,-100,-63,-94,39,-34,-82,80,-64,56,-43,-14,-29,-79,65,-106,-13,27,-81,-65,28,55,-66,43,-23,-115,-34,17,-76,-92,-61,-91,-112,-75,0,1,-52,14,-47,-86,-101,-61,-104,42,53,66,29,-72,-76,41,-31, 
  /* [7][0][][] */ 99,6,-34,-22,-23,92,-7,1,65,-59,-63,-11,15,-62,36,57,37,7,-57,55,27,31,-7,68,-53,88,36,13,-75,31,-38,-7,13,11,69,17,-85,64,-12,-9,67,-52,40,45,21,-13,80,-91,26,-56,-127,-47,-78,35,-4,0,64,-89,16,-37,4,-33,78,-76,-68,-41,54,28,-74,-13,46,70,61,6,20,34,-58,38,-69,-7,59,-21,-49,-57,58,38,-79,68,45,-6,57,15,-32,-27,-10,-92, 
  /* [8][0][][] */ 12,-11,-46,-74,87,37,-55,-54,-3,-17,49,104,-60,-33,-74,-51,-52,92,-98,-21,43,-12,73,103,-127,114,54,52,-58,-15,-81,64,58,-45,68,-64,104,1,-43,77,73,101,-93,-105,-36,-33,-12,84,-9,-94,-95,15,-82,-49,-30,-103,14,95,-65,98,105,10,61,96,-63,-33,-11,98,-102,52,51,14,79,27,-28,14,-42,96,81,7,36,72,-86,-66,27,52,74,-26,41,-31,-112,35,-64,-68,-49,62, 
  /* [9][0][][] */ 51,30,124,70,98,-59,-7,-32,56,88,17,65,31,-39,-28,-1,29,21,-44,25,8,97,-54,-42,123,-5,16,48,16,-31,-45,127,73,29,47,27,-27,59,10,-18,67,-33,50,-34,115,40,-54,73,82,8,-24,2,65,-12,9,119,97,-46,-13,20,-57,115,78,-36,-39,33,105,44,34,79,86,-57,23,104,-46,-39,-35,-62,-5,119,47,45,79,26,-8,-44,40,7,84,68,32,125,99,5,92,-28, 
  /* [10][0][][] */ -31,15,58,-39,16,83,83,19,9,-37,24,-66,38,59,-22,12,-25,53,-127,-71,-23,26,37,-44,19,53,-76,-106,-51,15,-87,-89,55,63,104,-3,-36,5,-28,35,-26,85,-98,-32,-83,-51,3,-51,-13,-14,-13,11,-12,-12,-57,-43,-90,-33,34,-27,-3,28,98,36,65,-53,-63,-5,19,-40,-66,-39,60,34,-80,67,-21,43,51,-24,48,4,10,70,-75,61,71,-17,13,-3,-11,-80,-30,-30,-38,-89, 
  /* [11][0][][] */ 121,61,35,102,88,34,51,81,85,99,-29,83,57,-29,66,-30,-15,-46,98,55,23,64,38,-37,-39,-61,6,77,70,-6,49,42,-25,-20,35,73,-13,84,8,-30,12,74,-29,44,25,8,-40,-22,87,67,79,44,-30,-4,67,50,-23,-34,-22,-35,-37,83,35,14,49,80,-9,19,127,43,-48,-32,29,92,-35,62,-29,43,-10,96,-48,-2,-34,-15,49,-29,20,4,-49,53,88,-31,-26,-3,6,-10, 
  /* [12][0][][] */ -18,66,-77,-31,34,-30,-61,4,-91,54,-43,-25,1,-21,8,-98,-114,-58,0,-62,-7,-41,-18,47,-93,-73,48,-113,44,33,-58,84,-89,-81,-73,40,-37,-90,-39,4,64,0,-116,-63,-43,-93,-61,66,-61,-101,-39,54,55,-5,-95,47,-36,-63,12,22,21,77,-35,32,97,-3,-70,68,26,66,1,28,37,69,-17,-37,-52,-4,-127,-56,-77,53,17,-13,-61,-6,13,66,-104,-116,55,73,52,-34,-2,61, 
  /* [13][0][][] */ 50,-76,64,40,32,18,50,4,61,-127,-10,-18,14,39,26,-48,-90,-41,-84,-39,72,-32,80,-56,-111,56,13,5,-69,-83,74,-3,-13,52,-24,-22,-67,-54,-17,37,-61,55,-33,-17,-74,4,-14,-47,-10,40,-57,-78,-94,-28,67,-67,-96,22,-56,-80,-36,75,-93,-13,-71,-61,-85,49,-71,1,91,-11,-64,-20,-94,-42,-83,40,50,-88,44,-111,95,12,-62,-102,69,86,7,-39,-109,-7,64,-21,18,-6, 
  /* [14][0][][] */ -75,-105,28,24,61,-60,-50,-109,-92,-64,22,37,-22,-102,-106,-98,-81,-85,-18,-12,-73,-14,-43,9,-113,-83,-65,-10,-117,-92,-91,0,39,-56,-61,-22,36,58,6,-115,-35,-114,2,31,21,-113,17,-97,47,9,50,7,41,-49,-41,-20,-76,6,12,36,-44,-100,-53,22,-104,-39,19,-110,-101,-86,-93,55,-2,33,-3,-95,15,-122,3,-8,-4,-44,-127,-43,-125,-106,-113,51,40,-30,30,-58,31,38,-46,30, 
  /* [15][0][][] */ 32,-64,-40,65,98,-48,47,-58,16,-62,-48,-20,121,-3,-69,-83,55,-20,-76,-1,2,13,42,79,68,51,17,36,-6,-4,17,-127,11,3,-23,-39,-76,82,81,-41,4,80,-65,-34,4,-78,-30,-71,-9,-56,-37,5,-91,-104,-61,-34,40,13,-13,85,-40,-70,27,81,-49,56,-52,13,-28,-24,21,-48,3,-17,34,-95,-21,33,75,23,-81,54,-122,-60,-107,-14,-76,8,30,5,-73,-46,49,73,-104,76, 
  /* [16][0][][] */ -94,-18,86,-84,7,109,-38,-15,55,22,-101,84,-74,-45,-49,-49,109,90,26,25,127,79,-23,53,-62,78,-39,55,-72,26,52,-19,-121,37,57,16,-16,32,-79,-70,31,-24,77,72,23,91,83,-23,-79,-109,-24,122,-48,60,61,38,0,84,47,3,113,88,2,49,23,26,-23,63,-7,102,2,-9,54,30,38,80,9,96,-94,-48,28,-96,77,14,25,79,91,29,95,28,-68,45,41,-5,-81,26, 
  /* [17][0][][] */ 2,-107,-1,41,-75,-124,-84,-110,10,-48,44,16,118,23,-126,14,0,19,115,73,-107,-39,-16,-73,-6,29,-94,-4,64,-60,-53,40,-48,-47,-2,39,-70,58,-102,-53,-109,-63,-40,-36,-20,-16,45,-121,47,118,-35,-5,15,44,58,-90,-127,49,-99,-124,0,-107,35,61,-37,-90,9,-115,-120,-29,65,-4,-15,-127,-82,29,72,-69,8,-30,-17,-43,-92,-105,-123,34,41,-55,-10,39,-110,-64,-39,54,-16,-13, 
  /* [18][0][][] */ -2,108,127,0,18,-73,-51,75,12,119,-60,-16,28,38,96,-29,32,-8,68,13,66,-13,39,-25,94,-86,8,114,47,28,20,96,62,4,-81,-13,7,70,13,47,1,6,-40,41,-19,32,25,43,69,-1,87,62,-68,62,69,93,10,8,-2,-61,46,126,-9,28,-29,-53,3,64,124,-70,-60,75,-58,10,-36,-38,49,62,17,-4,-24,22,-24,-55,98,-9,57,48,-75,8,16,112,76,-56,82,-29, 
  /* [19][0][][] */ -8,11,39,9,24,-93,56,52,55,-74,0,-32,-41,4,-69,26,37,-108,127,25,-41,42,-69,-13,41,-88,1,-76,-98,-113,-76,17,45,-90,3,39,-16,-80,-69,-105,13,-118,-89,-15,-93,1,39,-99,-45,14,-32,14,10,-8,-18,-31,-3,60,23,-45,22,-68,59,28,-81,-25,-45,-24,-30,26,38,-64,-74,-119,-69,-88,-42,-115,-11,113,25,-117,-47,41,-94,-29,-16,-26,50,1,-26,100,-50,70,35,-59, 
  /* [20][0][][] */ 35,89,71,125,-21,68,11,99,23,77,-58,-7,60,77,45,-55,-47,-43,4,19,-1,-35,-60,-52,86,-73,-85,59,22,35,-22,120,92,69,-26,86,23,-13,25,-55,-64,-30,-53,-60,13,-14,-60,96,68,-54,-45,12,66,127,42,9,106,60,108,96,89,-30,-27,-26,24,-37,-38,36,-20,-44,-76,66,-81,-7,21,25,81,52,80,112,63,28,57,9,45,83,-12,65,2,69,101,96,61,30,11,29, 
  /* [21][0][][] */ 37,9,14,-92,72,-79,35,-32,-32,-93,-69,20,-41,8,-57,-82,-93,-41,-26,-45,53,-53,30,-75,1,-71,-38,11,-21,-38,-45,-53,-36,-25,-70,-127,58,48,-127,-41,-25,-13,-19,-38,-110,-91,-77,27,-57,-91,-42,50,-18,9,-99,-22,-76,-2,-85,65,20,-97,-4,-50,14,2,-44,-85,-115,-41,23,29,6,-51,8,25,-108,-42,26,32,-16,52,-8,-82,-4,-83,17,-80,-102,27,35,-112,-49,-88,20,-59, 
  /* [22][0][][] */ -3,-76,-92,-110,51,-42,58,15,-107,41,-93,-109,94,-122,-126,-99,-1,40,-93,-69,42,-93,-5,-6,48,-35,-125,54,-78,-63,-86,-117,64,20,7,-21,-29,-44,-78,-125,-30,-41,-30,47,15,-127,45,-50,-76,-67,-13,-37,-74,-104,-72,-3,-26,-56,-46,-56,64,-95,-89,-119,-80,-15,-126,-62,69,54,-52,-32,-86,-22,22,-106,40,-74,22,48,57,-107,-94,-125,34,39,50,-53,-79,-5,-77,45,-11,-17,-52,50, 
  /* [23][0][][] */ 20,-78,4,33,52,-63,15,-127,59,-80,65,70,-44,-75,16,-24,78,-8,-112,57,95,-49,87,-15,-32,14,76,15,62,42,68,-38,-41,20,15,0,81,-2,-113,3,-61,6,18,-75,-53,-55,82,14,47,-106,-84,-17,47,-64,-42,74,-43,-7,58,31,-56,-76,-56,-26,13,44,-76,-88,3,3,104,-52,17,-38,-34,-62,49,-7,82,77,-25,-44,39,-55,83,5,86,9,-44,48,32,-46,73,-17,-22,65, 
  /* [24][0][][] */ -81,-73,-121,-78,-92,-113,-90,-108,30,75,46,9,75,24,-64,-127,-101,9,-7,-48,54,-100,-78,-62,25,-37,33,19,63,43,-26,-73,-16,-18,25,-4,-76,-99,38,-42,-90,-117,59,-26,-8,-59,17,33,-97,-66,-25,-9,31,30,34,-91,-33,40,17,-28,52,-36,19,53,-87,56,-70,-90,-108,15,-81,-53,-59,14,55,58,32,-95,-120,-93,-98,-105,-85,-123,-27,26,-42,-108,-7,-121,-22,-68,-42,-6,-103,-2, 
  /* [25][0][][] */ -7,30,8,55,54,-64,-54,97,64,-3,-8,-3,39,23,-34,-2,-37,40,31,-62,56,64,13,-22,24,-53,-57,56,78,-20,69,127,38,-46,3,114,76,-16,30,-8,-29,65,-59,71,97,71,50,81,-54,56,3,32,72,40,4,29,7,44,-28,61,63,58,7,8,13,96,4,11,-50,-14,-8,-71,41,-39,50,47,61,60,22,65,53,51,-40,66,-14,-29,-47,-37,-1,45,88,46,-44,-26,30,-28, 
  /* [26][0][][] */ 23,-114,-58,-39,-116,57,-29,-44,-97,-123,77,84,-104,-52,-25,-25,88,23,-96,-41,21,44,70,-8,25,67,-7,25,-3,63,-90,-19,38,-63,-94,-113,-78,60,-56,87,-107,85,62,-3,-89,54,-51,64,-19,13,18,65,5,-39,-43,-106,111,84,18,5,19,-127,61,-12,124,-38,-72,39,-106,94,73,84,57,-94,-38,-15,39,-115,-102,7,-37,58,107,-60,54,-18,-51,9,-68,77,-15,21,-62,125,23,96, 
  /* [27][0][][] */ 25,37,-18,-48,-54,-57,-45,-2,56,127,23,-70,14,52,64,-27,36,7,37,-40,-45,1,-13,-17,-61,5,-49,23,67,14,3,8,48,52,-60,10,-36,-34,-70,50,-53,25,23,18,86,21,47,107,76,65,79,-31,-55,-28,43,17,85,-22,-38,-56,-31,-22,-46,37,12,-23,-74,66,39,1,-89,14,55,-28,-2,-42,33,-41,59,121,65,5,82,-56,-29,-65,-34,9,-17,18,-15,10,40,-2,59,35, 
  /* [28][0][][] */ 118,19,100,73,-52,-47,-48,1,-6,-26,68,57,-5,-47,49,92,87,102,-62,127,-21,38,-59,-25,-40,59,-46,-32,-47,-64,16,39,-45,43,84,96,37,-34,4,34,111,46,-67,73,-24,17,36,68,70,-61,-30,9,-70,62,106,70,71,-13,62,59,-4,-2,-67,7,74,82,8,69,4,16,-78,-26,73,70,26,-49,-77,-26,-45,77,-40,-43,74,-22,67,-63,61,-49,-76,-7,20,-11,-21,32,-31,-60, 
  /* [29][0][][] */ 21,72,36,-46,-65,5,-89,12,66,30,-70,-72,127,-78,-40,-35,-72,59,72,-15,-63,-32,32,-8,11,-14,-41,1,-75,18,72,8,68,3,-69,13,-6,59,-1,48,24,62,-26,51,7,68,-46,-19,28,-2,59,-80,81,-51,65,26,-53,48,-31,64,-90,93,-80,-26,-34,-53,26,44,56,-47,13,-59,65,66,66,17,58,-44,-30,67,-13,-59,-20,-56,35,63,26,38,-37,54,49,93,-81,-5,-11,39, 
  /* [30][0][][] */ 0,-83,-77,3,-82,16,-81,-36,72,-23,-28,-37,-83,-5,18,7,-17,5,77,-110,22,-107,-110,-13,-104,1,-77,85,-16,-90,-89,-22,-72,-86,-103,-67,3,-43,-22,-3,46,-87,-39,57,56,-62,57,23,-76,62,6,-92,76,-65,-39,55,-72,-46,-68,-49,-104,-17,-68,-24,-91,-101,-99,59,-58,66,39,-31,-74,59,17,-89,-50,-70,-86,-72,-1,18,-89,-28,-113,-2,-95,71,-40,-127,48,33,-32,-9,-13,-73, 
  /* [31][0][][] */ 44,-27,9,61,89,29,-74,-108,-42,34,-91,-93,88,-126,-64,72,-75,-99,52,17,30,7,-49,66,83,-120,7,83,-84,-41,18,127,63,-5,-101,43,60,-50,-79,-118,27,-81,-50,4,-19,-69,-57,-2,64,48,82,-49,-51,-18,-92,-4,-123,89,10,73,-9,-21,49,-24,83,71,-61,-90,39,-80,-124,-13,-106,11,-20,-16,-73,-62,19,119,-88,4,24,37,24,58,-101,-9,-9,-68,-95,-21,-13,64,-28,-10, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant5_scale = { 32, { 0.0023400839418172836, 0.0020803944207727909, 0.0022944773081690073, 0.00236477330327034, 0.0025292085483670235, 0.0022996934130787849, 0.0022041157353669405, 0.0025138731580227613, 0.0020938324742019176, 0.0024794440250843763, 0.0026066098362207413, 0.0030631392728537321, 0.0022337385453283787, 0.0023491550236940384, 0.0024232252035290003, 0.0024960909504443407, 0.0021076737903058529, 0.0021486105397343636, 0.0025628730654716492, 0.0022151363082230091, 0.0024518463760614395, 0.0025669238530099392, 0.0022181631065905094, 0.0024633188731968403, 0.0021036164835095406, 0.002969041233882308, 0.0020240142475813627, 0.0028925980441272259, 0.0024039922282099724, 0.0027550139930099249, 0.0021938299760222435, 0.0021716144401580095, } };
const TfArray<32, int> quant5_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data6[96] = { -3352, 4871, 15226, 3108, -8382, -5204, 16608, 3853, 4197, -1326, 13121, -430, -10113, 2306, 15579, 8096, 18444, 6548, -5155, -3500, 5272, 22174, 27248, 21221, 1804, 785, 3448, 4779, 2094, -10571, 7434, -2161, -329, 5678, 217, 1892, 14798, 4724, -2696, 5921, 10076, 7321, 7131, 16729, 6892, 4737, 1939, 6548, 5012, -5111, -6778, -40, -209, -1561, 1949, 21, 334, -745, -5107, 13632, -1219, 1645, -1931, -2129, -4943, 10958, 29088, 2600, -3017, 668, 1439, 1968, 2106, -1251, 637, 15136, -557, 34055, 16584, -1197, 9809, 1556, -470, 1756, 20668, 8550, 3479, 1413, 7742, 5900, -258, -14378, 669, -2197, -2744, -2545, };
const TfArray<1, int> tensor_dimension6 = { 1, { 96 } };
const TfArray<96, float> quant6_scale = { 96, { 0.00021434489462990314, 0.00031757159740664065, 0.00015500835434067994, 0.00027352786855772138, 0.00014260339958127588, 0.00029127486050128937, 0.00019235556828789413, 0.00018666054529603571, 0.0001452047290513292, 0.00040786954923532903, 0.00015232592704705894, 0.00017600633145775646, 0.00024268767447210848, 0.0011910847388207912, 0.00019605367560870945, 0.00014932954218238592, 0.00010261144052492455, 0.00022357075067702681, 0.00036556905251927674, 0.0004974367911927402, 0.00011867629655171186, 0.00012360182881820947, 0.00011120316048618406, 7.6803189585916698e-05, 0.00016041313938330859, 0.00061971589457243681, 0.0008211976382881403, 0.00022791379888076335, 0.00025424102204851806, 0.00019518152112141252, 0.00019468623213469982, 0.00033715026802383363, 0.00019262160640209913, 0.00020647193014156073, 0.00025894911959767342, 0.00014520240074489266, 0.00012782582780346274, 0.00020743458298966289, 0.00019314679957460612, 0.00029680292936973274, 0.00012163269275333732, 0.0003521876351442188, 0.00022497496684081852, 0.00013958451745565981, 0.00029207515763118863, 0.00020991507335565984, 0.00027381110703572631, 0.00033654156140983105, 0.00027803622651845217, 0.00024540250888094306, 0.00022630408057011664, 0.00015548719966318458, 0.00043713822378776968, 0.00022672736668027937, 0.00040406093467026949, 0.00031333754304796457, 0.00037540393532253802, 0.00045338069321587682, 0.00030792856705375016, 0.00012688868446275592, 0.00062636157963424921, 0.00042820672388188541, 0.00013460773334372789, 0.00040332862408831716, 0.00037139366031624377, 0.00016670809418428689, 7.3619674367364496e-05, 0.00012554759450722486, 0.00038107804721221328, 0.00040850686491467059, 0.00024429577752016485, 0.00022192863980308175, 0.00060338975163176656, 0.000384072947781533, 0.00020216379198245704, 0.00014132715296000242, 0.00027768794097937644, 5.5304564739344642e-05, 0.00010968545393552631, 0.00018084676412399858, 0.00014875149645376951, 0.0002049650065600872, 0.00015479399007745087, 0.00012646168761420995, 9.3220296548679471e-05, 0.00027567092911340296, 0.00065154745243489742, 0.00015472236555069685, 8.7456945038866252e-05, 0.00034020311431959271, 0.00027125424821861088, 0.000145474768942222, 0.00025314174126833677, 0.00050559581723064184, 0.00024508079513907433, 0.00018197634199168533, } };
const TfArray<96, int> quant6_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data7[96*1*1*16] = { 
  /* [0][0][][] */ 17,84,-36,-118,-33,-11,66,-120,-27,63,35,127,64,-79,-4,22, 
  /* [1][0][][] */ -31,14,-29,3,7,-10,11,-99,88,92,-20,29,33,-7,21,-127, 
  /* [2][0][][] */ 53,-32,-55,82,53,79,-21,-126,89,13,-15,-6,20,127,-103,-17, 
  /* [3][0][][] */ 31,-108,-30,-64,44,-1,-32,-37,127,31,67,63,-6,80,48,73, 
  /* [4][0][][] */ -31,54,2,83,59,37,47,3,30,60,16,-38,-127,20,-51,-23, 
  /* [5][0][][] */ -51,75,126,-8,5,83,-67,80,-47,39,-5,17,0,-50,-127,47, 
  /* [6][0][][] */ 23,-23,127,-88,29,5,-51,68,-21,-92,33,2,-17,63,-10,55, 
  /* [7][0][][] */ 68,81,-53,-27,87,32,71,-72,127,117,-69,33,-2,28,82,18, 
  /* [8][0][][] */ 38,-70,27,-106,16,-68,34,-70,9,43,90,-16,22,127,54,75, 
  /* [9][0][][] */ 21,13,-8,127,15,-27,21,-67,-32,93,-10,-18,-21,-22,-16,13, 
  /* [10][0][][] */ 22,16,-62,-127,-31,10,46,28,-9,-40,-29,-59,4,-9,-18,49, 
  /* [11][0][][] */ 33,29,-23,-39,85,-54,100,-89,-99,40,14,15,9,127,-97,-37, 
  /* [12][0][][] */ 34,48,-67,24,19,-24,48,31,3,44,-67,-16,-68,127,-61,-5, 
  /* [13][0][][] */ 7,17,-11,20,9,-127,-3,5,7,-6,-5,0,2,-8,13,1, 
  /* [14][0][][] */ 44,-45,36,7,95,25,-127,-108,25,2,1,27,23,-22,26,-64, 
  /* [15][0][][] */ -127,9,22,-67,2,17,66,104,-53,19,98,-16,23,26,16,10, 
  /* [16][0][][] */ -22,91,127,42,-4,-7,45,92,-94,-17,-11,-38,16,-35,-36,-36, 
  /* [17][0][][] */ -18,-66,-4,12,-82,-28,-17,33,-127,-41,16,-57,-9,36,34,-17, 
  /* [18][0][][] */ -4,10,35,58,43,-3,-12,-14,77,44,-35,-38,13,127,14,20, 
  /* [19][0][][] */ 55,27,54,27,76,43,-35,-24,-127,-62,-2,-53,-18,-16,-51,-36, 
  /* [20][0][][] */ 127,6,-41,-42,-46,-34,80,89,-99,-17,-73,-60,-17,30,-43,31, 
  /* [21][0][][] */ 59,-66,33,51,19,73,4,47,-16,10,75,55,-2,127,21,-20, 
  /* [22][0][][] */ 12,60,-11,96,-69,0,127,75,-36,4,-25,29,-34,26,-17,20, 
  /* [23][0][][] */ 55,65,107,-72,18,5,6,68,-18,-21,-2,19,-67,-32,-127,29, 
  /* [24][0][][] */ -127,33,13,-32,-29,76,4,-2,-5,-7,106,-5,-74,18,90,-8, 
  /* [25][0][][] */ 15,31,29,5,-11,5,73,-27,-21,-127,-4,-10,-17,-22,-13,35, 
  /* [26][0][][] */ -29,-14,-6,28,-36,13,-37,-36,-70,-30,-23,1,3,127,-34,28, 
  /* [27][0][][] */ -15,32,22,64,77,-38,-31,-36,69,8,3,-1,3,127,-27,16, 
  /* [28][0][][] */ 3,47,48,73,127,-4,3,25,-54,3,-37,-55,20,50,58,-48, 
  /* [29][0][][] */ 50,7,39,62,72,33,57,18,2,29,-58,-127,3,25,-62,-49, 
  /* [30][0][][] */ -19,53,-61,83,-18,-2,42,-127,-17,71,-8,28,84,22,100,61, 
  /* [31][0][][] */ -73,-18,-17,-59,-30,-1,-78,-90,21,77,-31,-127,-70,-28,49,17, 
  /* [32][0][][] */ -127,-45,19,39,29,17,-10,24,-18,-55,-84,35,37,7,31,71, 
  /* [33][0][][] */ -33,-28,-11,-25,-89,-17,-88,11,37,-8,36,-48,24,-127,78,45, 
  /* [34][0][][] */ 17,7,50,11,23,12,-30,89,-89,-61,54,47,-14,-22,-45,127, 
  /* [35][0][][] */ -68,123,-90,74,1,8,58,-97,124,104,-74,23,-78,-38,33,-127, 
  /* [36][0][][] */ -16,93,16,67,42,5,127,24,-20,35,39,-50,-3,9,-79,-38, 
  /* [37][0][][] */ -24,8,45,-60,26,8,-84,-31,-26,-18,31,43,-19,-127,38,-26, 
  /* [38][0][][] */ 80,82,-17,-80,127,-47,58,-60,114,65,-65,-24,19,-8,64,40, 
  /* [39][0][][] */ -4,47,-40,-127,-42,8,-8,42,14,-87,-41,-31,25,76,17,50, 
  /* [40][0][][] */ -31,-15,41,-56,23,52,-49,-8,-72,-19,32,36,-33,-127,65,-58, 
  /* [41][0][][] */ -32,12,-30,-26,-22,-21,20,12,-42,-5,-24,-1,-127,-21,-2,43, 
  /* [42][0][][] */ 127,81,-65,-63,-102,-114,-39,-54,-25,11,85,-93,-38,50,86,-90, 
  /* [43][0][][] */ 12,65,-120,47,70,53,127,-54,-14,119,-103,30,30,-89,-74,-95, 
  /* [44][0][][] */ -62,27,-37,-79,62,-40,-127,-124,-52,-27,71,-17,-7,-61,96,-69, 
  /* [45][0][][] */ -8,2,-127,-4,15,-22,18,-63,21,37,-14,-14,11,6,74,-30, 
  /* [46][0][][] */ 32,5,-15,-86,-24,2,46,-22,-127,-29,-3,-12,-4,-96,48,-17, 
  /* [47][0][][] */ 21,28,25,-12,127,-11,-25,-6,-46,34,4,8,11,-2,68,-24, 
  /* [48][0][][] */ -127,-61,0,14,70,-16,-15,-9,18,-16,-73,55,38,5,87,34, 
  /* [49][0][][] */ -2,-75,127,81,126,-50,3,35,-90,-32,-26,-72,65,41,29,-46, 
  /* [50][0][][] */ 17,-8,-9,-24,30,-127,-44,9,8,8,-19,-6,57,1,22,16, 
  /* [51][0][][] */ 44,46,63,61,77,62,-3,-15,-127,107,18,-125,16,-126,-64,32, 
  /* [52][0][][] */ -42,15,24,35,43,-14,20,35,70,86,1,-71,49,127,64,45, 
  /* [53][0][][] */ 1,-38,-2,-22,-46,8,-84,-5,40,9,26,-53,30,-127,68,13, 
  /* [54][0][][] */ 36,-25,-68,23,127,19,-61,-54,-50,19,-15,-88,-8,-13,24,-49, 
  /* [55][0][][] */ 23,3,-20,4,50,-62,-75,-127,-16,-50,-45,15,4,-42,55,-17, 
  /* [56][0][][] */ -32,31,70,-32,-2,-39,-101,82,-22,127,0,-31,12,7,-31,20, 
  /* [57][0][][] */ 18,20,-23,-8,-42,-27,127,58,-26,22,-30,-2,7,34,70,-9, 
  /* [58][0][][] */ 15,-19,-81,29,47,127,-34,48,-92,-46,26,-7,-8,-11,14,-24, 
  /* [59][0][][] */ -127,75,122,36,-36,-38,93,102,46,14,52,16,-10,-7,58,-23, 
  /* [60][0][][] */ 30,10,-36,-19,5,-127,-1,-3,-21,-20,5,-34,24,3,-14,12, 
  /* [61][0][][] */ 27,-18,-1,127,80,28,41,3,-88,9,37,46,-9,34,48,-47, 
  /* [62][0][][] */ -101,127,86,-73,-59,11,-54,103,-54,-107,-73,-13,-66,-71,-108,-12, 
  /* [63][0][][] */ -36,71,-60,127,-70,16,-59,-53,-59,-12,-46,-38,3,74,44,27, 
  /* [64][0][][] */ 70,30,-19,71,-22,-44,-26,65,-7,35,-71,-93,-25,-127,95,-6, 
  /* [65][0][][] */ -22,-79,7,-97,127,19,5,-88,19,98,34,-92,23,9,-17,-98, 
  /* [66][0][][] */ -23,-22,100,41,43,50,-49,127,52,-22,77,75,-7,127,32,20, 
  /* [67][0][][] */ 19,28,-30,-127,-10,24,-70,-2,80,-90,-36,-19,65,112,104,39, 
  /* [68][0][][] */ -15,20,124,21,16,2,-9,-9,-49,-7,-18,-37,-3,-5,127,-35, 
  /* [69][0][][] */ 127,64,-38,-12,-82,-33,2,-42,-4,6,79,-49,-53,33,29,-91, 
  /* [70][0][][] */ 84,-5,-86,-24,-52,26,101,127,-74,94,-50,-28,24,80,-31,32, 
  /* [71][0][][] */ -6,-11,-1,33,36,-77,-30,-2,-10,34,-85,18,-127,-16,55,30, 
  /* [72][0][][] */ -24,54,-127,22,36,31,28,103,-26,-15,45,38,-13,-6,-31,-4, 
  /* [73][0][][] */ -51,19,67,15,65,-12,-70,-127,34,-74,53,6,14,-73,-3,-29, 
  /* [74][0][][] */ 24,80,41,127,35,1,-66,60,-66,30,-25,38,17,-116,16,-114, 
  /* [75][0][][] */ -21,58,-7,-5,22,-9,25,6,127,-2,5,9,-15,98,-76,14, 
  /* [76][0][][] */ -20,-8,11,32,29,-18,-36,58,41,3,-1,-127,1,-31,27,-17, 
  /* [77][0][][] */ 0,83,24,100,-78,-2,126,127,-22,11,-7,11,-40,-33,-53,16, 
  /* [78][0][][] */ 4,44,19,-127,6,-62,2,47,-18,-81,13,-5,-13,79,-13,83, 
  /* [79][0][][] */ 14,-95,-59,-61,-38,18,-10,-84,127,23,43,27,46,-5,-2,-60, 
  /* [80][0][][] */ 25,28,76,-90,-17,-36,64,-41,-88,-2,-35,-127,2,96,23,0, 
  /* [81][0][][] */ -72,72,-110,20,75,-127,-23,64,-4,-56,106,-8,24,-7,-25,5, 
  /* [82][0][][] */ 124,-36,-18,15,18,-127,-29,5,-14,-6,-75,-22,101,-14,0,26, 
  /* [83][0][][] */ -14,46,-122,-50,-40,10,54,-127,43,69,-52,-127,26,59,72,62, 
  /* [84][0][][] */ -63,5,57,-59,25,-57,46,-127,17,46,46,-63,85,12,34,4, 
  /* [85][0][][] */ -66,127,42,-105,-62,-23,6,13,-44,-20,-56,15,-24,-3,-96,-15, 
  /* [86][0][][] */ 17,-7,-40,10,-29,-3,127,-4,-17,-9,0,-6,28,44,50,-20, 
  /* [87][0][][] */ -1,-45,-21,-95,8,-26,64,-35,3,29,-33,-127,-20,21,33,-54, 
  /* [88][0][][] */ 108,59,54,-24,-30,-95,80,87,-104,-8,-127,-77,-26,57,16,26, 
  /* [89][0][][] */ -2,-5,-40,-11,48,20,-48,-36,-14,26,44,-23,127,-14,41,-56, 
  /* [90][0][][] */ 40,-89,47,-32,73,-15,-54,62,49,-57,-42,-59,-58,127,14,-99, 
  /* [91][0][][] */ -78,3,6,2,64,19,0,-127,44,106,-26,-84,-35,29,-40,-32, 
  /* [92][0][][] */ -12,0,29,26,21,-127,3,-14,13,-7,-12,-27,18,-20,23,-11, 
  /* [93][0][][] */ 11,-28,127,6,-18,45,-7,-11,7,34,-75,9,-6,-8,25,-15, 
  /* [94][0][][] */ 27,-12,-15,-6,26,-16,-44,-10,-39,-7,-6,-29,127,-5,38,-24, 
  /* [95][0][][] */ 127,70,-5,10,-87,-67,-59,-4,-25,-10,89,-51,-22,-22,126,-92, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant7_scale = { 96, { 0.00054609333164989948, 0.00080908730160444975, 0.00039491974166594446, 0.00069687567884102464, 0.00036331522278487682, 0.00074209028389304876, 0.00049007043708115816, 0.0004755610425490886, 0.00036994271795265377, 0.0010391422547399998, 0.00038808560930192471, 0.00044841694761998951, 0.00061830313643440604, 0.0030345646664500237, 0.00049949222011491656, 0.000380451645469293, 0.00026142643764615059, 0.0005695983418263495, 0.00093137193471193314, 0.0012673356104642153, 0.00030235538724809885, 0.00031490431865677238, 0.0002833158359862864, 0.00019567394338082522, 0.00040868966607376933, 0.0015788699965924025, 0.0020921914838254452, 0.00058066326892003417, 0.00064773799385875463, 0.00049727020086720586, 0.0004960083169862628, 0.00085896853124722838, 0.00049074820708483458, 0.00052603514632210135, 0.00065973296295851469, 0.00036993678077124059, 0.00032566592562943697, 0.0005284877261146903, 0.00049208628479391336, 0.00075617432594299316, 0.00030988748767413199, 0.00089727964950725436, 0.00057317590108141303, 0.00035562392440624535, 0.00074412924004718661, 0.00053480733186006546, 0.00069759727921336889, 0.00085741764632984996, 0.00070836173836141825, 0.00062521983636543155, 0.000576562131755054, 0.00039613971603102982, 0.0011137110413983464, 0.00057764054508879781, 0.0010294389212504029, 0.00079830002505332232, 0.00095642858650535345, 0.001155092497356236, 0.00078451941953971982, 0.00032327836379408836, 0.00159580132458359, 0.0010909559205174446, 0.00034294440411031246, 0.0010275732493028045, 0.00094621145399287343, 0.00042472753557376564, 0.00018756318604573607, 0.00031986160320229828, 0.00097088469192385674, 0.0010407660156488419, 0.00062240014085546136, 0.00056541466619819403, 0.0015372753841802478, 0.00097851490136235952, 0.00051505916053429246, 0.00036006371374242008, 0.00070747442077845335, 0.0001409012038493529, 0.00027944913017563522, 0.00046074908459559083, 0.00037897893344052136, 0.00052219588542357087, 0.00039437360828742385, 0.00032219049171544611, 0.00023750032414682209, 0.00070233561564236879, 0.0016599682858213782, 0.00039419109816662967, 0.00022281684505287558, 0.00086674635531380773, 0.00069108314346522093, 0.00037063070340082049, 0.00064493727404624224, 0.0012881226139143109, 0.0006244001560844481, 0.00046362692955881357, } };
const TfArray<96, int> quant7_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data8[16] = { -11766, 27093, -19546, -21219, -17803, 7068, 18321, -22149, -21940, -2873, 29713, 20619, -12607, -6, -6779, 32062, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const TfArray<16, float> quant8_scale = { 16, { 0.00051151309162378311, 0.00029210740467533469, 0.00018076825654134154, 0.00015309407899621874, 0.00033657398307695985, 0.00017507937445770949, 0.00024035036040004343, 0.00019034180149901658, 0.00024556816788390279, 0.00022402730246540159, 0.00048262061318382621, 0.00045867866720072925, 0.0001868933904916048, 0.00018320814706385136, 0.00033459969563409686, 0.00034728279570117593, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data9[16*1*1*96] = { 
  /* [0][0][][] */ -28,-14,28,-20,43,15,-30,37,54,-2,10,-12,0,-5,-11,5,1,17,-21,-25,0,-16,-11,6,-1,-6,-26,127,19,-20,28,-11,1,2,14,-8,-2,9,-65,8,-9,44,26,30,2,34,6,10,26,-3,-11,15,17,4,-14,66,-22,11,-15,-22,7,40,3,-12,-21,-43,2,24,-3,35,20,-27,-1,-33,2,-8,-44,19,8,15,7,-26,38,15,-15,-14,3,-67,10,-30,15,5,55,-28,-25,16, 
  /* [1][0][][] */ 14,-88,-59,-23,127,-51,92,54,-32,-60,-19,-40,-44,38,-94,63,-13,15,19,-33,22,76,-30,-24,56,-37,-76,-69,48,17,-21,46,25,55,-15,-28,-23,-27,-85,39,13,38,-51,-80,-13,71,-3,-24,45,-32,-8,-46,-2,69,84,-66,-63,-27,-5,-40,-21,-2,29,-25,-60,93,-19,-3,-11,14,-48,-7,20,-119,-4,56,1,-18,46,46,19,-9,-9,-5,-82,8,-15,47,52,-48,-21,35,-4,20,26,125, 
  /* [2][0][][] */ 24,60,-120,-40,29,89,19,9,-37,-90,-2,19,-7,-53,23,12,6,-11,-5,118,56,-32,115,8,45,55,46,-43,48,-8,68,-4,38,33,-27,74,-127,-46,83,34,20,-96,-18,-14,46,-80,14,41,-13,21,3,-21,65,-39,13,54,85,35,-5,67,-15,-24,13,-43,11,-34,-61,11,-39,-63,-14,4,-31,-32,29,59,101,49,7,-27,-2,-17,-5,16,-5,87,-1,25,-16,76,6,-51,-47,-16,-53,-23, 
  /* [3][0][][] */ 87,46,63,-50,54,19,-9,-48,-74,-25,-1,-41,45,41,39,40,-7,-30,50,58,104,-63,69,-8,65,26,48,1,4,20,24,72,-105,20,2,12,-25,-3,10,16,-78,-60,48,14,23,-5,-14,-61,-60,-21,-12,30,-31,-127,23,62,-83,39,6,56,15,44,-37,-61,61,48,-45,-77,54,-72,4,-13,83,10,50,-53,53,-24,38,2,-46,-46,24,14,25,-18,28,17,9,28,1,-11,7,56,50,-37, 
  /* [4][0][][] */ 25,-10,10,-11,90,68,3,-56,-57,-72,-19,-7,-13,-2,29,-2,25,-58,-7,127,-51,-36,12,-33,11,25,79,-14,21,-10,38,-40,49,12,-15,31,51,50,60,2,-8,-22,6,29,-29,-54,-33,-7,41,-10,-18,28,0,-52,23,-2,11,-12,-58,37,11,64,48,41,65,58,-9,-13,-6,-46,75,72,26,-42,-29,-46,78,55,67,-42,7,-15,31,-5,-25,12,73,47,-36,44,-18,-29,27,21,28,-23, 
  /* [5][0][][] */ -8,-15,-24,-20,-3,22,33,-70,-51,-69,14,25,37,-8,6,-8,-4,-31,40,20,43,-17,10,59,-13,17,48,-76,-8,31,27,40,-17,2,-35,-47,35,19,30,14,-3,-45,44,6,15,-17,11,-36,-12,2,28,4,-7,-73,-5,-16,5,15,-65,49,61,5,-7,46,26,74,14,59,25,59,-2,74,39,44,5,78,-28,1,-14,0,26,-12,34,6,22,50,-5,127,2,67,25,-58,-12,36,-58,28, 
  /* [6][0][][] */ 9,-61,43,-50,19,22,27,65,29,43,12,-93,-13,10,-64,50,31,13,-33,-79,-40,70,-2,29,-7,-34,-91,-8,-20,20,43,2,61,16,57,-34,9,-41,-55,-53,-10,87,6,-79,30,0,-21,20,-16,56,-38,59,0,-11,3,-23,-23,-53,18,-16,10,60,61,-69,23,-23,14,-9,-54,43,100,-19,-60,-10,-7,40,-127,-8,14,19,57,39,6,9,-45,-31,15,19,16,-18,39,-13,-25,-33,-37,20, 
  /* [7][0][][] */ 7,127,6,27,84,-3,19,-54,-27,-33,1,-30,-60,36,-36,41,-8,-33,42,21,76,-5,69,-14,-13,7,-22,-32,9,-30,-3,32,33,-21,-62,-30,-19,-14,-56,58,-46,4,-33,-25,16,-45,43,-16,-52,-47,32,-27,7,-61,-49,1,80,-9,-32,0,-42,-76,-15,-48,-81,37,-74,-70,-22,-9,-46,88,-31,-24,7,35,42,32,27,-31,-71,-54,-56,12,-36,42,-63,-35,-25,35,-51,-52,-79,-13,23,-38, 
  /* [8][0][][] */ 4,-5,53,-1,-127,17,65,-29,-35,51,79,44,-9,-25,52,-10,-13,-3,20,22,-58,-15,-117,102,24,-29,116,14,19,12,37,70,72,7,17,23,0,9,71,87,36,-47,81,64,-24,-23,16,-13,-72,49,9,46,-53,-26,2,27,-1,0,-69,5,60,-32,-24,13,21,93,0,-41,-4,-56,11,-19,54,68,98,-29,-15,-6,-1,32,-46,38,14,-11,64,69,112,66,27,-18,66,49,-7,34,33,12, 
  /* [9][0][][] */ 23,-87,15,-13,71,80,-9,-17,-8,-89,60,80,18,5,121,-88,-34,-24,2,67,-88,-64,-19,1,-5,9,29,48,-7,13,22,-12,10,32,-54,50,36,6,34,71,32,-38,28,68,-21,-4,-75,-32,49,58,-16,-35,14,23,9,-46,-43,68,1,26,35,-22,-20,127,-19,27,-1,-12,29,-20,-19,-58,65,4,22,-15,47,-24,51,-15,8,-2,47,2,41,-52,66,13,10,-30,-32,41,-16,20,7,-26, 
  /* [10][0][][] */ -76,-31,-65,-29,-59,-18,77,-25,45,-13,52,31,24,-40,10,-39,-10,42,-49,-33,-35,0,-31,22,-21,-8,57,-117,20,-36,59,-23,-17,1,-37,-12,1,27,35,18,-2,-24,51,-23,-17,25,28,26,-13,39,-24,-17,-41,-23,-30,-71,57,13,-28,-25,6,26,-37,15,-32,116,-9,-8,7,-66,-44,-43,-23,-8,-2,59,-24,58,-14,27,7,-11,19,-22,38,23,28,127,11,-13,34,26,57,-5,42,-49, 
  /* [11][0][][] */ -106,37,-38,-15,-45,-57,-28,-56,-87,-29,-23,18,38,-20,-17,-4,36,-4,-59,-46,25,-2,28,19,63,19,65,0,-16,7,-16,47,-20,34,-16,-4,-37,12,65,-4,-8,-47,-17,6,101,-27,67,20,32,55,6,28,-9,-83,15,6,-27,-4,-60,-34,-30,-32,-16,5,-10,-38,31,4,-1,-8,-9,64,-20,15,25,-8,-20,70,-111,46,-31,-20,-64,-58,127,39,42,-27,15,62,-7,-73,-52,37,-44,-24, 
  /* [12][0][][] */ -18,-24,-47,12,122,44,34,-38,21,3,46,23,-1,-4,50,-36,-12,-55,54,-6,-27,-41,-73,40,-23,73,-14,123,-12,59,-55,9,3,-12,38,69,3,-29,25,49,9,-14,26,34,-36,36,27,12,24,-19,36,-3,5,-18,-6,-39,-61,2,-9,29,15,9,23,81,91,-60,34,85,13,-127,23,87,-18,32,38,78,21,5,-39,35,29,41,-27,-25,22,-19,-31,-22,2,26,20,15,-19,57,16,40, 
  /* [13][0][][] */ -38,54,24,11,-23,4,-9,42,6,16,36,-7,72,24,-9,24,0,36,-60,-59,4,17,12,-22,44,1,-40,4,-11,-32,-35,-68,-70,-15,22,2,-7,11,-11,23,-11,81,34,-24,19,10,-4,34,39,-17,30,50,49,-4,67,-10,-49,64,55,-38,6,52,15,-8,-21,5,23,1,-5,53,46,-127,-6,-43,-47,-3,11,29,-27,-9,80,-15,-9,8,2,-38,57,18,-28,-31,9,39,22,-64,16,21, 
  /* [14][0][][] */ 5,38,-4,-24,41,8,6,20,-88,-29,-8,14,5,-43,-55,-36,-99,-23,66,14,14,-1,2,-67,-80,12,-45,-24,-10,-42,-26,-82,-96,-21,13,23,-18,25,-2,-23,5,57,-52,1,-58,13,11,32,124,6,16,-10,12,52,-127,24,-45,37,-87,8,7,17,-2,22,8,31,-13,-8,-68,30,98,29,51,-24,-62,-25,58,-90,-18,-123,20,-58,9,51,32,-84,-16,9,-63,-5,22,20,13,19,23,-34, 
  /* [15][0][][] */ -67,-70,-35,-3,-20,-35,-20,-56,-8,11,-12,-19,-11,-9,33,-3,-73,19,-17,-29,10,22,-51,-50,-6,-7,-35,4,-26,-21,49,-42,8,6,33,3,-23,28,-72,-10,18,-54,-29,-12,-20,-47,53,39,20,14,-9,-127,-15,32,-16,8,60,16,-19,29,-18,-13,29,-30,-33,-25,6,-3,-18,24,10,15,-54,12,-9,-11,-26,1,-12,26,-21,13,-41,50,-27,-27,-65,-43,-22,63,30,63,-65,10,27,-37, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant9_scale = { 16, { 0.021739305928349495, 0.012414564378559589, 0.0076826508156955242, 0.0065064979717135429, 0.014304393902420998, 0.007440873421728611, 0.010214890353381634, 0.0080895265564322472, 0.010436646640300751, 0.0095211602747440338, 0.020511375740170479, 0.019493842497467995, 0.0079429689794778824, 0.0077863461337983608, 0.014220487326383591, 0.014759519137442112, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data10[96] = { 14723, 57103, -1310, 997, 17302, -5312, 2087, -995, 4615, 16078, -5866, 2358, 43, 565, 5798, -10411, -4718, -391, 638, 15722, -11621, 24892, -3777, 9908, 25176, -837, -4068, 17655, 9512, -18743, 2354, 18029, 23412, -11511, 2541, -1640, -236, -1390, -867, -11298, -7061, -1646, -8371, 908, 28458, -1019, 11869, -2521, -15428, 774, 476, 2033, -3968, 14979, -4902, 19349, 39603, -285, 33677, -982, -8705, -9, 3466, -175, -1065, 12851, -3485, -8177, -4984, 5360, -497, -4043, -1756, -178, -4677, -6649, 309, -1968, 41274, -7792, -7047, -12864, -1141, 2029, 55963, -16303, -7362, -28416, -5815, 10024, -1927, 31952, 1292, -1586, -6019, 1546, };
const TfArray<1, int> tensor_dimension10 = { 1, { 96 } };
const TfArray<96, float> quant10_scale = { 96, { 0.00016249118198174983, 0.00010136481432709843, 0.00010213405039394274, 0.00018996601284015924, 0.00020108729950152338, 0.000148128776345402, 4.6746525185881183e-05, 9.8810174677055329e-05, 0.00021178867609705776, 0.00014780013589188457, 0.00023694685660302639, 0.00011701114272000268, 0.00024487855262123048, 0.00018566273502074182, 0.00035371631383895874, 0.00012617262837011367, 0.00019859529857058078, 0.00016208794841077179, 0.00016400917957071215, 7.5068070145789534e-05, 6.6717533627524972e-05, 4.5848515583202243e-05, 0.00014066380390431732, 7.8993245551828295e-05, 6.7303779360372573e-05, 0.00013458724424708635, 0.00016167259309440851, 0.00015666002582293004, 7.5967778684571385e-05, 0.00044572888873517513, 0.00034492535633035004, 0.00023974376381374896, 0.00011041550169466063, 0.00013282406143844128, 0.00023954831704031676, 0.0004199622489977628, 0.00046944615314714611, 0.00021710339933633804, 0.00023573593352921307, 5.2680825319839641e-05, 0.00022469508985523134, 0.00017024549015332013, 0.00046326816664077342, 9.5036702987272292e-05, 0.00035085354465991259, 9.4115122919902205e-05, 0.00013040169142186642, 0.00031487178057432175, 0.00066975713707506657, 9.6418269095011055e-05, 0.00039853813359513879, 0.00014099902182351798, 0.00015262338274624199, 0.00018928000645246357, 0.00017790660785976797, 0.00010321730223949999, 6.747604493284598e-05, 0.00040505884680896997, 5.0068592827301472e-05, 0.00017498352099210024, 0.00027447062893770635, 0.00036258320324122906, 0.00011191579687874764, 0.00016846394282765687, 0.00013791675155516714, 0.00012777541996911168, 0.0002384906547376886, 0.00027104996843263507, 0.00018973024270962924, 0.00010111914161825553, 0.00021438012481667101, 0.00010479221964487806, 0.00025385644403286278, 0.00015878689009696245, 0.0001409293181495741, 0.00027747612330131233, 0.00011515732330735773, 0.00010040572669822723, 6.151368870632723e-05, 0.00016341304581146687, 0.00016145606059581041, 0.00022550905123353004, 0.00018287495186086744, 0.00029459345387294888, 6.1928025388624519e-05, 9.3232010840438306e-05, 8.0802565207704902e-05, 0.00047206462477333844, 0.0002820161753334105, 0.00013501830107998103, 0.00031556488829664886, 3.4517823223723099e-05, 0.00016023842908907682, 8.8510809291619807e-05, 0.00024627280072309077, 0.00024353420303668827, } };
const TfArray<96, int> quant10_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data11[1*3*3*96] = { 
  /* [0][0][][] */ -43,-68,-6,127,19,62,69,-54,-14,-16,-9,-11,-31,5,35,3,-12,-37,25,28,23,-127,127,8,-72,10,53,-29,-123,-127,41,31,7,35,54,-18,-27,-9,39,-28,-15,29,-103,64,30,-65,39,49,-17,52,-27,20,2,-4,18,46,-97,-45,-58,-18,-11,-3,5,43,68,-25,79,14,-7,19,19,127,30,26,23,-4,-9,14,127,-10,-12,19,-18,16,127,23,-77,-16,-5,-28,-18,-39,1,-24,-15,28, 127,-127,75,110,-44,127,28,-111,73,6,-12,127,127,-100,-14,9,7,127,127,-100,127,-74,82,62,-119,-112,-66,-35,-54,44,-56,-13,-90,59,-127,-78,-40,-16,-44,40,-1,127,127,72,-54,-115,-108,-50,-14,-127,37,82,63,-30,45,78,-51,44,-87,-111,-44,-44,-65,68,72,-61,25,33,-80,40,-18,92,124,127,14,18,2,55,-29,57,66,127,127,-25,-7,80,-108,127,-126,-100,-1,-127,-90,-127,-35,110, -70,-13,31,-88,14,-26,62,-4,85,-33,-25,20,-16,-7,-10,-13,-7,-13,6,-1,-18,-110,32,-6,-108,100,8,-54,127,48,-16,14,-1,10,13,-26,-3,30,24,-2,27,15,-106,57,21,-19,39,13,-14,10,-20,5,-9,2,-1,18,-72,5,-37,53,-1,39,27,0,-6,-36,-28,25,4,6,-3,38,14,-21,-12,-5,-6,-10,-81,-2,-20,-21,-10,-1,-111,4,-32,-22,-55,24,-31,-36,26,-29,-11,-1, 
  /* [0][1][][] */ -63,-76,75,-40,-48,87,25,127,-53,-21,-1,-127,23,-109,77,34,1,-61,-19,88,58,-77,46,46,-104,-13,127,-21,-20,64,117,-102,-127,102,-88,-54,-33,33,-20,89,-46,-24,-6,40,-49,127,-22,69,16,100,15,-2,11,-56,37,28,127,124,-68,-85,127,-33,-31,127,72,-36,-11,-1,127,44,127,91,-36,97,-2,13,12,14,-27,8,-41,117,-71,104,3,36,-57,30,77,-127,-39,1,127,-66,-19,1, 65,120,56,-118,127,75,92,37,-127,127,127,-39,-60,-127,-127,127,127,-66,-126,-45,107,96,-113,127,-127,-90,-48,127,-119,106,-127,-127,-82,127,102,127,127,-127,-102,127,-63,-93,118,-127,-127,-39,-127,-127,127,-109,77,40,127,127,127,-127,104,-127,-127,127,15,-81,-127,-101,-127,127,-127,127,-120,-127,-105,-82,-127,-76,127,127,-127,127,-73,127,127,28,-35,-127,61,127,91,46,127,10,127,10,-69,35,127,-127, -50,-15,-49,36,-56,-108,32,-22,21,-33,-25,94,2,98,13,22,-1,62,-9,126,8,-90,-35,6,-77,97,-75,-19,-49,-17,13,-56,-58,44,5,-15,-28,47,-58,40,127,-1,-33,31,-41,-62,18,46,7,111,-16,3,-40,-73,7,15,98,1,7,21,-41,127,90,-52,-45,16,41,-14,-75,127,-16,-82,4,-50,-22,-32,27,13,80,-40,-68,-43,57,11,-47,-16,71,23,13,58,-40,25,-47,98,-23,-7, 
  /* [0][2][][] */ -62,-3,-3,-24,14,-54,59,29,56,-29,-37,-7,19,26,-29,-5,-7,63,5,-5,-42,-116,4,-12,-27,-50,28,-67,94,38,22,26,13,-8,-9,-45,-3,41,4,16,-11,-3,-65,96,6,33,10,38,-14,-23,7,-18,23,-4,9,12,-74,24,-5,16,12,-1,-28,-4,5,-42,-33,17,-30,17,28,24,17,-19,50,0,18,1,-71,-12,-6,-8,18,11,-125,14,14,-43,-58,-46,-33,-46,11,60,-14,-9, 119,29,-127,-40,-71,-42,32,33,-64,-29,-20,-109,-74,120,-16,34,0,-48,-11,-127,96,-58,-35,-2,-108,127,-55,22,-29,-22,-13,-7,-65,13,31,4,-22,-24,127,69,19,-12,70,-37,-39,77,-63,-47,-31,3,-127,-127,-58,-28,0,35,-68,-8,20,42,-14,-21,3,-44,-52,37,63,-21,115,114,-22,-70,17,-55,22,-4,97,0,50,27,14,-89,-45,-1,3,18,127,40,-61,34,-22,-93,41,76,-5,26, -50,12,-17,22,14,-75,-127,7,-11,-9,-17,6,17,-23,17,0,-7,-15,2,12,-43,-79,16,-2,28,-94,13,5,-36,-40,-10,21,50,-25,-4,-26,-37,8,47,-27,23,0,-41,-28,4,64,25,14,-8,-3,5,-9,21,4,-1,-9,-67,-16,2,-33,-14,7,80,-8,34,3,3,28,5,7,-3,18,-14,16,5,9,37,-4,76,-11,5,-8,-3,-20,72,1,46,-38,63,37,-20,-50,-9,8,-9,-17, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant11_scale = { 96, { 0.0069058751687407494, 0.0043080043978989124, 0.0043406970798969269, 0.0080735553056001663, 0.0085462098941206932, 0.0062954728491604328, 0.0019867273513227701, 0.0041994322091341019, 0.0090010184794664383, 0.0062815058045089245, 0.010070241056382656, 0.0049729733727872372, 0.010407338850200176, 0.0078906659036874771, 0.015032943338155746, 0.0053623365238308907, 0.008440299890935421, 0.0068887374363839626, 0.0069703897461295128, 0.0031903928611427546, 0.0028354951646178961, 0.0019485618686303496, 0.0059782112948596478, 0.0033572129905223846, 0.0028604106046259403, 0.0057199578732252121, 0.0068710851483047009, 0.0066580511629581451, 0.0032286306377500296, 0.018943477421998978, 0.014659327454864979, 0.010189109481871128, 0.0046926587820053101, 0.0056450222618877888, 0.010180803015828133, 0.017848394811153412, 0.019951460883021355, 0.0092268940061330795, 0.010018777102231979, 0.0022389350924640894, 0.0095495413988828659, 0.0072354334406554699, 0.019688896834850311, 0.0040390598587691784, 0.01491127535700798, 0.0039998926222324371, 0.0055420715361833572, 0.013382050208747387, 0.028464676812291145, 0.0040977764874696732, 0.016937870532274246, 0.005992458201944828, 0.0064864936284720898, 0.0080444002524018288, 0.0075610307976603508, 0.0043867351487278938, 0.0028677317313849926, 0.017215000465512276, 0.0021279151551425457, 0.0074367993511259556, 0.011665001511573792, 0.015409785322844982, 0.0047564213164150715, 0.0071597173810005188, 0.005861461628228426, 0.005430455319583416, 0.010135852731764317, 0.01151962298899889, 0.0080635352060198784, 0.0042975633405148983, 0.0091111548244953156, 0.0044536693021655083, 0.010788898915052414, 0.0067484430037438869, 0.0059894961304962635, 0.011792735196650028, 0.0048941862769424915, 0.0042672432027757168, 0.0026143316645175219, 0.0069450540468096733, 0.006861882284283638, 0.0095841344445943832, 0.0077721853740513325, 0.012520221993327141, 0.0026319408789277077, 0.0039623603224754333, 0.0034341090358793736, 0.020062746480107307, 0.011985687538981438, 0.0057382774539291859, 0.0134115070104599, 0.0014670074451714754, 0.0068101333454251289, 0.003761709202080965, 0.010466593317687511, 0.010350203141570091, } };
const TfArray<96, int> quant11_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data12[96] = { 1656, 9137, 15464, 25912, 24393, -3626, -1879, 10442, 30353, -4774, 13781, 6210, 12110, 20174, 23628, 2555, 2105, 9515, 12133, 4834, -930, 1186, 16943, -1562, 7819, -277, 9218, 11934, 7682, 39696, 53969, 18429, 11796, -858, 17051, 2900, 2736, 5521, 26960, -752, 21721, 14552, 31060, -3919, 31746, 13864, 6885, 18792, 55160, 10181, -478, 9649, -3445, -472, -3765, 6038, -321, 24432, 6831, 14462, 6519, 17775, 9235, 11171, 13683, 16103, 7163, -6300, 9158, -2933, 4602, 14231, 37087, 8768, -4772, -6147, 9195, 771, 2839, -1700, 27802, 26762, 3256, 18897, 3150, 401, 12217, 120331, 16495, 15868, 11478, -249, 9741, 12652, 4112, 11758, };
const TfArray<1, int> tensor_dimension12 = { 1, { 96 } };
const TfArray<96, float> quant12_scale = { 96, { 0.00018712690507527441, 0.0001641038543311879, 0.00011903702397830784, 9.3081929662730545e-05, 0.00012269278522580862, 0.00026349950348958373, 0.00040167028782889247, 0.00015024373715277761, 7.3004972364287823e-05, 0.0002907066373154521, 0.00019847514340654016, 0.00016082817455753684, 0.00010205741273239255, 0.00011648493091342971, 9.7423704573884606e-05, 0.00024517238489352167, 0.00019411825633142143, 0.00012564941425807774, 0.00018132678815163672, 0.00024228157417383045, 0.00020165584282949567, 0.00029936310602352023, 0.00012358043750282377, 0.0004226791497785598, 0.00034622551174834371, 0.00024170173855964094, 0.0002298224571859464, 0.00011772392463171855, 0.00020455940102692693, 8.9232780737802386e-05, 5.2548042731359601e-05, 0.00012837270332966, 0.00014181941514834762, 0.00030223961221054196, 0.00011739628826035187, 0.00018332240870222449, 0.00015550678654108196, 0.00025495621957816184, 9.6751391538418829e-05, 0.00060090655460953712, 9.0872272267006338e-05, 0.00010776601993711665, 8.124479791149497e-05, 0.00023672168026678264, 9.937379218172282e-05, 0.0001098531938623637, 0.00026792677817866206, 0.00014136506069917232, 7.3224277002736926e-05, 0.00021147256484255195, 0.00018875152454711497, 0.00017569091869518161, 0.00027547581703402102, 0.00028108205879107118, 0.00026603849255479872, 0.00017821580695454031, 0.0001577734510647133, 7.9903002188075334e-05, 0.00030999290174804628, 0.00010306554759154096, 0.0002538900007493794, 7.7602271630894393e-05, 0.00017415621550753713, 9.7173033282160759e-05, 0.00018271885346621275, 0.00011759582412196323, 0.00016672976198606193, 0.00020469223090913147, 0.00018206462846137583, 0.0002304439403815195, 0.00024342042161151767, 0.00010655380174284801, 5.3766005294164643e-05, 0.00011596660624491051, 0.00029811268905177712, 0.00021433089568745345, 0.00018729863222688437, 0.00020842748926952481, 0.00022904849902261049, 0.000250934564974159, 7.2370370617136359e-05, 6.3840416260063648e-05, 0.00024354684865102172, 0.00010921269858954474, 0.00037769158370792866, 0.00017517054220661521, 0.00018867276958189905, 3.2348460081266239e-05, 8.9029083028435707e-05, 0.00014252956316340715, 0.00012038306158501655, 0.00025071675190702081, 0.00015926852938719094, 0.00013027842214796692, 0.00025067690876312554, 0.00013882594066672027, } };
const TfArray<96, int> quant12_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data13[96*1*1*16] = { 
  /* [0][0][][] */ 9,21,-54,97,14,55,2,-30,7,62,-51,70,1,-47,0,-127, 
  /* [1][0][][] */ -14,58,-26,25,37,-33,127,-56,24,86,4,10,-14,-22,-5,-4, 
  /* [2][0][][] */ -127,26,16,-22,10,-36,24,74,-70,-30,47,-92,-13,51,31,-19, 
  /* [3][0][][] */ -4,36,81,-12,-80,79,16,74,-35,1,-127,-19,79,-79,-14,-2, 
  /* [4][0][][] */ 3,-4,116,99,31,44,-2,91,11,4,-4,38,26,-22,-127,-30, 
  /* [5][0][][] */ 19,-25,36,4,-6,-27,17,46,-24,48,-46,-127,-14,-6,-27,-3, 
  /* [6][0][][] */ 34,24,-17,-15,12,43,2,-57,10,0,45,-50,127,7,-21,-26, 
  /* [7][0][][] */ 127,-70,65,-45,-44,6,-7,-64,-84,15,-53,-33,100,-66,97,19, 
  /* [8][0][][] */ -16,98,32,18,-3,48,74,33,78,12,46,-43,-3,17,-127,-55, 
  /* [9][0][][] */ 33,-44,39,17,57,-29,-13,-27,127,17,78,10,56,67,-87,-16, 
  /* [10][0][][] */ 14,-49,-3,-66,-109,15,7,86,-5,45,55,-127,-29,32,90,83, 
  /* [11][0][][] */ 83,-40,1,-81,17,-8,-20,-61,-23,59,58,16,54,-89,91,-127, 
  /* [12][0][][] */ 32,-46,51,-21,-69,8,-83,0,-41,-79,-36,33,74,93,127,26, 
  /* [13][0][][] */ -37,-99,-121,-26,-72,-127,2,-58,16,-32,18,12,-37,-60,104,48, 
  /* [14][0][][] */ 51,-77,32,-66,-3,66,-13,69,-5,127,77,-82,90,7,-66,103, 
  /* [15][0][][] */ -16,-28,14,45,-29,-24,91,37,3,-127,-7,-40,-7,-33,-32,15, 
  /* [16][0][][] */ 42,-35,-59,61,-26,10,46,-81,127,81,44,8,-44,78,16,57, 
  /* [17][0][][] */ 18,-48,-27,99,88,-17,85,-4,72,36,72,-24,-40,127,-110,-39, 
  /* [18][0][][] */ -35,33,-10,14,-53,3,-10,24,-20,19,4,-13,23,-127,72,-26, 
  /* [19][0][][] */ -37,-124,32,-90,127,-9,23,88,59,10,25,108,9,94,-30,20, 
  /* [20][0][][] */ -6,15,33,-68,-38,-6,-14,91,-38,-69,71,-33,-45,-13,-64,127, 
  /* [21][0][][] */ -78,44,-81,-21,34,40,-64,-68,24,122,13,78,-127,-47,56,-23, 
  /* [22][0][][] */ 30,18,51,-43,7,-52,-11,-7,-127,7,-40,-41,-30,46,34,1, 
  /* [23][0][][] */ -4,17,34,-4,13,19,-13,-6,5,5,27,-12,127,14,18,-45, 
  /* [24][0][][] */ 21,-49,38,-95,-29,-17,21,33,-80,-42,-8,-127,-7,-79,80,32, 
  /* [25][0][][] */ 45,-24,-23,127,72,12,0,-55,-65,72,-64,-84,-91,-89,60,-74, 
  /* [26][0][][] */ -46,-32,54,-13,127,-26,34,-13,98,-35,77,40,-10,90,50,21, 
  /* [27][0][][] */ 72,-32,11,-51,-46,-60,-36,-33,-42,-4,-127,15,0,-24,-10,54, 
  /* [28][0][][] */ -127,42,-111,-52,44,-35,18,-113,34,35,-54,2,48,-26,-79,25, 
  /* [29][0][][] */ -10,-7,23,127,4,58,-10,6,-13,-40,-58,15,-6,-22,-13,-38, 
  /* [30][0][][] */ 88,-20,113,2,72,47,18,3,38,3,15,-93,4,46,-127,18, 
  /* [31][0][][] */ 16,-127,-14,-50,-13,-69,37,-43,-8,42,87,64,-16,84,90,108, 
  /* [32][0][][] */ -49,80,-8,16,-127,11,-122,-26,-92,-66,33,58,26,23,29,93, 
  /* [33][0][][] */ 12,12,43,127,35,-28,4,-64,-63,65,0,4,-22,21,18,63, 
  /* [34][0][][] */ 18,-28,1,-40,31,14,-127,5,18,96,-57,62,32,6,82,42, 
  /* [35][0][][] */ 44,29,21,-11,65,-127,-28,-21,6,-18,-50,20,27,21,-18,25, 
  /* [36][0][][] */ -30,-75,-69,36,57,57,21,125,-127,-42,-10,-107,-14,31,-73,24, 
  /* [37][0][][] */ -36,-63,127,53,-2,90,15,-59,19,47,-90,109,-37,-21,6,-42, 
  /* [38][0][][] */ -91,28,-46,45,-13,127,-32,-70,7,-5,33,0,-72,-87,-6,-8, 
  /* [39][0][][] */ -12,44,-13,-20,0,-11,-127,37,-45,-11,-13,-65,-33,-24,-25,4, 
  /* [40][0][][] */ -60,89,-6,79,41,15,58,-39,-30,24,-17,127,11,72,-62,-105, 
  /* [41][0][][] */ -31,74,27,18,-12,-62,106,127,-14,88,4,-4,-59,96,-21,-48, 
  /* [42][0][][] */ -36,46,-31,-14,-76,0,-13,127,53,-101,57,92,-80,10,-32,40, 
  /* [43][0][][] */ -127,35,103,-56,1,60,-36,-5,-56,-7,27,-8,-110,-27,63,0, 
  /* [44][0][][] */ 36,-32,-11,22,18,-14,-3,-66,127,21,37,50,46,45,12,14, 
  /* [45][0][][] */ 10,-119,-12,-127,-30,10,-24,-32,-2,-58,-4,13,108,37,32,73, 
  /* [46][0][][] */ -74,62,23,63,-83,-25,-35,-39,-127,17,-51,10,-15,49,-17,-14, 
  /* [47][0][][] */ -56,37,-30,127,-12,47,58,31,11,13,-8,38,-34,-22,-6,36, 
  /* [48][0][][] */ -25,11,36,-127,25,-41,-66,27,-25,-41,-45,-23,-64,-9,66,28, 
  /* [49][0][][] */ -17,-2,10,22,0,23,-64,-34,41,15,-40,-41,-102,7,-127,-118, 
  /* [50][0][][] */ 26,35,19,-49,81,11,-19,-3,127,-10,9,31,47,5,10,-38, 
  /* [51][0][][] */ -59,-7,58,-44,59,-90,-28,-57,-57,-127,5,-39,-29,56,-36,2, 
  /* [52][0][][] */ -5,59,57,8,69,-48,-66,127,-106,95,-1,-23,86,56,-84,-21, 
  /* [53][0][][] */ -28,58,5,-17,8,3,-12,-22,-25,-34,-20,47,17,-127,-53,-29, 
  /* [54][0][][] */ 2,6,11,51,37,8,18,-45,26,56,-20,0,-20,127,-44,-29, 
  /* [55][0][][] */ -25,127,75,-31,47,-53,23,14,-43,25,106,-50,11,15,68,25, 
  /* [56][0][][] */ 114,-19,-19,-73,74,-31,6,-13,33,1,88,127,27,-24,105,44, 
  /* [57][0][][] */ -33,16,26,127,3,60,13,62,17,43,35,17,-4,49,11,-2, 
  /* [58][0][][] */ 46,72,26,-127,4,-12,-11,24,67,-32,21,24,35,-67,20,80, 
  /* [59][0][][] */ -25,83,82,-53,-39,-31,56,44,19,10,47,-113,-62,-75,-127,9, 
  /* [60][0][][] */ 15,68,120,-33,-35,127,24,-23,-29,42,-63,-1,-4,36,27,11, 
  /* [61][0][][] */ 27,-10,3,-19,-22,51,127,116,-51,87,-4,24,-42,46,-18,16, 
  /* [62][0][][] */ 4,-17,-43,-2,-24,32,-48,29,-11,-18,-20,-103,29,-56,127,2, 
  /* [63][0][][] */ -3,-32,-60,-28,99,41,-63,-61,34,116,1,7,127,-44,85,-40, 
  /* [64][0][][] */ -35,-19,55,67,59,34,-63,-127,43,-61,-13,-60,-4,-39,87,-10, 
  /* [65][0][][] */ -127,53,30,-87,7,97,115,-46,-124,45,104,-62,-33,36,-30,-68, 
  /* [66][0][][] */ 102,71,41,94,-103,23,-44,-57,-25,62,66,-127,-47,23,-56,-117, 
  /* [67][0][][] */ 60,-52,-9,18,64,-34,-79,-101,33,-94,-127,-72,-30,-20,-30,11, 
  /* [68][0][][] */ 73,-99,-54,54,-43,-51,23,-100,-22,7,-52,-105,-51,63,127,-37, 
  /* [69][0][][] */ -3,35,-40,4,-68,-127,45,98,-13,-23,86,-100,72,10,-21,42, 
  /* [70][0][][] */ -19,-18,-20,-12,-43,13,127,53,-47,32,23,-17,6,29,41,-11, 
  /* [71][0][][] */ 55,-23,-24,-76,-3,61,-5,51,-53,-51,-52,6,36,-127,44,34, 
  /* [72][0][][] */ -2,85,-8,91,59,-42,-77,-55,90,69,-110,127,108,17,119,25, 
  /* [73][0][][] */ 29,-127,22,-57,-70,-6,7,14,-52,-9,-25,-43,87,2,96,36, 
  /* [74][0][][] */ -21,72,15,15,-59,-42,-127,79,-46,-85,-76,-108,-36,26,-25,38, 
  /* [75][0][][] */ -127,37,-116,-54,-18,90,87,56,10,36,77,-69,-13,111,122,20, 
  /* [76][0][][] */ -56,23,-90,-2,27,38,-121,-127,-21,25,6,7,-30,20,26,-73, 
  /* [77][0][][] */ -20,64,-77,-64,-114,-46,31,-46,127,-19,-120,28,-37,60,57,-114, 
  /* [78][0][][] */ -12,-127,-40,91,115,42,-12,-24,56,7,-75,81,85,13,99,30, 
  /* [79][0][][] */ 37,-31,14,-68,127,-34,65,15,120,38,-2,54,-15,-15,22,-15, 
  /* [80][0][][] */ 37,-40,107,-124,38,-119,-14,-9,-111,-19,-56,-29,24,127,-66,-35, 
  /* [81][0][][] */ 80,-21,18,121,73,109,-34,-64,80,34,95,-10,67,69,-127,28, 
  /* [82][0][][] */ -61,8,28,-33,61,-70,-44,-28,37,-10,55,10,-73,-127,-55,8, 
  /* [83][0][][] */ 18,-34,-69,-39,-45,9,48,5,-91,33,30,-127,18,-45,21,70, 
  /* [84][0][][] */ 127,28,51,33,-52,26,7,38,-10,7,46,-22,-18,49,61,-30, 
  /* [85][0][][] */ -59,-24,-1,-78,6,29,-55,118,-97,-127,-43,-16,-86,47,55,-64, 
  /* [86][0][][] */ 12,57,-25,-11,-47,46,-88,-19,-45,-2,21,2,-53,-127,-30,1, 
  /* [87][0][][] */ 127,-13,-1,-6,-59,-52,29,16,-31,-4,-124,-46,-4,20,-4,39, 
  /* [88][0][][] */ 11,89,-8,55,13,46,-22,-19,127,-9,99,-1,-4,20,66,-98, 
  /* [89][0][][] */ 11,25,-72,14,-5,-21,62,-59,14,61,60,-82,-6,29,16,-127, 
  /* [90][0][][] */ 0,-52,55,-110,-61,53,116,-21,41,-63,45,-127,28,39,-98,9, 
  /* [91][0][][] */ -74,51,-23,-127,-110,67,3,-25,-88,-2,66,-6,-56,-67,32,113, 
  /* [92][0][][] */ 34,-16,22,-53,-26,32,-41,-127,-1,-122,-46,-36,-31,-56,39,30, 
  /* [93][0][][] */ -19,18,86,-61,23,37,30,99,41,-21,112,69,-90,127,-85,-16, 
  /* [94][0][][] */ -19,15,-45,10,65,-127,-5,-42,38,-3,64,-3,7,1,-18,9, 
  /* [95][0][][] */ -27,95,-21,-127,71,-52,-13,-46,-51,38,21,-34,-66,6,-74,-119, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant13_scale = { 96, { 0.00064196676248684525, 0.00056298275012522936, 0.00040837426786310971, 0.00031933144782669842, 0.00042091589421033859, 0.0009039743454195559, 0.0013779898872599006, 0.00051543355220928788, 0.00025045443908311427, 0.00099731248337775469, 0.00068089860724285245, 0.00055174506269395351, 0.00035012318403460085, 0.00039961893344298005, 0.00033422655542381108, 0.00084110040916129947, 0.00066595163661986589, 0.00043105907388962805, 0.00062206859001889825, 0.00083118310431018472, 0.0006918104481883347, 0.0010270097991451621, 0.00042396111530251801, 0.001450063893571496, 0.0011877783108502626, 0.00082919385749846697, 0.00078844022937119007, 0.00040386948967352509, 0.00070177152520045638, 0.00030612637056037784, 0.00018027389887720346, 0.0004404017236083746, 0.00048653266276232898, 0.0010368780931457877, 0.00040274547063745558, 0.00062891485868021846, 0.00053348921937867999, 0.00087466533295810223, 0.00033192007686011493, 0.0020614995155483484, 0.00031175088952295482, 0.00036970741348341107, 0.00027872240752913058, 0.00081210903590545058, 0.00034091662382707, 0.00037686777068302035, 0.00091916281962767243, 0.0004849739489145577, 0.00025120680220425129, 0.00072548817843198776, 0.00064754026243463159, 0.00060273392591625452, 0.00094506092136725783, 0.00096429395489394665, 0.00091268471442162991, 0.00061139592435210943, 0.00054126535542309284, 0.00027411917108111084, 0.0010634768987074494, 0.0003535817377269268, 0.00087100750533863902, 0.0002662261831574142, 0.00059746886836364865, 0.00033336659544147551, 0.0006268442957662046, 0.00040343002183362842, 0.00057199131697416306, 0.00070222723297774792, 0.00062459986656904221, 0.00079057231778278947, 0.00083509006071835756, 0.00036554870894178748, 0.00018445230671204627, 0.00039784074760973454, 0.0010227200109511614, 0.00073529413202777505, 0.00064255588222295046, 0.00071504159132018685, 0.00078578502871096134, 0.00086086842929944396, 0.00024827735614962876, 0.00021901408035773784, 0.00083552382420748472, 0.00037467046058736742, 0.0012957273283973336, 0.00060094869695603848, 0.00064727006247267127, 0.00011097621609224007, 0.0003054275584872812, 0.0004889689153060317, 0.00041299205622635782, 0.00086012121755629778, 0.00054639443987980485, 0.00044693954987451434, 0.00085998454596847296, 0.00047626308514736593, } };
const TfArray<96, int> quant13_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data14[16] = { -8972, 4448, -14913, 38441, 13637, -5901, -15150, -5417, 7549, -18971, 23214, 23534, -15444, 13245, 33735, -5814, };
const TfArray<1, int> tensor_dimension14 = { 1, { 16 } };
const TfArray<16, float> quant14_scale = { 16, { 0.00034293165663257241, 0.00020785970264114439, 0.00024050386855378747, 0.00012853338557761163, 0.00026620470453053713, 0.00025027949595823884, 0.00016567605780437589, 0.00026299618184566498, 0.0001795866119209677, 0.00014658557483926415, 0.00030923387384973466, 0.00071455317083746195, 0.00037984151276759803, 0.00029171863570809364, 0.00034992778091691434, 0.00024829834001138806, } };
const TfArray<16, int> quant14_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data15[16*1*1*96] = { 
  /* [0][0][][] */ -5,25,26,8,30,85,12,-61,16,-26,13,8,-6,22,35,51,20,-16,-9,20,82,-18,5,-16,-30,-16,-17,-114,-13,9,-1,24,127,7,6,-5,7,-22,-25,16,-15,28,-1,-18,24,-24,11,38,-25,23,9,-19,-17,-4,35,4,20,17,15,-23,-30,9,13,-28,24,14,47,-6,11,-1,22,-38,-59,-1,-14,5,16,-42,-4,-15,81,-25,-63,-43,69,2,5,13,-48,30,32,21,46,56,-1,119, 
  /* [1][0][][] */ 48,-55,36,47,-7,-36,-38,-51,-28,-103,-6,4,33,-31,-29,-49,-63,-1,14,-69,-59,-98,-1,50,60,-86,-61,-19,-5,99,-47,99,4,-12,24,51,-5,-34,15,-66,20,-47,44,-17,-8,32,43,26,1,-5,-3,-59,61,-111,22,-45,42,23,-76,-127,29,-99,33,-9,-31,-50,28,68,35,61,-101,-4,-48,-3,-30,7,35,77,-1,-13,23,-11,-99,9,-90,51,-29,39,-18,-10,37,-46,-18,-63,48,-30, 
  /* [2][0][][] */ 60,34,20,-2,10,-18,-2,67,78,17,-28,64,-3,21,64,36,-36,-13,-4,0,25,-60,-19,7,18,-36,-30,53,24,7,119,-36,-7,-45,-1,49,-18,127,-7,-9,-28,-29,35,55,-69,-41,-56,24,55,12,-24,-47,20,40,-24,-19,-49,32,15,20,-29,9,54,86,58,-92,20,-91,24,-19,-35,36,-46,27,10,7,14,45,33,2,-13,40,75,-5,-43,-15,35,-18,59,5,-27,-58,-23,-1,21,66, 
  /* [3][0][][] */ -13,-31,-53,7,10,3,10,-10,-40,36,5,20,11,-49,17,15,41,-81,30,-33,-66,-53,-20,-7,-9,4,23,24,34,-79,108,-39,-3,-11,8,55,10,27,-50,28,9,-84,17,-19,-30,17,28,-13,-124,25,-20,5,-110,-49,-43,-5,50,-25,-39,32,-29,21,-17,-39,-37,-127,-42,80,75,10,86,53,-38,38,8,-16,-36,-57,21,-77,16,-52,1,87,5,36,47,53,80,-39,-24,17,-72,-9,-28,-47, 
  /* [4][0][][] */ -38,-11,14,-41,18,-30,-31,20,-10,-1,-25,39,-2,47,14,11,41,-29,-16,16,-4,50,90,28,-6,18,31,63,3,-34,12,-18,-19,31,40,4,55,7,-4,-26,27,30,-68,-9,22,7,19,8,-3,58,21,-17,-41,30,2,15,-10,-32,-8,55,27,57,-17,12,29,-89,36,-35,-5,16,77,-15,-27,-15,-18,-2,-11,63,60,16,14,11,127,-14,5,-12,-11,29,98,29,-9,41,-6,29,-7,-31, 
  /* [5][0][][] */ 15,6,8,-2,-3,-5,6,114,66,16,-33,-15,28,20,5,64,-8,-20,-21,-29,-25,8,11,-53,33,20,41,119,83,-8,127,26,-71,35,11,-9,-76,-20,-9,-26,-48,-15,22,6,81,13,27,11,-18,-8,-26,3,-39,-3,15,44,-9,8,4,42,-89,39,-29,-40,6,-23,-11,33,32,57,34,16,10,34,40,-8,21,35,35,103,9,-45,58,36,-9,-16,45,2,37,-4,33,-89,-15,-35,26,-87, 
  /* [6][0][][] */ -12,-11,6,-74,-21,13,-22,-17,-1,-22,-9,-28,36,-47,8,-13,27,-66,45,-13,-11,-11,-29,21,92,-39,-7,-41,35,13,-25,-16,-5,-15,-36,27,9,12,48,3,-6,-10,-48,-20,15,-18,16,-124,19,58,-17,-3,32,-23,37,-70,73,16,-14,-2,42,-26,29,11,58,127,29,9,-7,-8,-45,-28,22,9,42,8,-5,32,-24,5,-6,-5,21,-62,30,74,19,-14,-15,-32,-32,-21,-44,20,-34,12, 
  /* [7][0][][] */ 36,-6,18,-22,-18,-2,-43,-3,-9,-9,1,-15,-29,-97,33,13,-23,-26,5,-18,53,-42,-52,-24,22,-32,-32,5,13,32,29,-7,-43,-3,-27,-16,-15,-43,4,0,-6,-26,-15,18,-30,5,-49,48,19,12,-55,-13,-18,-12,-19,-85,24,29,-17,-9,-28,-31,-9,2,7,53,2,-46,-13,-23,-42,53,16,11,15,20,29,-14,-38,-31,-16,-47,51,-17,-48,127,1,-29,-48,-67,-28,1,-50,-9,-3,0, 
  /* [8][0][][] */ -69,36,-22,8,56,-16,22,14,68,69,-53,30,8,40,85,-13,29,31,-87,-11,27,51,5,40,-49,14,55,27,34,-87,-7,8,32,-7,61,24,31,39,-46,14,25,27,3,-84,11,13,65,13,-50,2,21,45,-127,125,38,15,-2,-22,-38,0,23,28,11,13,-7,36,45,8,36,12,57,45,-45,-4,2,-6,13,-43,15,-20,3,5,31,16,-57,5,41,-8,13,39,-19,4,49,4,-26,-17, 
  /* [9][0][][] */ 7,-45,-9,-39,45,40,34,-18,47,-2,-46,38,-38,-7,-19,52,52,23,10,-33,-80,16,57,-11,44,37,84,-17,-51,-76,-20,-25,48,38,34,45,47,96,-50,-13,63,29,6,-72,46,3,94,-91,-40,-7,44,11,-33,44,23,3,-52,30,-29,-13,59,62,-35,-7,53,127,50,45,54,34,77,-40,-18,-30,-76,-16,53,26,44,26,33,38,7,6,10,33,52,46,-43,33,-21,12,23,52,52,-15, 
  /* [10][0][][] */ 0,47,-30,13,76,-88,-18,-5,28,55,2,17,-3,-7,-23,-73,14,26,-32,23,-76,-16,20,-14,-56,4,-45,69,54,-14,21,76,5,21,43,-4,71,14,25,-25,15,55,33,-6,-18,-21,-25,14,-19,5,-15,24,-22,15,-11,-13,28,18,-48,-28,19,13,5,-1,-14,53,55,4,70,52,6,52,-53,-37,-65,-28,17,40,-3,1,22,-10,-50,-7,10,-26,89,25,4,18,3,-35,75,-5,25,-127, 
  /* [11][0][][] */ 36,42,-27,26,-8,-9,40,8,8,-1,-23,-24,7,-8,29,-3,-12,-9,-95,-15,15,13,0,2,-55,-25,-3,40,-9,20,12,1,-19,0,27,15,11,-21,-22,27,14,19,59,-82,14,-33,3,1,-114,-4,17,-34,11,42,-24,20,-30,0,6,26,7,4,3,-12,-56,35,-14,12,6,-27,-13,7,-47,-31,12,4,-19,-49,-50,-7,-6,-4,127,39,-4,-27,-24,-19,8,38,-25,4,-1,28,-24,14, 
  /* [12][0][][] */ -22,4,13,-13,-4,39,35,20,127,21,-22,26,-8,18,-5,-8,36,26,2,85,63,39,-6,-13,11,23,20,-59,-79,-4,38,-57,21,9,7,-6,20,23,42,25,-65,-5,8,16,23,37,17,-4,12,13,-12,-1,-8,9,22,3,57,1,7,20,0,1,-11,-21,19,-4,-17,-11,-3,18,5,-7,2,16,-43,14,27,4,18,-33,10,29,16,48,39,-7,-5,-23,10,29,-29,70,5,14,9,25, 
  /* [13][0][][] */ 23,-14,-24,4,18,19,16,-20,-15,-25,21,-2,16,-9,25,-19,40,-69,-24,11,-32,-20,13,14,14,8,11,-16,-19,-30,-35,-9,13,35,-10,62,18,3,-9,-2,10,28,15,33,36,16,-18,-127,30,8,1,-2,17,6,29,-20,-2,30,32,-7,29,8,8,1,-6,19,-27,-64,7,-5,-42,-35,-17,27,-19,41,-30,3,-3,-3,19,-25,-29,-9,35,44,3,25,-21,-8,17,-8,-5,40,-35,-23, 
  /* [14][0][][] */ -127,-66,-8,43,12,-37,-55,-5,-25,44,15,5,18,8,-104,-37,116,-34,3,43,-19,-11,73,-2,-117,40,32,-36,-86,-58,-21,-6,-19,-13,2,-80,87,36,-41,0,25,24,-21,-56,26,86,74,42,-107,5,0,55,-51,43,49,2,24,-4,56,78,15,50,7,44,-9,-11,-55,26,-22,115,-58,-100,-43,-20,-16,28,-27,20,74,8,70,53,12,27,65,12,69,22,3,29,82,15,3,45,30,-26, 
  /* [15][0][][] */ 68,1,19,9,0,40,3,18,4,55,21,-31,-89,-21,23,27,-26,48,44,9,67,9,-90,44,-8,-7,23,11,14,51,-54,-44,-22,-62,4,-17,7,-73,-27,-66,-4,14,1,40,-60,32,-54,-56,88,-6,-35,36,58,-95,22,-127,-23,-3,5,32,-97,-45,36,20,38,-1,-59,18,-63,15,-93,28,33,36,48,3,-20,-77,14,-10,-41,-13,53,38,-7,0,8,-99,-33,1,18,7,-76,54,-13,-14, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant15_scale = { 16, { 0.014574595727026463, 0.0088340369984507561, 0.010221414268016815, 0.0054626688361167908, 0.011313699185848236, 0.010636878199875355, 0.0070412321947515011, 0.011177337728440762, 0.0076324306428432465, 0.0062298867851495743, 0.013142439536750317, 0.030368508771061897, 0.016143264248967171, 0.012398041784763336, 0.014871930703520775, 0.010552679188549519, } };
const TfArray<16, int> quant15_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data16[96] = { 10458, -10607, 2697, 72820, -758, -4029, -15050, 4247, -2804, 267, 4398, -2350, 2240, -8084, 6795, -7240, -1837, 16223, 25941, 2170, 168, -2133, 1216, 404, 15111, -3366, -3149, -4166, -6107, -10993, 5045, -9683, 3773, -3334, -178, 19326, 1665, -2414, 19784, 1414, -1014, -118, -11024, -8550, -6718, 68232, -2834, 20573, 35162, -12180, 241, 8035, 6702, -34, -5376, 2438, -15326, 1157, 1734, -4833, -1333, -980, -15891, -1471, 1252, 13889, 27543, 36395, -12064, 1053, -6442, -699, 56293, 6153, -1095, -99, 15620, 32919, 144, -16295, -355, -7881, -694, -3998, -271, -688, 592, 1272, -236, -3805, 782, 855, 114, -1947, 1676, 53253, };
const TfArray<1, int> tensor_dimension16 = { 1, { 96 } };
const TfArray<96, float> quant16_scale = { 96, { 0.00017819556524045765, 0.00010291134094586596, 0.00022372083913069218, 3.0190289180609398e-05, 0.00017134581867139786, 0.00016652385238558054, 0.00027653304277919233, 7.2099617682397366e-05, 0.00014804585953243077, 0.00038446814869530499, 0.00012960734602529556, 0.0002892453339882195, 6.2813087424729019e-05, 0.00035952252801507711, 0.00014679470041301101, 0.00012012286606477574, 9.4411356258206069e-05, 0.00028360530268400908, 6.3968473114073277e-05, 0.00028248591115698218, 5.2768180466955528e-05, 0.00016349759243894368, 0.00011668496881611645, 0.00033772931783460081, 0.00022221120889298618, 0.00023944632266648114, 0.00015926918422337621, 0.00020961047266609967, 0.00011415110202506185, 7.0353627961594611e-05, 0.00011956868547713384, 0.00016927650722209364, 0.00013088800187688321, 6.9973626523278654e-05, 0.00021624920191243291, 0.00012068120122421533, 0.00050638930406421423, 0.00011413227912271395, 3.8553582271561027e-05, 0.00011914029892068356, 0.00015349857858382165, 0.00026332240668125451, 0.00028727247263304889, 0.0001499730278737843, 0.00019504922966007143, 4.8655048885848373e-05, 0.00018776817887555808, 0.00015920973964966834, 7.550386362709105e-05, 0.0001721940643619746, 0.00011782651563407853, 0.00014780048513785005, 0.00020502913685049862, 0.00028000216116197407, 0.0002128311462001875, 0.00041561562102288008, 0.00023827390396036208, 0.00017960084369406104, 0.00011352583533152938, 9.4685325166210532e-05, 0.00029105291469022632, 0.0001535494375275448, 0.00022156047634780407, 0.0001408154348609969, 0.00024274444149341434, 0.00020557802054099739, 8.0260913819074631e-05, 5.2760311518795788e-05, 0.00030664083897136152, 0.00032134115463122725, 0.00024692842271178961, 0.00011563020962057635, 0.00010401697363704443, 0.00015784555580466986, 0.00014676715363748372, 0.00020800706988666207, 0.00049472693353891373, 4.7873712901491672e-05, 0.00025458715390414, 0.00012124918430345133, 0.00016240867262240499, 0.00026852084556594491, 0.00024267751723527908, 0.00012288050493225455, 0.00014522379206027836, 0.00010626197763485834, 0.0001358020817860961, 0.0001306946505792439, 0.00015529825759585947, 0.00010576926433714107, 0.0002142767480108887, 0.00011053839261876419, 0.00013825111091136932, 0.00034320700797252357, 0.00075695832492783666, 8.0649813753552735e-05, } };
const TfArray<96, int> quant16_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data17[1*3*3*96] = { 
  /* [0][0][][] */ -19,8,-20,109,-20,23,-58,-53,22,-3,96,-12,4,-7,-3,63,12,20,-35,7,76,1,35,-37,4,20,43,48,25,22,28,48,-5,27,13,-14,7,48,-83,-28,22,14,25,20,-87,-58,31,-3,-11,-22,-10,-4,52,5,-14,5,1,-38,33,-29,28,1,127,25,-12,-12,14,-62,67,34,0,-22,80,-30,72,4,21,-127,34,75,4,35,127,-15,38,33,-31,-21,42,0,-14,75,5,23,1,13, -50,14,-8,8,50,-7,-8,-127,39,16,-127,-9,-20,-10,6,104,19,-27,-11,-17,79,-98,127,22,-60,-30,-99,-20,33,34,-47,18,110,10,-16,0,-21,127,-72,-127,11,-21,-28,16,46,-127,127,-42,-78,44,44,9,38,-64,29,59,38,39,-100,87,127,29,4,-22,44,-39,-87,-6,42,-33,-21,32,-47,-41,116,-6,-29,-60,-34,74,-73,80,-20,9,-6,50,58,-42,-26,58,-14,69,-127,-29,22,-127, -1,-5,-23,-77,6,23,39,19,1,3,-2,59,-1,-13,-9,3,-15,23,-13,23,8,20,28,-35,0,-26,16,15,-10,8,53,-75,37,16,5,-24,13,2,-39,-24,9,4,-17,11,24,-37,27,2,4,-12,-1,-3,7,6,-4,11,-1,44,15,-8,7,-21,2,-16,-26,-18,44,-55,-111,-9,42,-33,-127,-18,-10,17,15,-15,5,22,-12,40,-31,-6,-35,24,25,37,-20,-11,25,-9,20,10,2,-50, 
  /* [0][1][][] */ -42,57,-19,42,-88,-12,-5,-45,25,98,-43,-25,-35,-25,-4,53,127,-25,-104,-15,78,-127,-27,10,-34,-41,-120,2,42,45,-49,29,-127,-79,-56,2,61,-3,-67,42,-18,96,4,0,32,-56,-9,-30,127,42,-8,21,48,7,-40,-15,31,10,-127,127,-36,-84,16,127,-61,-35,-97,127,-37,127,-22,65,-30,-47,43,8,-32,-74,127,46,127,34,8,2,127,23,-95,48,-36,-35,-104,42,104,109,30,-64, 127,127,127,127,-47,-127,127,23,127,-127,15,-127,-110,127,127,127,-17,-127,-68,-127,127,24,-63,127,127,127,-49,-127,127,127,-127,127,-17,-127,-118,127,-127,-43,121,103,-127,-127,127,127,127,-114,-99,127,-14,127,-127,-127,-127,127,127,-127,127,-127,-47,37,-102,-29,-74,-65,127,127,-61,124,127,-110,-127,127,-44,127,-127,-127,-127,127,-75,127,-51,127,75,127,-37,-127,-17,-109,-127,-127,-24,-127,-20,-127,-127,115, -23,66,-37,-2,127,78,-16,44,6,24,-18,-5,-28,-31,-12,-10,-106,-21,-127,37,37,75,-13,-122,-35,-34,127,71,5,40,77,10,107,-47,127,-5,54,1,-95,11,38,27,-25,2,-22,-54,-7,-41,78,6,-15,41,-3,-3,-75,-15,30,23,126,-99,2,127,-4,-36,-110,-28,-73,104,13,-19,124,18,-15,-49,15,47,-26,-7,-45,-3,-51,8,42,24,-86,30,127,-49,39,-20,127,-9,-122,37,36,11, 
  /* [0][2][][] */ -5,-45,-20,-67,-6,11,42,31,1,7,-24,54,30,-34,-6,2,48,-2,7,25,-2,31,-18,-24,3,-19,10,10,-1,3,53,-72,-38,71,-26,-28,31,-33,-72,12,11,14,-33,13,14,-82,-6,0,-9,1,18,-8,10,-1,-24,8,1,49,-49,31,-4,-9,7,20,-6,-9,31,-72,-58,10,-22,-3,-120,-25,6,17,17,-15,54,20,16,14,-32,18,15,22,-18,10,8,28,21,-7,22,41,-5,-33, -29,-11,-27,19,-45,79,-22,66,7,-5,48,-7,127,-7,-14,-5,4,-39,-64,26,-14,84,-48,-114,-43,-41,103,71,17,50,58,1,-120,63,-12,-26,-32,-27,-127,-7,46,-10,-17,30,-23,-39,-15,-46,-60,24,62,25,-9,-84,27,52,15,27,80,-60,18,-57,-9,0,21,-27,-127,-74,-12,-26,-62,29,36,-41,-28,-6,-39,22,-58,-4,51,34,28,8,4,58,-86,127,18,127,-33,-23,121,-23,45,75, -8,-37,-24,25,17,64,-39,11,5,-3,-5,12,17,-51,-9,-7,-44,-7,21,20,-28,9,-23,5,-4,23,2,54,-1,-5,37,32,16,48,21,-27,-6,-24,-43,6,10,-9,22,4,-68,-36,-8,5,-5,-25,-6,-3,-7,10,-16,-5,5,-42,14,-35,-23,47,7,-28,-10,-2,26,-64,52,6,63,-22,30,-55,-20,22,15,10,-8,22,-41,30,94,-18,-17,49,43,-11,117,17,1,-17,10,-20,-6,-54, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant17_scale = { 96, { 0.0075733112171292305, 0.0043737320229411125, 0.0095081357285380363, 0.0012830873019993305, 0.0072821970097720623, 0.007077263668179512, 0.011752653867006302, 0.003064233809709549, 0.0062919491901993752, 0.016339896246790886, 0.0055083120241761208, 0.012292926199734211, 0.0026695560663938522, 0.015279707498848438, 0.0062387748621404171, 0.0051052216440439224, 0.0040124827064573765, 0.012053225189447403, 0.0027186600491404533, 0.012005651369690895, 0.0022426475770771503, 0.0069486475549638271, 0.0049591111019253731, 0.014353496022522449, 0.0094439759850502014, 0.010176468640565872, 0.0067689400166273117, 0.0089084450155496597, 0.004851421806961298, 0.0029900290537625551, 0.0050816689617931843, 0.007194251287728548, 0.0055627399124205112, 0.0029738792218267918, 0.0091905910521745682, 0.0051289508119225502, 0.021521544083952904, 0.0048506218008697033, 0.001638527144677937, 0.0050634625367820263, 0.0065236897207796574, 0.011191202327609062, 0.012209080159664154, 0.0063738534227013588, 0.0082895923405885696, 0.0020678394939750433, 0.0079801473766565323, 0.0067664138041436672, 0.0032089140731841326, 0.0073182475753128529, 0.0050076269544661045, 0.0062815207056701183, 0.0087137380614876747, 0.011900091543793678, 0.0090453233569860458, 0.017663663253188133, 0.010126641020178795, 0.0076330355368554592, 0.0048248479142785072, 0.0040241261012852192, 0.012369749136269093, 0.0065258508548140526, 0.0094163203611969948, 0.0059846555814146996, 0.010316638275980949, 0.0087370658293366432, 0.0034110888373106718, 0.0022423132322728634, 0.013032235205173492, 0.013656998984515667, 0.010494457557797432, 0.0049142837524414062, 0.0044207214377820492, 0.0067084357142448425, 0.0062376037240028381, 0.0088403001427650452, 0.021025894209742546, 0.0020346327219158411, 0.010819953866302967, 0.0051530902273952961, 0.0069023687392473221, 0.011412136256694794, 0.010313794016838074, 0.0052224216051399708, 0.0061720111407339573, 0.004516134038567543, 0.005771588534116745, 0.0055545223876833916, 0.0066001759842038155, 0.0044951937161386013, 0.0091067617759108543, 0.0046978816390037537, 0.0058756722137331963, 0.014586297795176506, 0.032170727849006653, 0.0034276170190423727, } };
const TfArray<96, int> quant17_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data18[96] = { 18814, 3108, 10895, -896, 10506, 7024, 18030, 9169, -1222, 18070, 4466, 2151, 12094, 68155, -788, -3654, 17391, 17500, 1927, -917, -1145, 24246, 8449, 3968, 9768, 7683, 8448, 6645, 281, 4, 5582, 12119, 20954, 4390, 9531, -680, 21438, 12729, 1187, 9312, 1542, 16871, 17673, 5817, 6558, 15860, 16377, 9481, 8603, 4857, 953, -1245, 11866, 9638, 11394, 22367, -295, 9995, 4410, 7101, 24497, 8796, 5455, 21339, 5872, 7765, 8754, -1213, 22852, 8531, 8517, -2115, -2092, 3614, 2237, 4132, 36395, 19184, 17472, -5086, 8001, -6653, -3111, 1044, 16869, 9608, 15061, 5069, 8724, 6498, 12958, 5760, 17112, 26420, -8050, 20348, };
const TfArray<1, int> tensor_dimension18 = { 1, { 96 } };
const TfArray<96, float> quant18_scale = { 96, { 0.00013466711970977485, 0.00013819703599438071, 0.00012752290058415383, 0.00074804737232625484, 0.00016160390805453062, 0.00013382005272433162, 0.00016708606563042849, 0.00037853562389500439, 0.00042140710866078734, 9.9055047030560672e-05, 0.00031685276189818978, 0.00035303487675264478, 0.00023293457343243062, 7.1346097683999687e-05, 0.00014956577797420323, 0.00016436961595900357, 0.00012521809549070895, 0.00013500667409971356, 0.0002456069050822407, 0.00022594672918785363, 0.00021291308803483844, 0.00010008731624111533, 0.00016861598123796284, 0.00019541142683010548, 0.00018813612405210733, 0.00025631097378209233, 0.0001707875489955768, 0.00014038468361832201, 0.00028340084827505052, 0.00027006829623132944, 0.00024964674958027899, 0.00015168637037277222, 9.0820591140072793e-05, 0.00023463983961846679, 0.00016999582294374704, 0.0003743161796592176, 0.00010531971201999113, 0.0002017845690716058, 0.00036466334131546319, 0.00010922522778855637, 0.00030199595494195819, 0.00011567175533855334, 0.00012285864795558155, 0.00012125389912398532, 0.00017481924442108721, 0.00020796780881937593, 0.00017344104708172381, 0.00015527484356425703, 0.00016657233936712146, 0.00021572575496975332, 0.00032002176158130169, 0.00053584040142595768, 0.00022388207435142249, 0.00016451528063043952, 0.00020264353952370584, 8.1444464740343392e-05, 0.00039867209852673113, 0.00017889009905047715, 0.00016043191135395318, 0.00024382707488257438, 6.9958783569745719e-05, 0.0001576578215463087, 0.00022547143453266472, 0.00013210765609983355, 0.00018887265468947589, 0.00016573088942095637, 0.0002107286563841626, 0.00025186844868585467, 0.00011288341920590028, 0.00012516295828390867, 0.00022895402798894793, 0.00027271377621218562, 0.00017392580048181117, 0.0003581229830160737, 0.00016872027481440455, 0.00029757979791611433, 6.4467843913007528e-05, 0.00023421546211466193, 9.7641044703777879e-05, 0.00023040315136313438, 0.00014340321649797261, 0.0003242095117457211, 0.00014550620107911527, 0.00033327721757814288, 9.5927323854994029e-05, 0.00017090539040509611, 0.00010879580077016726, 0.00024303077952936292, 0.00016940766363404691, 0.00023736570437904447, 0.00010631140321493149, 0.00029138813260942698, 0.00011516076483530924, 0.00010098372877109796, 0.00036109646316617727, 0.00016218745440710336, } };
const TfArray<96, int> quant18_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data19[96*1*1*16] = { 
  /* [0][0][][] */ 59,35,43,88,50,-62,53,-48,127,26,-51,-16,76,-37,26,-77, 
  /* [1][0][][] */ 73,123,-24,45,32,-39,62,21,47,127,-54,83,24,-6,19,-24, 
  /* [2][0][][] */ 24,-41,7,57,9,76,-17,28,7,-10,4,60,0,-113,92,-127, 
  /* [3][0][][] */ 85,127,-47,30,-71,44,-16,-53,10,-15,70,-83,-25,79,-58,-44, 
  /* [4][0][][] */ -28,-46,-4,-10,-4,9,-39,46,-64,-18,36,46,-34,-127,14,-29, 
  /* [5][0][][] */ 127,-15,6,8,14,-104,11,51,15,18,-78,26,-29,-5,5,24, 
  /* [6][0][][] */ -127,-24,-68,120,-46,60,-14,13,-17,-51,-44,35,31,83,31,15, 
  /* [7][0][][] */ -25,30,-72,101,39,-127,18,71,-1,-29,6,1,-50,-1,-84,-28, 
  /* [8][0][][] */ -8,-2,-23,4,6,18,-57,-37,-2,10,-41,-7,-127,-21,15,-4, 
  /* [9][0][][] */ 36,-63,18,63,50,-30,-24,-77,127,-56,-3,41,25,-13,-30,22, 
  /* [10][0][][] */ -64,-62,-35,-42,28,68,127,67,67,-26,-42,20,51,-39,-69,90, 
  /* [11][0][][] */ 21,9,-127,19,0,40,20,23,-24,5,21,-27,-35,-19,-39,-26, 
  /* [12][0][][] */ 7,3,44,-29,48,56,-113,-127,73,-15,-108,-10,-41,-104,-9,23, 
  /* [13][0][][] */ 42,23,-1,-127,-6,-60,-115,-12,-57,-116,-63,42,-18,-18,-23,93, 
  /* [14][0][][] */ -34,-11,-73,-6,86,-127,48,-34,71,59,8,-47,80,78,18,24, 
  /* [15][0][][] */ 41,80,31,-5,38,-127,-72,4,-8,-65,-127,-76,-126,-84,-71,100, 
  /* [16][0][][] */ -49,13,11,35,-17,127,92,72,7,97,88,-26,70,82,43,-105, 
  /* [17][0][][] */ -43,-7,-30,-68,-49,54,48,121,11,127,63,64,3,54,55,22, 
  /* [18][0][][] */ -13,127,-44,-19,3,-14,50,-41,21,66,-19,33,19,-9,-10,-39, 
  /* [19][0][][] */ 13,-14,-2,76,35,114,30,-8,50,57,-51,15,-127,-28,9,-18, 
  /* [20][0][][] */ 77,-124,-10,-127,-54,14,64,-104,-97,10,-109,-72,27,29,30,39, 
  /* [21][0][][] */ 5,3,100,34,-86,80,50,25,-77,8,42,41,-77,127,-56,46, 
  /* [22][0][][] */ 29,-28,76,-51,57,-71,-47,115,-10,-104,2,63,12,127,32,37, 
  /* [23][0][][] */ -18,27,-79,29,-14,-119,-4,16,17,-56,-5,-34,-127,-53,-25,16, 
  /* [24][0][][] */ -1,-47,0,-29,17,-13,-45,-23,57,-2,65,66,-29,19,127,11, 
  /* [25][0][][] */ -127,-62,-42,51,-46,57,-3,12,29,-47,-111,-36,67,121,12,25, 
  /* [26][0][][] */ -1,24,29,-24,15,-4,-70,31,-101,-53,36,4,-60,-127,50,-84, 
  /* [27][0][][] */ -127,29,-46,5,10,-26,-15,-7,21,-44,105,8,-39,16,-14,-21, 
  /* [28][0][][] */ -18,16,18,16,-23,4,15,104,8,6,-36,-36,-127,0,-19,46, 
  /* [29][0][][] */ -3,50,52,-39,-7,-23,19,10,-127,4,-28,0,-35,25,-62,28, 
  /* [30][0][][] */ -24,25,-127,-29,1,-56,8,-5,5,-28,-17,-57,-47,-27,-19,14, 
  /* [31][0][][] */ 127,-93,-116,38,69,32,2,83,-47,40,1,-21,-14,4,-105,-11, 
  /* [32][0][][] */ -117,73,-42,57,54,22,22,61,22,11,127,-8,-54,6,-35,-35, 
  /* [33][0][][] */ 18,91,99,102,-127,17,74,-43,46,107,-37,59,40,-8,81,92, 
  /* [34][0][][] */ -71,-61,-48,-127,11,92,-36,-94,-16,-47,42,-114,8,-30,81,-99, 
  /* [35][0][][] */ 23,-47,44,48,86,-88,-3,-33,-94,37,-7,56,-17,127,-26,-52, 
  /* [36][0][][] */ -67,5,-11,-10,-21,-4,19,76,-34,50,127,-23,-25,-34,29,-8, 
  /* [37][0][][] */ -68,48,127,-42,-88,-18,64,2,-13,16,80,43,34,-44,111,-20, 
  /* [38][0][][] */ -27,17,-42,12,-14,-35,-80,0,-25,-42,102,-18,127,-4,13,6, 
  /* [39][0][][] */ 37,-48,1,-28,-96,-4,87,108,-92,16,2,-40,63,26,-6,127, 
  /* [40][0][][] */ 18,-27,-32,10,14,102,-31,-18,50,17,53,6,127,39,7,-60, 
  /* [41][0][][] */ -12,-33,-35,-127,34,16,-22,-92,-17,-11,38,-19,16,6,2,61, 
  /* [42][0][][] */ -18,12,1,127,-69,39,-75,-5,-16,-63,88,-115,-27,117,-19,-27, 
  /* [43][0][][] */ -13,19,-16,127,38,50,13,-56,-17,82,31,33,28,-36,93,-23, 
  /* [44][0][][] */ -11,-40,-127,-27,26,48,-52,60,-38,-83,13,-39,63,13,-43,34, 
  /* [45][0][][] */ 11,29,-40,-127,-51,-35,73,-14,-16,46,-51,31,21,-111,15,3, 
  /* [46][0][][] */ -13,21,19,-17,35,-33,-45,53,5,-42,-2,70,32,127,107,-26, 
  /* [47][0][][] */ 43,1,45,-9,-32,7,-24,83,-3,2,8,36,23,-127,46,42, 
  /* [48][0][][] */ -34,1,38,-113,-18,-31,-13,16,17,-127,-21,-6,42,53,2,80, 
  /* [49][0][][] */ 10,0,32,68,77,-12,22,55,-57,10,60,47,25,33,127,18, 
  /* [50][0][][] */ 14,-34,0,-9,17,74,12,-55,17,-26,127,6,126,53,-33,-36, 
  /* [51][0][][] */ 38,42,20,39,21,3,-12,-5,58,35,-3,127,1,18,33,-90, 
  /* [52][0][][] */ 14,16,49,-7,-4,10,18,-41,-55,15,-4,19,-8,33,-127,19, 
  /* [53][0][][] */ -3,-53,-9,-127,-21,-9,-34,-18,-52,-6,35,-17,-2,31,10,26, 
  /* [54][0][][] */ -13,10,-1,-64,-5,24,-42,-11,45,-48,-26,10,-7,127,27,42, 
  /* [55][0][][] */ -29,29,12,-14,10,47,-66,-127,63,-118,-28,-25,84,-52,6,-21, 
  /* [56][0][][] */ 37,13,3,38,-6,-22,33,127,-1,-15,8,-22,57,-28,-30,38, 
  /* [57][0][][] */ 45,4,127,-47,-71,-26,46,-7,28,31,-6,35,102,4,59,87, 
  /* [58][0][][] */ 62,92,13,97,-96,33,-35,78,-23,26,11,32,-127,-16,-12,-52, 
  /* [59][0][][] */ 112,14,-23,-21,-26,-22,-10,47,-37,-5,-127,-47,14,-12,28,53, 
  /* [60][0][][] */ -127,28,17,61,-32,2,52,59,50,28,26,7,-3,31,80,-68, 
  /* [61][0][][] */ -127,-65,30,-54,12,4,-84,-11,39,-86,107,76,8,-51,-71,-33, 
  /* [62][0][][] */ -102,-33,-127,79,48,104,29,63,55,-79,44,-18,-85,58,-117,56, 
  /* [63][0][][] */ -33,-3,127,-48,-126,-47,88,38,-45,-16,-22,43,-36,-87,77,114, 
  /* [64][0][][] */ -32,116,9,6,35,-6,29,-127,-19,42,82,-50,3,-68,-21,-2, 
  /* [65][0][][] */ -25,23,0,-59,87,57,-37,-127,-52,-89,14,-19,-5,-24,38,-12, 
  /* [66][0][][] */ -127,-13,-15,-5,-9,44,-12,-58,-63,-46,-31,73,78,8,90,57, 
  /* [67][0][][] */ 49,-33,-1,127,-65,6,22,93,26,33,-3,-55,-93,-103,-42,-32, 
  /* [68][0][][] */ 90,-96,-26,127,-24,6,37,32,-71,45,18,-46,-13,-11,-34,-76, 
  /* [69][0][][] */ 30,52,-6,84,18,-39,22,-38,23,127,-10,37,-35,-19,-22,-57, 
  /* [70][0][][] */ 55,-92,-64,-89,127,66,87,31,60,30,78,-13,11,39,97,63, 
  /* [71][0][][] */ -40,105,-9,64,17,-127,-13,115,39,-102,43,-13,-33,-58,-53,69, 
  /* [72][0][][] */ -127,-89,-76,53,51,42,-14,-7,-19,10,-49,9,97,21,-14,114, 
  /* [73][0][][] */ -57,-2,52,-4,-20,-49,-34,15,42,-52,19,-27,-12,127,-50,-14, 
  /* [74][0][][] */ 125,-43,-32,-58,27,-9,-5,-52,-65,2,-37,34,-127,32,-36,47, 
  /* [75][0][][] */ 6,14,-39,127,-43,14,24,0,-27,33,0,-33,13,7,13,-21, 
  /* [76][0][][] */ -10,-65,-58,39,3,32,-31,-127,12,-119,-12,45,11,-12,48,-43, 
  /* [77][0][][] */ 127,-62,-11,63,2,-49,-40,-31,55,-17,-14,12,73,34,-78,42, 
  /* [78][0][][] */ -24,-11,57,18,-4,-13,-40,23,78,-24,-23,-43,8,127,69,-13, 
  /* [79][0][][] */ 4,-14,35,23,76,63,-88,-92,11,-79,76,6,127,-28,-22,-61, 
  /* [80][0][][] */ -81,-71,-109,74,-5,72,97,-16,-125,52,-5,-57,50,-127,-27,-29, 
  /* [81][0][][] */ 72,23,-79,44,113,127,16,-22,-24,-61,22,-57,-13,-14,-60,-15, 
  /* [82][0][][] */ 37,127,30,-15,-89,-9,-76,-1,-69,-26,126,-37,-14,59,30,-9, 
  /* [83][0][][] */ 127,65,7,-39,-14,-34,2,33,36,-4,46,-36,-41,-30,-5,-39, 
  /* [84][0][][] */ 42,-46,-34,-118,-5,-57,-23,-119,-41,-127,-43,-23,-3,-10,23,80, 
  /* [85][0][][] */ 21,-50,-22,-68,-34,-43,105,127,-53,81,-16,-41,26,70,4,19, 
  /* [86][0][][] */ 127,-33,28,-22,-37,-79,-21,-50,-6,-76,-108,34,74,-20,-36,56, 
  /* [87][0][][] */ 4,55,16,-49,-3,21,-65,-35,-3,-13,2,-12,22,-127,-12,19, 
  /* [88][0][][] */ -64,19,-20,-30,19,48,-1,-127,23,-1,53,-34,-24,-26,37,-12, 
  /* [89][0][][] */ 21,-43,59,-127,-5,29,-89,42,10,-101,28,-40,-13,41,29,10, 
  /* [90][0][][] */ 51,-86,31,36,127,-73,22,-100,66,106,-25,62,35,-45,20,-66, 
  /* [91][0][][] */ 19,36,-39,-28,12,-127,-21,-15,-6,-16,-68,7,18,-23,-9,32, 
  /* [92][0][][] */ 125,30,102,120,67,79,-19,-6,-63,94,-127,-37,59,53,21,-4, 
  /* [93][0][][] */ 127,-67,-39,-42,-15,-54,7,21,-40,38,-102,29,44,26,15,74, 
  /* [94][0][][] */ 20,22,16,31,79,-41,-34,-3,27,-15,-25,53,19,127,-9,-23, 
  /* [95][0][][] */ -127,47,64,14,-20,56,12,4,14,-2,84,-2,-23,-3,-22,-12, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant19_scale = { 96, { 0.00055933598196133971, 0.0005739973857998848, 0.00052966264775022864, 0.0031069929245859385, 0.00067121715983375907, 0.00055581767810508609, 0.00069398712366819382, 0.0015722367679700255, 0.0017503021517768502, 0.00041142225381918252, 0.0013160387752577662, 0.0014663201291114092, 0.00096748699434101582, 0.00029633395024575293, 0.00062121712835505605, 0.00068270444171503186, 0.00052008969942107797, 0.00056074629537761211, 0.0010201211553066969, 0.00093846319941803813, 0.00088432832853868604, 0.00041570977191440761, 0.00070034159580245614, 0.00081163569120690227, 0.00078141794074326754, 0.0010645801667124033, 0.00070936110569164157, 0.00058308371808379889, 0.0011770972050726414, 0.0011217208812013268, 0.0010369005613029003, 0.0006300249369814992, 0.00037722068373113871, 0.00097456976072862744, 0.00070607272209599614, 0.0015547113725915551, 0.00043744235881604254, 0.00083810632349923253, 0.0015146186342462897, 0.00045366381527855992, 0.0012543314369395375, 0.00048043928109109402, 0.00051028979942202568, 0.00050362455658614635, 0.00072610663482919335, 0.00086378824198618531, 0.00072038237703964114, 0.00064492953242734075, 0.00069185334723442793, 0.00089601066429167986, 0.001329201040789485, 0.0022255976218730211, 0.00092988769756630063, 0.00068330945214256644, 0.00084167404565960169, 0.00033827722654677927, 0.0016558730276301503, 0.00074301485437899828, 0.0006663493113592267, 0.0010127286659553647, 0.00029057177016511559, 0.00065482716308906674, 0.00093648902839049697, 0.00054870528401806951, 0.00078447710257023573, 0.00068835844285786152, 0.00087525538401678205, 0.0010461283382028341, 0.00046885799383744597, 0.00051986071048304439, 0.00095095392316579819, 0.0011327087413519621, 0.00072239578003063798, 0.00148745346814394, 0.00070077477721497416, 0.0012359890388324857, 0.0002677653101272881, 0.00097280711634084582, 0.00040554924635216594, 0.00095697276992723346, 0.00059562112437561154, 0.0013465947704389691, 0.00060435576597228646, 0.0013842572225257754, 0.00039843135164119303, 0.00070985057391226292, 0.000451880187029019, 0.0010094213066622615, 0.00070362980477511883, 0.00098589155822992325, 0.00044156133662909269, 0.0012102721957489848, 0.00047831688425503671, 0.0004194329958409071, 0.001499803620390594, 0.00067364086862653494, } };
const TfArray<96, int> quant19_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data20[16] = { -29255, -9344, 7419, -10737, 8704, -8060, -20424, -35110, 9626, 22482, 35754, -55, 6735, -19268, 47760, -23775, };
const TfArray<1, int> tensor_dimension20 = { 1, { 16 } };
const TfArray<16, float> quant20_scale = { 16, { 0.00073312065796926618, 0.00066103279823437333, 0.00084908684948459268, 0.00089111103443428874, 0.00079038715921342373, 0.00076982320751994848, 0.00069063104456290603, 0.00054983439622446895, 0.00057219516020268202, 0.00046060874592512846, 0.00063629890792071819, 0.00067320209927856922, 0.00097627850482240319, 0.0013674302026629448, 0.00038933561882004142, 0.00048574662650935352, } };
const TfArray<16, int> quant20_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data21[16*1*1*48] = { 
  /* [0][0][][] */ 1,-3,-19,5,4,-9,-17,77,-20,5,10,-8,9,-22,-9,8,2,-21,-7,-6,47,14,9,104,4,91,-14,-15,39,-10,30,-9,-4,30,25,-46,25,47,3,-17,-93,-25,21,41,30,5,-127,-42, 
  /* [1][0][][] */ -45,-17,34,21,-36,30,-2,56,-49,-38,25,-49,-37,-19,-27,-20,-34,105,-4,19,19,22,-28,-26,15,-28,24,50,-17,-87,-38,6,-26,-9,45,-8,3,-61,23,7,-29,-17,127,-7,-3,-6,20,-21, 
  /* [2][0][][] */ -36,-13,-10,-31,7,-64,6,-12,-11,9,23,36,25,0,-8,16,-8,-10,-21,-9,-5,0,8,-127,-4,59,-5,-3,15,-27,-13,-33,-9,60,4,1,10,-9,27,3,-36,-4,-22,-13,-5,-32,33,22, 
  /* [3][0][][] */ -18,49,-7,-23,3,12,-5,1,-14,-7,7,53,-127,5,6,5,-4,11,-21,-13,-32,11,5,19,1,-20,16,13,-18,24,1,34,1,11,21,15,-15,19,48,13,19,6,39,-35,7,2,17,21, 
  /* [4][0][][] */ 34,-9,13,6,-8,27,6,-29,-26,-8,-8,-14,-11,14,25,13,21,-18,-71,5,-15,-12,23,60,3,-40,21,35,-5,-55,26,30,17,-33,39,-127,1,38,-11,28,-17,15,23,-10,12,6,22,18, 
  /* [5][0][][] */ 28,1,-14,61,2,17,25,22,23,-13,34,23,4,41,20,-12,-8,29,29,18,31,20,4,-35,11,-57,3,-21,15,-1,6,12,93,-127,3,30,-21,-17,-10,8,-89,63,25,-5,-9,-5,-78,-9, 
  /* [6][0][][] */ 32,2,2,4,-21,0,-1,-7,4,20,-1,14,-24,13,-3,-6,5,-19,127,-10,10,9,7,-38,-8,17,24,-5,-9,3,14,1,1,-14,34,-42,8,-49,83,8,-2,1,-17,-9,-12,1,-6,-21, 
  /* [7][0][][] */ -65,-34,0,50,-10,69,-2,40,-25,46,3,127,92,-11,-11,-8,5,-14,7,-46,-30,-18,0,78,-33,-47,-56,-29,-3,-29,-35,-40,-28,16,-35,12,11,-74,103,-6,39,10,-91,-54,22,-39,0,-11, 
  /* [8][0][][] */ -22,-30,20,-8,-25,3,-6,11,1,-95,3,20,44,12,44,-2,-8,50,-17,27,-48,28,14,-24,19,0,28,40,6,106,4,35,6,18,-2,-125,-101,74,8,37,14,-14,127,-6,42,50,17,48, 
  /* [9][0][][] */ -24,21,-29,18,-3,-30,-10,-4,48,-37,-1,59,-78,9,18,-8,-15,1,-56,-4,53,-19,-10,-21,-22,4,61,-19,25,21,0,33,-2,13,106,-125,10,-127,-90,29,-41,32,46,-5,15,17,-37,-39, 
  /* [10][0][][] */ -27,3,-36,-127,36,98,19,-30,-9,35,28,19,52,-49,-25,21,36,-31,68,-23,55,-36,59,42,-65,-124,-4,-39,61,35,24,-27,-25,-72,21,-3,24,-44,-2,-23,-37,-58,-7,8,10,39,35,-45, 
  /* [11][0][][] */ 4,55,4,59,33,-68,-106,-11,-3,41,-3,-3,0,45,6,-79,30,49,8,9,-52,-81,13,3,29,-53,22,-42,39,-39,34,-88,40,-8,-20,-86,89,24,-8,-127,10,37,108,-43,7,-54,46,52, 
  /* [12][0][][] */ 127,0,0,-9,12,16,2,59,5,-8,-51,-18,-3,21,2,11,-10,-7,-6,-13,-7,-10,-1,11,0,6,7,5,-1,15,-7,11,2,-52,-2,-2,-23,22,-30,3,-18,-63,10,-95,-20,2,60,6, 
  /* [13][0][][] */ 15,4,1,-2,2,-9,-8,-12,0,17,4,15,-5,-1,5,-6,0,-3,4,3,5,-9,19,-9,-2,-5,18,127,3,-1,16,3,12,-6,-38,15,11,8,7,-15,-11,4,-4,4,2,1,-5,-7, 
  /* [14][0][][] */ 81,-50,64,-94,39,28,59,-111,-57,-49,-14,103,-56,-16,75,3,69,7,-45,67,35,68,77,-14,39,57,-41,-103,60,-46,77,34,11,54,-127,-52,-33,55,64,-3,-63,7,44,-14,10,-39,10,-43, 
  /* [15][0][][] */ 14,-57,-49,-35,35,3,97,-61,-25,10,-22,-43,84,24,-82,52,51,67,77,-88,-110,-15,45,-2,-86,40,26,39,46,35,21,-71,-11,69,76,127,-41,-80,-13,-48,91,42,108,-39,3,-52,-39,66, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant21_scale = { 16, { 0.031157627701759338, 0.028093893080949783, 0.036086190491914749, 0.03787221759557724, 0.033591452986001968, 0.032717484980821609, 0.029351819306612015, 0.023367961868643761, 0.024318292737007141, 0.019575871527194977, 0.027042701840400696, 0.028611088171601295, 0.041491836309432983, 0.058115780353546143, 0.016546763479709625, 0.020644230768084526, } };
const TfArray<16, int> quant21_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data22[48] = { -1224, 40768, -1157, 44388, 2030, 127116, -1074, 45804, 5508, 32315, 28170, 4287, -1571, 28334, 663, -1785, -77, -991, -938, -2696, -1647, -4056, -1352, -22806, -3905, 42397, 130375, 103083, 3683, 5796, -1436, -1771, 29611, -404, 34147, 9421, 65957, 5502, 49501, 8112, -1197, 81589, -2001, 3892, 48447, -457, 2123, 59974, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 8.9544817456044257e-05, 4.3782707507489249e-05, 0.0001541540987091139, 5.1311344577698037e-05, 0.00012554285058286041, 6.3613719248678535e-05, 0.00020837799820583314, 0.00012536704889498651, 6.2003156926948577e-05, 5.0280890718568116e-05, 5.46520714124199e-05, 8.0551893915981054e-05, 4.5967190089868382e-05, 3.233522511436604e-05, 0.00015904426982160658, 0.00019432802218943834, 0.00021334293705876917, 6.9536145019810647e-05, 0.00015120605530682951, 0.00012959077139385045, 0.00011211843957426026, 0.00010438852768857032, 0.00011661682947305962, 0.00014415064651984721, 9.4270741101354361e-05, 0.00010646878945408389, 1.8780139726004563e-05, 6.9253219407983124e-05, 0.00013526809925679117, 8.914810314308852e-05, 0.00011671656102407724, 9.8280259408056736e-05, 6.4030507928691804e-05, 0.00014478170487564057, 2.7853642677655444e-05, 4.5423039409797639e-05, 8.7366170191671699e-05, 7.4066811066586524e-05, 0.00011615807306952775, 6.0131642385385931e-05, 0.00013967267295811325, 7.1244605351239443e-05, 8.280701149487868e-05, 8.1781101471278816e-05, 2.7374162527848966e-05, 0.00016699668776709586, 9.5592207799199969e-05, 3.130997356493026e-05, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ 80,-94,98,67,57,-34,107,-66,62,-88,-84,53,51,-41,-74,-90,89,73,49,79,66,-71,-83,51,-34,-40,-64,-73,-71,56,-63,-111,-4,39,78,68,-64,59,-53,-25,51,-77,63,62,-88,9,73,-40, 84,-97,127,84,-82,-67,-56,-83,104,-96,-62,76,84,-103,-92,95,-38,95,79,127,84,-110,55,69,-51,-72,-74,-85,60,82,-35,-127,-93,79,90,89,-89,84,-81,-18,73,-98,84,88,-74,-127,90,-112, 37,-44,61,32,26,-39,-49,-45,37,-27,7,31,30,-69,-57,-3,-53,31,32,64,31,-51,35,25,-28,-51,-49,-26,34,36,88,-89,-89,47,36,40,-32,36,-36,-12,40,-45,42,41,-3,-10,40,-76, 
  /* [0][1][][] */ 101,-110,-43,94,56,-88,127,-90,88,-108,-66,84,81,-104,-10,-127,127,101,67,-40,88,106,-127,71,72,-77,-97,-98,-127,83,-72,-5,-95,74,109,100,-90,74,-83,87,79,-109,93,92,-87,106,96,-99, 127,-127,-65,127,-127,-127,-91,-127,127,-127,-127,127,127,-127,-20,98,-61,127,127,-51,127,127,67,127,127,-127,-127,-127,54,127,-31,22,-127,127,127,127,-127,127,-127,127,127,-127,127,127,-127,-10,127,-127, 66,-69,-37,61,43,-62,-49,-67,54,-36,-59,56,46,-56,-22,9,-62,50,55,-30,55,65,47,64,66,-62,-60,-45,40,58,127,15,-70,71,44,50,-49,53,-68,55,58,-59,51,61,-58,-69,62,-51, 
  /* [0][2][][] */ 55,-49,-56,52,27,-51,65,-44,44,-77,-3,44,54,-66,81,-88,77,48,36,-33,34,-7,-77,33,-28,-43,-49,-48,-78,31,-47,93,-76,40,53,42,-26,41,-49,-93,53,-54,43,42,-16,18,44,-82, 82,-72,-47,79,-57,-65,-71,-69,51,-77,-66,64,76,-42,127,31,-45,62,58,-46,51,-14,44,66,-46,-65,-81,-57,34,59,-35,121,-54,66,62,57,-51,56,-76,-109,67,-73,60,64,-83,52,64,-47, 38,-41,-26,54,33,-20,-15,-36,18,-28,-50,31,32,3,63,22,-34,18,28,-30,32,0,42,40,-24,-34,-54,-21,37,33,66,66,-4,34,19,16,-22,30,-36,-58,29,-34,30,30,-54,9,34,-7, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.003805654589086771, 0.001860765041783452, 0.0065515488386154175, 0.0021807320881634951, 0.0053355707786977291, 0.0027035828679800034, 0.0088560646399855614, 0.0053280992433428764, 0.0026351341512054205, 0.0021369378082454205, 0.0023227129131555557, 0.0034234554041177034, 0.0019536055624485016, 0.0013742470182478428, 0.0067593813873827457, 0.008258940652012825, 0.0090670743957161903, 0.0029552860651165247, 0.0064262570813298225, 0.0055076074786484241, 0.0047650337219238281, 0.0044365124776959419, 0.0049562151543796062, 0.0061264024116098881, 0.004006506409496069, 0.0045249233953654766, 0.00079815596109256148, 0.0029432617593556643, 0.005748894065618515, 0.003788794158026576, 0.0049604536034166813, 0.0041769109666347504, 0.0027212966233491898, 0.0061532221734523773, 0.0011837797937914729, 0.0019304791931062937, 0.0037130622658878565, 0.0031478393357247114, 0.0049367179162800312, 0.0025555947795510292, 0.0059360885061323643, 0.0030278956983238459, 0.0035192978102713823, 0.0034756967797875404, 0.0011634018737822771, 0.0070973592810332775, 0.0040626688860356808, 0.0013306739274412394, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data24[48] = { 954, 1271, 2250, 316, 13470, 20641, 3568, -640, -1347, -544, 1456, 981, 3906, 1286, 30235, 6663, 2006, -1969, -381, 4582, -1803, 14365, 10373, 16536, 6578, 293, 6311, 7430, 11485, -619, 9911, 5685, 793, -148, 6395, 5263, -2078, -22, -938, 4601, 1000, -301, -619, 327, 1789, 6871, 625, 1053, };
const TfArray<1, int> tensor_dimension24 = { 1, { 48 } };
const TfArray<48, float> quant24_scale = { 48, { 0.00027696156757883728, 0.00064626551466062665, 0.00021557378931902349, 0.00028075114823877811, 0.00017134075460489839, 0.00019525442621670663, 0.00030647654784843326, 0.00019485794473439455, 0.00020891825261060148, 0.00077525409869849682, 0.00071012787520885468, 0.00028290521004237235, 0.00033209484536200762, 0.00059624237474054098, 0.00011997613910352811, 0.00019853071717079729, 0.00023282093752641231, 0.00023445118858944625, 0.00019992777379229665, 0.00019729728228412569, 0.00031551488791592419, 0.00017754084547050297, 0.00034287112066522241, 9.8841701401397586e-05, 0.0002348780253669247, 0.00027596592553891242, 0.0010972797172144055, 0.0002598584396764636, 0.00015395948139484972, 0.0003901995369233191, 0.00026508959126658738, 0.0001780796010280028, 0.00061232864391058683, 0.00019328387861605734, 0.00058049208018928766, 0.00033554268884472549, 0.00064576347358524799, 0.00038761415635235608, 0.00020756220328621566, 0.00041503025568090379, 0.00015273400640580803, 0.00026249539223499596, 0.00033197258017025888, 0.0002804500691127032, 0.0011067930608987808, 0.00020213711832184345, 0.0002844075788743794, 0.0011470486642792821, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ -127,28,8,76,-20,40,25,-45, 
  /* [1][0][][] */ 6,74,58,57,-6,18,116,127, 
  /* [2][0][][] */ -63,8,16,-11,-127,31,-10,30, 
  /* [3][0][][] */ 74,-21,-23,-127,-77,33,15,-23, 
  /* [4][0][][] */ -127,57,16,-13,61,3,34,69, 
  /* [5][0][][] */ -96,-31,44,-48,-127,3,14,68, 
  /* [6][0][][] */ 45,-127,50,-56,-19,-45,2,69, 
  /* [7][0][][] */ -47,-16,8,105,127,-45,-28,-3, 
  /* [8][0][][] */ 71,3,23,-127,3,-32,-95,-83, 
  /* [9][0][][] */ -5,-127,15,-9,1,43,-78,66, 
  /* [10][0][][] */ -127,3,36,47,-103,52,15,-28, 
  /* [11][0][][] */ 127,29,44,34,-60,-56,-17,-96, 
  /* [12][0][][] */ -4,20,30,-2,17,-75,127,83, 
  /* [13][0][][] */ 89,-54,-45,-24,96,105,127,-10, 
  /* [14][0][][] */ 127,-5,-16,-26,-53,19,-51,-43, 
  /* [15][0][][] */ -22,-127,-33,-1,26,-58,39,108, 
  /* [16][0][][] */ -18,-25,10,26,-127,13,5,5, 
  /* [17][0][][] */ -27,123,-124,9,48,-127,75,-72, 
  /* [18][0][][] */ 127,-13,-68,24,-101,34,13,100, 
  /* [19][0][][] */ 127,-25,-45,-8,98,56,10,-50, 
  /* [20][0][][] */ 121,-1,-6,127,-13,46,3,-48, 
  /* [21][0][][] */ 65,16,-127,-10,-52,102,-123,-56, 
  /* [22][0][][] */ -127,13,34,-39,-5,1,-52,-25, 
  /* [23][0][][] */ -66,-73,-13,21,-127,85,66,-11, 
  /* [24][0][][] */ 127,-47,8,-22,-58,31,-53,-37, 
  /* [25][0][][] */ 20,4,-11,-7,127,37,39,-26, 
  /* [26][0][][] */ -1,-127,-3,-20,24,-101,52,-51, 
  /* [27][0][][] */ -4,-127,17,-9,-14,-55,34,-9, 
  /* [28][0][][] */ -127,64,-59,-82,26,-4,93,102, 
  /* [29][0][][] */ -17,43,10,-9,-3,39,-82,-127, 
  /* [30][0][][] */ 127,1,3,-25,-16,-19,-45,-40, 
  /* [31][0][][] */ -33,-92,84,52,16,-127,108,82, 
  /* [32][0][][] */ -23,10,28,-9,-127,-90,-107,22, 
  /* [33][0][][] */ -47,35,-1,30,-127,-84,-39,50, 
  /* [34][0][][] */ 25,-127,49,-20,-21,75,-108,32, 
  /* [35][0][][] */ -12,-38,-127,-18,-7,-83,56,-52, 
  /* [36][0][][] */ -11,127,46,28,-10,22,-29,-37, 
  /* [37][0][][] */ -127,9,41,-20,47,-27,8,-71, 
  /* [38][0][][] */ -127,-17,-37,3,47,9,36,89, 
  /* [39][0][][] */ 0,38,29,14,14,-66,127,12, 
  /* [40][0][][] */ -39,-1,-25,-65,-127,100,114,-9, 
  /* [41][0][][] */ -127,47,13,-50,-68,-52,-86,18, 
  /* [42][0][][] */ -42,-127,-85,-23,-19,74,-115,-67, 
  /* [43][0][][] */ -53,18,-26,-127,44,44,43,-14, 
  /* [44][0][][] */ 100,25,32,-127,60,-18,-51,-7, 
  /* [45][0][][] */ -71,-69,0,24,-33,-127,111,16, 
  /* [46][0][][] */ 91,2,-3,-3,127,-34,-21,12, 
  /* [47][0][][] */ 75,-5,-28,127,-7,35,-5,-55, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.00060563313309103251, 0.0014131917851045728, 0.00047139619709923863, 0.00061391986673697829, 0.00037467162474058568, 0.00042696375749073923, 0.00067017367109656334, 0.00042609678348526359, 0.00045684250653721392, 0.0016952517908066511, 0.0015528398798778653, 0.0006186301470734179, 0.00072619336424395442, 0.0013038059696555138, 0.00026235237601213157, 0.00043412804370746017, 0.00050911062862724066, 0.00051267549861222506, 0.00043718298547901213, 0.00043143087532371283, 0.00068993784952908754, 0.00038822938222438097, 0.000749757862649858, 0.00021613760327454656, 0.00051360885845497251, 0.00060345599194988608, 0.0023994266521185637, 0.00056823366321623325, 0.00033666391391307116, 0.00085325114196166396, 0.00057967263273894787, 0.00038940750528126955, 0.0013389819068834186, 0.00042265476076863706, 0.0012693647295236588, 0.0007337327697314322, 0.0014120939886197448, 0.00084759766468778253, 0.00045387723366729915, 0.00090754858683794737, 0.0003339841787237674, 0.00057399988872930408, 0.00072592601645737886, 0.00061326147988438606, 0.0024202296044677496, 0.00044201419223099947, 0.000621915387455374, 0.002508256584405899, } };
const TfArray<48, int> quant25_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data26[8] = { -28218, 32457, -16728, -9666, 12145, 4392, 45168, 55648, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 0.00055472867097705603, 0.00070008402690291405, 0.0014700782485306263, 0.0014875633642077446, 0.00073513545794412494, 0.00048988661728799343, 0.00045082363067194819, 0.00083337252726778388, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ -64,-4,-57,24,-10,-19,13,20,-49,74,-56,110,102,-6,127,-17,26,-56,-16,-15,-16,0,0,-36,24,-106,-4,87,-5,2,35,-30,30,-47,50,-11,3,-23,-22,-17,89,-4,50,-44,-28,20,-35,26, 
  /* [1][0][][] */ 4,31,113,22,-12,-17,-5,-66,39,-11,44,-2,-13,19,-18,-127,-2,-66,-3,12,-10,62,7,-25,-16,-4,14,-19,-13,-3,-2,-9,-17,7,18,27,-6,-43,62,-50,-3,37,-19,45,12,-11,10,-12, 
  /* [2][0][][] */ 10,-47,13,-61,25,26,19,-19,16,4,12,15,8,68,3,0,-24,127,-13,-27,-2,28,-45,0,120,-9,-3,-6,-45,11,25,-46,-5,-7,16,2,-11,-8,-3,18,5,-23,-13,8,8,13,-30,-70, 
  /* [3][0][][] */ -5,-89,-1,8,3,-31,-13,-5,-1,-11,19,13,5,-7,43,3,2,-18,-13,0,23,16,-22,2,5,51,-4,26,-25,2,127,5,5,0,7,13,-22,-25,-10,6,-6,15,-18,22,-1,-14,-9,34, 
  /* [4][0][][] */ -92,4,20,-14,-4,-18,-17,-10,44,-60,23,15,-28,-16,-2,-21,34,8,2,48,21,-23,42,17,-7,34,8,109,15,19,10,-34,17,-127,-29,23,6,22,8,0,-45,14,3,8,-86,26,11,-3, 
  /* [5][0][][] */ -9,58,19,-7,-47,40,-8,54,52,3,20,14,4,-29,-54,37,-32,-113,11,11,75,-27,-11,46,12,12,-57,-63,-56,-18,19,6,15,-38,17,-89,65,10,-42,44,-13,-23,-23,16,127,7,-62,-13, 
  /* [6][0][][] */ -58,-22,-23,4,42,-21,18,-37,-8,-28,45,-38,-31,26,-8,-67,18,-32,-4,-23,-34,33,14,-102,1,-27,-82,-63,52,26,0,17,23,-67,-46,97,-84,-55,11,-67,14,13,22,46,127,-44,69,17, 
  /* [7][0][][] */ 16,33,-119,18,-46,22,8,71,-5,-25,89,-57,8,-50,-30,-5,-12,-127,54,-29,73,24,14,-56,-2,-38,33,-9,-22,11,-22,4,11,32,-18,2,-2,-80,-64,-56,7,-28,34,83,-31,-19,-14,-3, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.023575969040393829, 0.029753571376204491, 0.062478326261043549, 0.063221439719200134, 0.031243255361914635, 0.02082018181681633, 0.019160004332661629, 0.035418331623077393, } };
const TfArray<8, int> quant27_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data28[48] = { -49364, 214, 11597, -851, 6197, -4684, 2538, 42837, 1232, 43041, -1264, 27075, -8589, -1066, 26755, 6275, -733, 19353, 37051, 11198, 1485, -1726, -1643, 16522, -8681, 23844, 48444, 31734, 2848, 2689, -2847, -198, 2260, 16326, -7703, 21088, -12766, 10520, -22000, 137849, 34416, 20675, 11285, -1615, 16364, 2766, 1281, 809, };
const TfArray<1, int> tensor_dimension28 = { 1, { 48 } };
const TfArray<48, float> quant28_scale = { 48, { 0.00032275239937007427, 0.00024768445291556418, 0.00015741566312499344, 0.00027700336067937315, 0.0001224652660312131, 8.3379949501249939e-05, 0.00059614644851535559, 8.1398196925874799e-05, 0.00011871651076944545, 0.00012084161426173523, 0.00010062021465273574, 0.00015813879144843668, 0.00022976277978159487, 0.00021581852342933416, 9.8395888926461339e-05, 0.00026820393395610154, 0.00017273043340537697, 0.0002124840539181605, 6.3744904764462262e-05, 0.00013381933968048543, 0.00017816040781326592, 0.00014756963355466723, 0.00016539808711968362, 0.00012630775745492429, 0.00014586563338525593, 0.000152827866259031, 0.00055383035214617848, 0.00010182116238866001, 0.00026754982536658645, 0.00031507242238149047, 0.00012396649981383234, 0.00015758407243993133, 0.00047617193195037544, 0.0001622453419258818, 0.00013812693941872567, 0.00012125811190344393, 0.00026397578767500818, 0.00020376428437884897, 0.00027334748301655054, 1.8969416487379931e-05, 8.9460794697515666e-05, 5.8142759371548891e-05, 0.00015213206643238664, 0.00015675528266001493, 0.0001519344950793311, 8.6432955868076533e-05, 0.00026926194550469518, 0.00010326974006602541, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ 4,-3,19,113,2,84,-3,26,13,4,9,9,-4,-7,-49,6,1,8,-22,-113,-11,-23,127,-10,-1,4,-6,11,-4,4,15,100,18,29,37,-27,3,35,-3,1,20,-68,-5,-12,17,2,-7,-10, 127,8,13,-127,28,91,9,9,119,127,7,44,-44,-23,6,7,127,-57,-63,-54,-107,25,-109,14,19,70,-31,-84,23,20,8,-119,2,-60,127,10,-37,-47,-6,114,-75,-99,-28,1,-40,-8,-127,26, -34,-3,5,17,0,67,3,16,24,7,-15,32,-10,-3,17,3,-101,28,-3,80,-37,-9,-16,-7,-4,-63,-6,33,-18,4,8,-20,6,-22,13,-18,2,49,40,-14,52,38,-14,12,-47,4,-3,-9, 
  /* [0][1][][] */ 120,7,0,-98,12,-24,31,-17,5,7,-13,56,-4,1,15,-35,2,-51,-66,-85,7,-70,-122,-18,7,98,-13,-127,-6,31,14,-102,14,-49,-1,127,-1,60,-40,48,-59,-127,41,-90,-49,-15,-12,-6, 23,-127,-127,117,-127,-127,-127,-127,-127,-99,127,-127,127,127,33,-127,-81,127,127,-112,127,127,113,127,127,-127,-127,32,-127,-127,92,127,-127,127,-28,-40,127,-127,127,127,127,-73,127,127,127,-121,102,108, 50,7,47,-13,5,-60,42,19,-27,13,-105,-7,2,-39,127,5,61,-67,-76,83,11,-44,11,-34,3,2,-38,72,23,38,4,6,29,-41,7,67,-3,68,67,-10,-79,12,-82,-30,25,-16,-11,5, 
  /* [0][2][][] */ -57,-6,26,-19,6,32,-39,24,6,-24,13,35,9,-4,-39,18,8,21,-18,105,2,-31,-12,-12,-2,22,-1,56,-7,2,48,-28,-19,-41,-30,-38,-3,33,9,-19,11,-2,42,-39,-36,19,-9,20, 64,124,75,21,17,-24,120,37,14,-4,44,27,-3,-1,-90,25,-55,-57,-40,123,-41,49,16,19,30,-60,-40,33,80,0,127,25,82,-24,8,-34,-27,-16,-10,119,-26,-8,-40,44,18,-31,9,-127, -46,-4,7,-4,5,-8,-62,9,-21,-12,-39,-40,23,-8,-9,12,34,23,-10,-127,21,-10,6,-9,-6,9,-13,-51,-12,7,8,8,-22,86,-38,-21,-6,38,25,-60,5,12,-36,8,-45,127,-4,-2, 
};
const TfArray<4, int> tensor_dimension29 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant29_scale = { 48, { 0.013716977089643478, 0.010526589117944241, 0.0066901654936373234, 0.011772642843425274, 0.0052047735080122948, 0.0035436477046459913, 0.025336222723126411, 0.0034594233147799969, 0.0050454516895115376, 0.0051357685588300228, 0.0042763589881360531, 0.0067208986729383469, 0.0097649181261658669, 0.0091722868382930756, 0.0041818250901997089, 0.011398667469620705, 0.0073410435579717159, 0.0090305721387267113, 0.0027091584634035826, 0.0056873220019042492, 0.0075718173757195473, 0.0062717092223465443, 0.007029418833553791, 0.005368079524487257, 0.0061992891132831573, 0.0064951842650771141, 0.023537788540124893, 0.0043273991905152798, 0.011370867490768433, 0.013390577398240566, 0.0052685760892927647, 0.0066973231732845306, 0.020237306132912636, 0.0068954271264374256, 0.0058703948743641376, 0.0051534697413444519, 0.011218970641493797, 0.0086599821224808693, 0.01161726750433445, 0.00080620020162314177, 0.0038020836655050516, 0.0024710672441869974, 0.0064656129106879234, 0.0066620996221899986, 0.0064572161063551903, 0.0036734004970639944, 0.011443632654845715, 0.0043889638036489487, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data30[48] = { 185168, 9738, 6185, 8177, 3209, 20207, -2682, -296, 1357, 2878, 2887, 308, 2698, -1535, 734, -2359, 5074, 13018, -377, 28704, 7116, 3746, 8617, -524, 5077, 5031, 53605, 10209, -177, -3110, -132, 2306, -1829, 11916, 4429, 7209, 13762, 5256, 21458, 2304, -1032, 2889, 1822, 3196, 4767, 4129, -3048, 3393, };
const TfArray<1, int> tensor_dimension30 = { 1, { 48 } };
const TfArray<48, float> quant30_scale = { 48, { 2.3953060008352622e-05, 0.00022222709958441556, 0.00024111740640364587, 0.00039367095450870693, 0.00071969605050981045, 0.00024920990108512342, 0.00074744020821526647, 0.00095080264145508409, 0.00043910997919738293, 0.00041049590799957514, 0.00075106602162122726, 0.00042929835035465658, 0.00036693559377454221, 0.00032389548141509295, 0.00054216303396970034, 0.0015570471296086907, 0.00032141440897248685, 0.00032826286042109132, 0.0014001044910401106, 9.3124144768808037e-05, 0.00018194381846114993, 0.00026058006915263832, 0.00047315712436102331, 0.00087283831089735031, 0.00024312837922479957, 0.00022162676032166928, 7.8960161772556603e-05, 0.00036443723365664482, 0.000504655996337533, 0.00083675567293539643, 0.00045585108455270529, 0.00028973570442758501, 0.0010179356904700398, 0.0001865530211944133, 0.00024810686591081321, 0.0002420624514343217, 0.00027543952455744147, 0.00024836300872266293, 0.00010749474313342944, 0.0019521709764376283, 0.00061297242064028978, 0.00098580156918615103, 0.00030905683524906635, 0.00047129185986705124, 0.00024764874251559377, 0.00024978513829410076, 0.00037056059227325022, 0.00081160402623936534, } };
const TfArray<48, int> quant30_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ 24,17,19,-5,127,44,-49,-46, 
  /* [1][0][][] */ -52,-9,-19,127,-1,-25,-1,44, 
  /* [2][0][][] */ 49,-127,-34,56,-9,-42,59,-22, 
  /* [3][0][][] */ 127,-31,-9,3,-46,-63,48,49, 
  /* [4][0][][] */ 49,-39,127,-29,-13,-66,7,-124, 
  /* [5][0][][] */ 74,56,-15,-15,127,92,-35,-89, 
  /* [6][0][][] */ 16,65,-106,117,36,127,-55,-77, 
  /* [7][0][][] */ -36,127,-7,23,13,-26,3,-6, 
  /* [8][0][][] */ 127,32,26,11,-8,12,-43,-57, 
  /* [9][0][][] */ -127,34,-41,39,81,-20,32,3, 
  /* [10][0][][] */ -24,18,43,127,7,4,-12,-28, 
  /* [11][0][][] */ -101,25,-20,-127,63,-15,-3,-90, 
  /* [12][0][][] */ 127,63,-32,-1,-37,35,-19,-73, 
  /* [13][0][][] */ -13,44,-125,9,84,127,-108,48, 
  /* [14][0][][] */ -29,-9,21,127,1,7,7,-9, 
  /* [15][0][][] */ -9,127,7,1,-11,-19,11,-58, 
  /* [16][0][][] */ 45,-61,-53,41,-4,-77,127,-62, 
  /* [17][0][][] */ 5,127,-10,-8,5,33,-79,-15, 
  /* [18][0][][] */ -5,45,-127,2,18,70,-14,82, 
  /* [19][0][][] */ -96,9,23,24,-127,-10,0,26, 
  /* [20][0][][] */ -127,6,8,23,70,-33,93,-10, 
  /* [21][0][][] */ -104,-22,-29,-39,-127,33,-13,9, 
  /* [22][0][][] */ -127,35,14,0,66,-36,6,73, 
  /* [23][0][][] */ -15,-7,-7,-1,-6,67,-127,-94, 
  /* [24][0][][] */ -23,25,-127,-17,11,56,-36,59, 
  /* [25][0][][] */ 64,-7,-30,127,-115,-11,-24,-86, 
  /* [26][0][][] */ 12,-24,-16,-11,-22,116,127,-30, 
  /* [27][0][][] */ 32,1,14,44,127,10,17,0, 
  /* [28][0][][] */ -32,127,-13,-26,9,66,-75,72, 
  /* [29][0][][] */ -33,0,16,-38,1,94,-127,-72, 
  /* [30][0][][] */ 4,-2,3,-127,-11,9,-14,-22, 
  /* [31][0][][] */ -127,26,41,98,-73,48,39,-38, 
  /* [32][0][][] */ -7,49,-1,-127,-54,13,-32,-46, 
  /* [33][0][][] */ -78,-15,4,-16,-127,32,51,-8, 
  /* [34][0][][] */ -127,66,-54,-3,53,-25,36,24, 
  /* [35][0][][] */ -52,112,-75,-38,34,-127,91,30, 
  /* [36][0][][] */ 46,70,-1,-42,21,127,-113,-60, 
  /* [37][0][][] */ 35,-127,-9,26,59,-64,104,-2, 
  /* [38][0][][] */ -40,-127,18,37,43,97,-56,54, 
  /* [39][0][][] */ 2,-127,-6,-8,1,-21,-38,-88, 
  /* [40][0][][] */ 102,-1,40,11,11,35,-127,-44, 
  /* [41][0][][] */ 12,-127,0,-13,-17,90,-67,96, 
  /* [42][0][][] */ 36,8,-16,-127,-84,24,23,-50, 
  /* [43][0][][] */ -65,6,-10,-127,36,7,-1,-40, 
  /* [44][0][][] */ -14,-39,-30,-4,-28,52,127,-19, 
  /* [45][0][][] */ -127,-35,-43,-28,28,-64,102,11, 
  /* [46][0][][] */ 83,127,110,16,61,60,-26,-19, 
  /* [47][0][][] */ 23,33,6,127,-28,-48,7,1, 
};
const TfArray<4, int> tensor_dimension31 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant31_scale = { 48, { 6.7366498115006834e-05, 0.00062499998603016138, 0.00067812780616804957, 0.0011071752524003386, 0.0020241006277501583, 0.00070088740903884172, 0.0021021293941885233, 0.0026740736793726683, 0.001234969706274569, 0.0011544943554326892, 0.0021123266778886318, 0.0012073750840499997, 0.0010319836437702179, 0.00091093603987246752, 0.001524799969047308, 0.0043790987692773342, 0.00090395816368982196, 0.0009232189622707665, 0.003937707282602787, 0.00026190589414909482, 0.00051170575898140669, 0.00073286530096083879, 0.0013307251501828432, 0.002454803790897131, 0.00068378355354070663, 0.00062331155641004443, 0.00022207057918421924, 0.0010249571641907096, 0.0014193137176334858, 0.0023533236235380173, 0.0012820529518648982, 0.00081486377166584134, 0.0028628811705857515, 0.00052466883789747953, 0.00069778523175045848, 0.00068078568438068032, 0.00077465659705922008, 0.00069850560976192355, 0.0003023223252967, 0.0054903603158891201, 0.0017239470034837723, 0.0027725060936063528, 0.00086920324247330427, 0.0013254792429506779, 0.00069649674696847796, 0.00070250523276627064, 0.0010421787155792117, 0.0022825861815363169, } };
const TfArray<48, int> quant31_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data32[8] = { -10322, -27336, 8032, 26672, 2919, -6011, 43716, 2841, };
const TfArray<1, int> tensor_dimension32 = { 1, { 8 } };
const TfArray<8, float> quant32_scale = { 8, { 0.0011189343640580773, 0.00057373859453946352, 0.00088874198263511062, 0.0010668586473912001, 0.00095000065630301833, 0.0011327695101499557, 0.0008326041279360652, 0.00058460893342271447, } };
const TfArray<8, int> quant32_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ -11,5,9,-94,-4,25,9,4,3,0,14,-10,90,0,0,-6,0,-4,-17,-1,68,-4,6,15,31,42,27,0,-7,-3,-6,-127,13,7,-12,-11,-35,8,-10,41,-1,-30,-14,4,-4,15,9,12, 
  /* [1][0][][] */ -29,0,2,0,38,25,-36,83,2,9,-31,-24,23,0,28,64,0,48,12,-72,12,11,127,36,-28,-11,59,0,37,-7,13,9,10,-1,-17,-49,18,-28,7,0,-13,3,-82,-15,-44,15,-65,-100, 
  /* [2][0][][] */ -47,32,7,6,35,-10,35,19,-16,60,11,17,-13,0,5,38,0,8,-127,15,-15,24,29,-7,-24,40,50,1,5,16,5,-15,5,-1,-18,-19,9,11,24,-7,29,-25,-22,-5,18,-43,18,12, 
  /* [3][0][][] */ -13,-5,2,15,-3,24,-2,-4,84,14,-12,12,31,0,-23,-4,0,17,-3,-12,-9,6,-5,-15,-8,-8,-24,-14,5,12,-2,12,-56,47,-58,-21,8,11,10,-127,4,0,3,-67,3,-3,-11,1, 
  /* [4][0][][] */ 2,-13,91,28,23,-15,2,-4,11,1,-7,-8,-82,0,-9,9,0,12,22,1,73,14,5,-5,-18,20,-11,59,-16,2,0,93,1,14,18,2,13,-11,-22,-18,-7,-127,14,-4,7,-9,0,1, 
  /* [5][0][][] */ 14,41,4,-6,-6,51,15,14,-46,36,2,52,37,0,-127,-13,0,20,-44,26,1,19,-10,49,-9,4,32,4,-13,20,14,-10,40,30,-42,-3,-2,4,-35,23,20,-10,-22,37,16,65,13,22, 
  /* [6][0][][] */ -51,-63,-6,1,42,-51,-12,4,42,-42,-9,101,-4,0,-127,51,0,-17,63,-19,-19,-6,23,-40,21,-6,-7,-30,54,-5,-3,-5,86,-36,19,-4,-22,-6,-60,-16,-26,-9,17,-40,-14,-80,-11,-21, 
  /* [7][0][][] */ -109,-15,-20,10,127,33,87,27,6,4,28,-38,-9,0,93,112,0,11,-10,62,-13,13,-36,46,13,-7,50,5,67,72,74,5,-24,-23,-10,-20,6,29,33,39,78,28,-4,-14,74,11,76,85, 
};
const TfArray<4, int> tensor_dimension33 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant33_scale = { 8, { 0.047554709017276764, 0.024383889511227608, 0.03777153417468071, 0.04534149169921875, 0.040375027805566788, 0.048142701387405396, 0.035385675728321075, 0.024845879524946213, } };
const TfArray<8, int> quant33_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data34[48] = { 53580, 53219, 65206, 43189, 321, 12944, 1954, 34794, 19250, 44075, 26861, -2708, -46378, -127, 39365, -1032, -204, 54161, -45, 351, -15637, -1018, 57288, 60649, -7924, 38473, 55449, 26676, -2830, 14313, -2747, -50630, 15707, 87287, 27924, 1036, 59457, -1865, 193221, -26796, 12855, -27054, 2052, 111110, 111, 100383, -1667, -23138, };
const TfArray<1, int> tensor_dimension34 = { 1, { 48 } };
const TfArray<48, float> quant34_scale = { 48, { 0.00011665294005069882, 7.3556031566113234e-05, 0.00014939087850507349, 0.00011568715126486495, 0.00017616272089071572, 0.00021566107170656323, 0.00013514814781956375, 5.0669445045059547e-05, 0.00010221619595540687, 2.2765021640225314e-05, 5.3689498599851504e-05, 2.8898028176627122e-05, 0.00016433386190328747, 0.005541567225009203, 6.1289872974157333e-05, 0.00027494668029248714, 0.0027484172023832798, 1.4906590877217241e-05, 8.543863077647984e-05, 0.00015711631567683071, 9.888964268611744e-05, 9.6726726042106748e-05, 0.00010225772712146863, 2.2891528715263121e-05, 5.2695373597089201e-05, 7.4214971391484141e-05, 2.6298155717086047e-05, 4.9078975280281156e-05, 0.00016591486928518862, 4.4882090151077136e-05, 4.4880391214974225e-05, 0.00016516206960659474, 0.00015767729200888425, 1.0014131476054899e-05, 8.4767954831477255e-05, 0.00023364927619695663, 1.6267049431917258e-05, 0.00024604651844128966, 2.3107622837414965e-05, 9.5143841463141143e-05, 5.0245605962118134e-05, 0.00019139275536872447, 0.00010703230509534478, 1.075532054528594e-05, 0.00011228080984437838, 5.8284036640543491e-05, 0.0001781997416401282, 0.00010213650239165872, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ -42,-26,-8,-15,6,-35,-80,-67,-25,-57,7,61,34,-71,116,-41,-113,-80,38,-3,0,-65,-119,-85,-39,-127,-66,-25,67,18,92,29,-127,-88,-15,64,20,49,-127,74,-76,-14,106,-99,-6,-32,-83,98, 78,11,-29,-29,56,-127,-127,-80,61,-76,-126,103,38,-82,1,62,-52,-127,58,5,9,-112,-127,-76,-3,-127,-120,-43,-54,23,-60,55,30,-127,66,93,18,76,-93,127,-127,8,123,-127,2,-22,-123,93, -32,38,4,-4,-63,-112,-57,-17,88,-8,-127,34,9,-71,-100,-10,-127,-27,30,13,-16,-77,-38,-27,-10,-28,-61,-9,-9,20,-25,12,103,-82,69,32,12,35,-4,14,-77,4,5,-78,-15,4,-51,13, 
  /* [0][1][][] */ -87,-127,-43,-41,-11,61,98,-101,-25,-101,-19,110,88,-64,28,-95,-121,-94,91,-80,44,-88,-109,-127,39,-119,-77,-39,127,-60,127,87,-44,-80,-17,93,-41,-81,-108,87,45,58,104,-97,-95,-110,82,121, 127,-81,-127,-127,127,48,92,-127,100,-127,-115,127,127,-14,-7,127,-60,-127,127,-127,127,-127,-119,-126,127,-101,-127,-127,-116,-127,-72,127,28,-106,127,127,-69,-127,-98,92,63,127,127,-114,-115,-127,127,127, -55,30,-65,-89,-119,-26,30,-38,127,-22,-78,33,56,-70,-26,-43,-37,-31,61,-70,55,-82,-40,-27,47,-6,-53,-58,13,-89,-38,20,27,-93,115,28,-37,-63,2,-15,38,52,11,-74,-58,-35,64,40, 
  /* [0][2][][] */ -64,-105,-38,-35,2,40,-5,-34,-38,-56,-9,56,77,-127,-127,-60,-43,-22,62,78,52,-28,-12,-59,34,-57,-14,-61,81,31,77,64,109,-25,-40,-10,-102,38,-17,29,9,38,21,-48,92,-71,7,26, 87,-77,-92,-89,81,25,8,-49,46,-69,-27,53,86,-26,16,92,-24,-35,75,118,80,-48,-14,-58,97,-71,-21,-102,-45,40,-45,110,-15,-37,68,7,-127,54,-13,-1,10,34,21,-62,127,-97,-9,40, -29,32,-46,-40,-75,-25,22,-13,65,-10,-8,32,31,-43,112,-26,-93,-11,33,60,73,-24,0,-7,46,0,-6,-73,-12,29,-22,38,-90,-42,68,2,-21,24,28,-35,6,35,-2,-22,63,-34,-1,19, 
};
const TfArray<4, int> tensor_dimension35 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.0049577499739825726, 0.0031261313706636429, 0.0063491123728454113, 0.0049167037941515446, 0.0074869156815111637, 0.0091655952855944633, 0.0057437960058450699, 0.0021534513216465712, 0.004344188142567873, 0.00096751342061907053, 0.0022818036377429962, 0.0012281661620363593, 0.0069841891527175903, 0.23551659286022186, 0.0026048196014016867, 0.011685233563184738, 0.1168077290058136, 0.00063353008590638638, 0.0036311417352408171, 0.0066774431616067886, 0.0042028096504509449, 0.0041108857840299606, 0.0043459534645080566, 0.00097288994584232569, 0.0022395532578229904, 0.0031541362404823303, 0.0011176716070622206, 0.002085856394842267, 0.0070513817481696606, 0.0019074887968599796, 0.0019074166193604469, 0.007019388023763895, 0.0067012845538556576, 0.00042560059227980673, 0.003602638142183423, 0.0099300937727093697, 0.00069134955992922187, 0.010456977412104607, 0.00098207395058125257, 0.0040436130948364735, 0.0021354381460696459, 0.0081341918557882309, 0.0045488728210330009, 0.00045710112317465246, 0.0047719343565404415, 0.0024770714808255434, 0.0075734890997409821, 0.0043408013880252838, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data36[48] = { 4452, -181, 10989, 8568, 9303, 11581, 16108, -22, 101, -311, 3506, 477, 15422, -99588760, 4029, 22275, -80393216, -115, -555, 20718, 4833, -36, -192, 370, 4352, -819, 58, 1025, 5142, 2642, 2194, 12729, 4561, 386, 186, -4214, 739, 6414, -210, 13468, 2949, 13771, -643, -131, 11135, 145, 25296, 10105, };
const TfArray<1, int> tensor_dimension36 = { 1, { 48 } };
const TfArray<48, float> quant36_scale = { 48, { 0.00047824354260228574, 0.00046231469605118036, 0.00029392814030870795, 0.00022362431627698243, 0.00021625852969009429, 0.00019290378259029239, 0.00023627300106454641, 0.00068342400481924415, 0.0003518643497955054, 0.0024466014001518488, 0.00040047775837592781, 0.0019750681240111589, 0.00014344559167511761, 1.6285338633181823e-09, 0.00068177212961018085, 0.00014888380246702582, 1.6285338633181823e-09, 0.0062075834721326828, 0.00042957899859175086, 0.00018305597768630832, 0.00022884993813931942, 0.0034692448098212481, 0.00023501800023950636, 0.0017244503833353519, 0.00088844273705035448, 0.00063835701439529657, 0.0015542920446023345, 0.001274170121178031, 0.00020593700173776597, 0.0010811438551172614, 0.001331149716861546, 0.00018149679817724973, 0.00015224407252389938, 0.0079307947307825089, 0.00038728732033632696, 0.00028434980777092278, 0.0022918293252587318, 0.0001880552590591833, 0.001994218910112977, 0.00025714331422932446, 0.00093915092293173075, 0.00015965891361702234, 0.00027685970417223871, 0.0071757147088646889, 0.00044246017932891846, 0.00047221189015544951, 0.00011156286927871406, 9.6127201686613262e-05, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ 24,-127,50,-40,3,-33,-38,22, 
  /* [1][0][][] */ 76,54,-16,-127,-10,16,-63,107, 
  /* [2][0][][] */ 26,19,-31,127,42,125,78,45, 
  /* [3][0][][] */ 73,78,-81,127,-92,-7,-4,6, 
  /* [4][0][][] */ -56,-65,50,19,14,29,-21,-127, 
  /* [5][0][][] */ 11,1,-48,50,0,-44,44,127, 
  /* [6][0][][] */ 46,6,-107,-74,127,3,38,-10, 
  /* [7][0][][] */ 127,14,22,-28,49,-14,64,-58, 
  /* [8][0][][] */ 8,-83,34,107,-22,47,13,-127, 
  /* [9][0][][] */ 75,-117,14,9,-33,34,-127,100, 
  /* [10][0][][] */ -95,-38,-127,31,-15,45,-54,81, 
  /* [11][0][][] */ -11,-49,0,-75,-127,-20,22,-23, 
  /* [12][0][][] */ 32,10,-47,57,-87,-15,80,127, 
  /* [13][0][][] */ 0,0,0,0,0,0,0,0, 
  /* [14][0][][] */ 14,-31,-6,-1,27,127,36,43, 
  /* [15][0][][] */ 47,16,36,-127,87,54,-67,62, 
  /* [16][0][][] */ 0,0,0,0,0,0,0,0, 
  /* [17][0][][] */ 21,2,127,12,-23,24,40,10, 
  /* [18][0][][] */ 76,-108,29,26,-12,26,-127,-20, 
  /* [19][0][][] */ -107,-1,111,95,-127,-39,-56,49, 
  /* [20][0][][] */ 33,30,-39,111,-20,-127,-25,59, 
  /* [21][0][][] */ 87,8,127,20,-29,-21,89,37, 
  /* [22][0][][] */ -77,-15,-127,-15,6,29,-108,7, 
  /* [23][0][][] */ -53,127,0,-28,12,-21,102,-64, 
  /* [24][0][][] */ 5,-66,-54,92,-26,-49,111,127, 
  /* [25][0][][] */ -10,20,45,39,94,127,-57,-52, 
  /* [26][0][][] */ -68,-45,-86,15,15,49,-127,3, 
  /* [27][0][][] */ 35,-13,-3,35,-55,127,107,22, 
  /* [28][0][][] */ -37,28,-44,24,31,127,114,72, 
  /* [29][0][][] */ 70,46,99,-26,-10,-12,127,-32, 
  /* [30][0][][] */ -123,71,-51,0,-30,-17,127,-40, 
  /* [31][0][][] */ -19,-89,-5,-12,17,-43,127,105, 
  /* [32][0][][] */ 0,-6,-103,110,-24,100,106,127, 
  /* [33][0][][] */ -7,41,-11,-101,5,-18,10,127, 
  /* [34][0][][] */ -25,68,-12,-99,-11,-12,5,127, 
  /* [35][0][][] */ 127,-15,-87,-54,18,107,70,-67, 
  /* [36][0][][] */ -66,-5,50,32,-42,36,-127,69, 
  /* [37][0][][] */ 16,12,-39,54,94,127,127,46, 
  /* [38][0][][] */ 26,39,9,75,127,-2,-24,47, 
  /* [39][0][][] */ 13,41,47,-127,20,6,-19,100, 
  /* [40][0][][] */ 100,22,127,12,0,18,72,2, 
  /* [41][0][][] */ 3,-35,-25,78,44,127,86,85, 
  /* [42][0][][] */ -83,8,127,44,-14,9,-50,53, 
  /* [43][0][][] */ -31,-91,-10,80,-25,25,33,-127, 
  /* [44][0][][] */ 32,-34,-47,-127,53,4,-7,-27, 
  /* [45][0][][] */ -93,127,20,-31,-1,0,98,-97, 
  /* [46][0][][] */ -127,-39,42,36,-5,73,-98,51, 
  /* [47][0][][] */ 114,66,127,-6,26,2,98,-30, 
};
const TfArray<4, int> tensor_dimension37 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant37_scale = { 48, { 0.0011561617720872164, 0.0011176535626873374, 0.00071057624882087111, 0.00054061552509665489, 0.00052280863747000694, 0.00046634813770651817, 0.00057119393022730947, 0.001652189064770937, 0.00085063796723261476, 0.0059147002175450325, 0.00096816173754632473, 0.0047747604548931122, 0.00034678212250582874, 3.937008052901092e-09, 0.0016481955535709858, 0.00035992907942272723, 3.937008052901092e-09, 0.015006937086582184, 0.0010385144269093871, 0.00044254088425077498, 0.00055324856657534838, 0.0083869574591517448, 0.0005681599723175168, 0.004168887622654438, 0.0021478252019733191, 0.0015432387590408325, 0.0037575270980596542, 0.0030803277622908354, 0.00049785617738962173, 0.0026136834640055895, 0.003218076890334487, 0.00043877155985683203, 0.00036805259878747165, 0.019172830507159233, 0.00093627360183745623, 0.00068742042640224099, 0.0055405357852578163, 0.00045462674461305141, 0.0048210578970611095, 0.0006216482724994421, 0.0022704130969941616, 0.00038597811362706125, 0.00066931301262229681, 0.017347410321235657, 0.001069654943421483, 0.0011415801709517837, 0.00026970510953105986, 0.00023238912399392575, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data38[8] = { 3936, -41540, -10980, -6711, -38555, -3937, -20514, -21387, };
const TfArray<1, int> tensor_dimension38 = { 1, { 8 } };
const TfArray<8, float> quant38_scale = { 8, { 0.0012420064304023981, 0.0015131521504372358, 0.0020148241892457008, 0.0012678215280175209, 0.0015896651893854141, 0.0021616346202790737, 0.001321579678915441, 0.00099943915847688913, } };
const TfArray<8, int> quant38_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data39[8*1*1*16] = { 
  /* [0][0][][] */ 0,-4,-13,5,124,-10,0,-5,-10,-127,-97,-13,0,117,-12,0, 
  /* [1][0][][] */ 0,-36,-22,88,90,13,27,7,-8,-5,127,-44,0,38,-27,0, 
  /* [2][0][][] */ 0,-4,6,-20,-82,18,19,11,7,-3,-12,-9,0,127,-12,0, 
  /* [3][0][][] */ 0,-2,-31,-127,89,7,55,1,-9,67,9,35,0,1,24,0, 
  /* [4][0][][] */ 0,48,-20,50,-76,52,127,23,11,-82,26,-5,0,3,21,0, 
  /* [5][0][][] */ 0,-9,-7,-7,-20,-21,-12,13,5,4,6,-39,0,-3,127,0, 
  /* [6][0][][] */ 0,21,-23,-1,62,-18,-29,-11,11,-116,103,58,0,127,53,0, 
  /* [7][0][][] */ 0,23,-23,127,23,-20,9,-5,-9,62,-47,65,0,-1,47,0, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant39_scale = { 8, { 0.052785269916057587, 0.064308963716030121, 0.085630029439926147, 0.053882412612438202, 0.067560769617557526, 0.091869473457336426, 0.056167133152484894, 0.042476162314414978, } };
const TfArray<8, int> quant39_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data40[16] = { -161, 21382, 162825, 7869, 10633, 72243, 13659, 74413, -7367, 7351, 30917, 13285, -445, 24503, 11259, -107, };
const TfArray<1, int> tensor_dimension40 = { 1, { 16 } };
const TfArray<16, float> quant40_scale = { 16, { 0.0018688903655856848, 0.00012147326924605295, 2.4013983420445584e-05, 0.00040873614489100873, 0.00016688747564330697, 4.5997545385034755e-05, 0.00036145999911241233, 5.1675597205758095e-05, 1.9097898984909989e-05, 0.0002586787159088999, 0.00018542858015280217, 0.00070679525379091501, 0.00072724185883998871, 0.00028835353441536427, 0.00018046781769953668, 0.003907486330717802, } };
const TfArray<16, int> quant40_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data41[1*3*3*16] = { 
  /* [0][0][][] */ -108,19,-82,-126,39,-68,80,-76,-90,-4,-7,29,-127,6,54,-73, 51,25,-127,127,127,-127,127,-127,-85,127,-127,55,-105,6,127,-25, 24,-24,91,-2,-72,65,-94,79,-95,-28,4,-17,61,2,-101,-29, 
  /* [0][1][][] */ -127,127,-20,14,-43,14,-28,15,-28,0,4,-112,-49,9,-29,-14, -78,-41,-55,-14,-7,-27,8,-27,-108,-90,21,-13,-104,-127,1,23, 14,1,68,2,3,32,-25,34,-127,6,-1,0,-21,12,-4,43, 
  /* [0][2][][] */ -115,-72,70,2,-6,37,-39,53,-76,0,0,6,40,2,-26,23, 23,-4,34,-2,-27,38,-33,21,-125,-13,0,87,-58,0,-28,-111, 21,-7,22,0,4,13,9,23,-115,4,-1,-127,107,3,17,-127, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant41_scale = { 16, { 0.079427838325500488, 0.005162613932043314, 0.0010205942671746016, 0.017371285706758499, 0.007092717569321394, 0.0019548956770449877, 0.015362049452960491, 0.0021962127648293972, 0.00081166072050109506, 0.010993844829499722, 0.0078807147219777107, 0.030038798227906227, 0.030907778069376945, 0.012255025096237659, 0.007669882383197546, 0.16606816649436951, } };
const TfArray<16, int> quant41_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data42[16] = { -1073741824, 21937, 4228, -4497, 61358, 51461, 96506, 25257, -380087, 19986, 26625, 1181790, -1073741824, 112474, 34449, -1073741824, };
const TfArray<1, int> tensor_dimension42 = { 1, { 16 } };
const TfArray<16, float> quant42_scale = { 16, { 1.3102037232926023e-09, 0.0001828435342758894, 0.00035626243334263563, 4.4804546632803977e-05, 4.2029460018966347e-05, 0.0001516506599728018, 2.6421015718369745e-05, 0.00019620711100287735, 5.184752353670774e-06, 5.7862795074470341e-05, 0.00013493608275894076, 5.1738106776610948e-06, 1.1533876076441629e-09, 3.7446712667588145e-05, 0.00013237816165201366, 1.243374708748135e-10, } };
const TfArray<16, int> quant42_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data43[16*3*3*3] = { 
  /* [0][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [0][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [0][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [1][0][][] */ 48,9,35, -1,-15,15, -118,-127,-64, 
  /* [1][1][][] */ 9,2,6, -13,5,0, -7,-35,-2, 
  /* [1][2][][] */ 0,15,1, -2,6,0, 27,-20,6, 
  /* [2][0][][] */ 31,-19,-38, 60,113,-26, 12,-86,-31, 
  /* [2][1][][] */ 1,-14,-26, 79,127,-61, -9,-42,-43, 
  /* [2][2][][] */ 40,-117,0, 80,-84,-48, 5,-103,-17, 
  /* [3][0][][] */ 37,68,32, 48,125,21, -17,-10,-24, 
  /* [3][1][][] */ 36,55,21, 59,127,-3, -34,-37,-18, 
  /* [3][2][][] */ 9,6,9, 8,10,-14, -21,-20,-19, 
  /* [4][0][][] */ 4,39,-32, -20,37,-43, -29,-6,-40, 
  /* [4][1][][] */ -1,67,-1, 10,91,-7, -1,22,-55, 
  /* [4][2][][] */ 44,89,5, 53,127,-2, -4,34,0, 
  /* [5][0][][] */ 13,4,-104, 4,6,-87, 7,38,-14, 
  /* [5][1][][] */ -6,-56,-127, -14,-59,-114, -8,7,-23, 
  /* [5][2][][] */ -36,-25,-49, -33,-34,-41, -21,-6,-27, 
  /* [6][0][][] */ 32,-63,41, 56,-87,48, 16,-16,16, 
  /* [6][1][][] */ 48,-93,72, 76,-127,78, 18,-20,28, 
  /* [6][2][][] */ 34,-24,28, 28,-34,42, -1,20,12, 
  /* [7][0][][] */ -26,34,11, -100,-22,15, -22,23,4, 
  /* [7][1][][] */ -13,-6,2, -127,-89,-7, -14,-18,-7, 
  /* [7][2][][] */ -43,2,-36, -33,-17,-29, -35,7,-20, 
  /* [8][0][][] */ 127,127,126, 126,127,126, 126,126,125, 
  /* [8][1][][] */ 126,126,125, 126,126,125, 124,125,124, 
  /* [8][2][][] */ 125,125,125, 124,125,124, 119,120,122, 
  /* [9][0][][] */ 14,35,41, 31,40,37, 31,31,7, 
  /* [9][1][][] */ 112,127,-11, 62,109,-16, -22,4,6, 
  /* [9][2][][] */ -44,-44,-4, -19,-55,-27, -3,-4,-35, 
  /* [10][0][][] */ -25,-84,-19, 34,95,20, -8,-12,-2, 
  /* [10][1][][] */ -60,-104,-15, 78,127,14, -17,-27,-1, 
  /* [10][2][][] */ -33,-21,0, 35,22,-12, -9,-1,6, 
  /* [11][0][][] */ -24,-35,-9, -2,-53,-4, -17,-127,-79, 
  /* [11][1][][] */ -60,-55,-32, -49,-77,-50, -41,-87,-82, 
  /* [11][2][][] */ -56,-87,-126, 70,80,17, -86,-33,-93, 
  /* [12][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [12][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [12][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [13][0][][] */ -54,-101,-21, -65,-115,-29, -11,-20,-8, 
  /* [13][1][][] */ 60,114,13, 57,127,23, 6,14,9, 
  /* [13][2][][] */ -9,-20,2, 1,-19,-3, -1,3,-6, 
  /* [14][0][][] */ 45,-9,-41, 80,-26,-50, 33,-11,-22, 
  /* [14][1][][] */ 85,-26,-86, 127,-47,-97, 54,-27,-50, 
  /* [14][2][][] */ 56,-12,-56, 79,-21,-55, 20,-14,-27, 
  /* [15][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [15][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [15][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 16,3,3,3 } };
const TfArray<16, float> quant43_scale = { 16, { 3.3410194077987398e-07, 0.046625100076198578, 0.090846918523311615, 0.011425158940255642, 0.010717512108385563, 0.038670916110277176, 0.0067373584024608135, 0.050032809376716614, 0.001322111813351512, 0.014755011536180973, 0.034408699721097946, 0.0013193216873332858, 2.9411381774480105e-07, 0.0095489108934998512, 0.033756427466869354, 3.1706054670621597e-08, } };
const TfArray<16, int> quant43_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.41364759206771851, } };
const TfArray<1, int> quant46_zero = { 1, { -2 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,48,48,48 } };
const TfArray<1, float> quant47_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant47_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,49,49,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant50_scale = { 1, { 0.35556337237358093, } };
const TfArray<1, int> quant50_zero = { 1, { 3 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant51_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant51_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant53_scale = { 1, { 0.38385677337646484, } };
const TfArray<1, int> quant53_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.45730912685394287, } };
const TfArray<1, int> quant54_zero = { 1, { -11 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant55_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant55_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,25,25,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.24076248705387115, } };
const TfArray<1, int> quant58_zero = { 1, { -1 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant59_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant59_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant60_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant61_scale = { 1, { 0.19751517474651337, } };
const TfArray<1, int> quant61_zero = { 1, { -7 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant62_scale = { 1, { 0.29149001836776733, } };
const TfArray<1, int> quant62_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant63_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant63_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant65_scale = { 1, { 0.21221461892127991, } };
const TfArray<1, int> quant65_zero = { 1, { -13 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant66_scale = { 1, { 0.39250597357749939, } };
const TfArray<1, int> quant66_zero = { 1, { -21 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant67_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant67_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,12,12,32 } };
const TfArray<1, float> quant68_scale = { 1, { 0.074573829770088196, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,12,12,3 } };
const TfArray<1, float> quant69_scale = { 1, { 0.1676623523235321, } };
const TfArray<1, int> quant69_zero = { 1, { 4 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,12,12,3 } };
const TfArray<1, float> quant70_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant70_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 46,37,36 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfArray<2, int> inputs4 = { 2, { 47,1 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 48,35,34 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,33,32 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,31,30 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,29,28 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,27,26 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 50,53 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 54,25,24 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfArray<2, int> inputs12 = { 2, { 55,1 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 56,23,22 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,21,20 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,19,18 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,17,16 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,15,14 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 58,61 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 62,13,12 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,11,10 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,9,8 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 62,65 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 66,7,6 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,5,4 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,3,2 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 69 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 12, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 96, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension12, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension13, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension14, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension15, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension16, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension17, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension18, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension19, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension20, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension21, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data23, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension24, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data27, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension28, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data29, (TfLiteIntArray*)&g0::tensor_dimension29, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data30, (TfLiteIntArray*)&g0::tensor_dimension30, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension31, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension32, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data34, (TfLiteIntArray*)&g0::tensor_dimension34, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data35, (TfLiteIntArray*)&g0::tensor_dimension35, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data36, (TfLiteIntArray*)&g0::tensor_dimension36, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension37, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension38, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant39))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data40, (TfLiteIntArray*)&g0::tensor_dimension40, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data41, (TfLiteIntArray*)&g0::tensor_dimension41, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension42, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant42))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant43))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension44, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension45, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant45))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension46, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant46))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension47, 110592, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant47))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension48, 115248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant48))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant49))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 55296), (TfLiteIntArray*)&g0::tensor_dimension50, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant50))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension51, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant51))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension52, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant52))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension53, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant53))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension54, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant54))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension55, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant55))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension56, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant56))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension57, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant57))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36912), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant58))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant59))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension60, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant60))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension61, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant61))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension62, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension63, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant63))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension64, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant64))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 16128), (TfLiteIntArray*)&g0::tensor_dimension65, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant65))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension66, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant66))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension67, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant67))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension68, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant68))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 432), (TfLiteIntArray*)&g0::tensor_dimension69, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant69))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension70, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant70))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 71, };
const size_t tflNodes_subgraph_index[] = {0, 27, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  70, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_2888_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 71;
  for (size_t i = 0; i < 71; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_2888_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_2888_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_2888_invoke() {
  for (size_t i = 0; i < 27; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_2888_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
