/*
 * Copyright (c) 2025 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://edgeimpulse.com/legal/terms-of-service) or Enterprise Terms of
 * Service (https://edgeimpulse.com/legal/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 28.02.2025 09:55:45

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#if defined(EI_MODEL_SECTION) && (defined(__GNUC__) || defined(__clang__))
#define MODEL_SECTION(X) __attribute__((section(STRINGIZE_VALUE_OF(X))))
#else
#define MODEL_SECTION(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 242672;
#else
constexpr int kTensorArenaSize = 241648;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,96,96,3 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data2[5] = { 20809, -30870, -21980, -35514, -34016, };
const TfArray<1, int> tensor_dimension2 = { 1, { 5 } };
const TfArray<5, float> quant2_scale = { 5, { 0.00023623411834705621, 0.00019780236470978707, 0.00030291712027974427, 0.00018583548080641776, 0.00017945373838301748, } };
const TfArray<5, int> quant2_zero = { 5, { 0,0,0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data3[5*1*1*32] = { 
  /* [0][0][][] */ 18,57,-8,13,-52,46,-28,46,43,-50,-86,43,-101,44,74,79,-13,-127,28,-60,-17,18,-57,-85,29,-61,45,-57,109,49,19,66, 
  /* [1][0][][] */ 63,102,80,113,40,87,5,-36,-72,-52,78,-35,-107,51,-103,23,9,30,-78,25,-80,77,76,-45,-26,45,19,67,1,-105,37,-127, 
  /* [2][0][][] */ -25,-41,-32,-28,-4,32,76,-58,57,64,-22,57,50,69,-127,-28,-6,-25,25,3,-25,-57,44,-54,42,42,44,3,-65,-29,48,46, 
  /* [3][0][][] */ 93,-76,3,-32,123,-34,-35,-104,45,-43,-40,-97,-29,-39,11,-58,-123,-17,-98,50,-5,51,-57,41,33,127,12,-26,-11,79,99,-113, 
  /* [4][0][][] */ -51,-87,85,-35,-8,46,-72,-99,91,91,88,-123,24,-98,33,5,79,-102,-90,96,14,-68,-16,113,-10,-61,-80,-91,-127,126,-18,-123, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 5,1,1,32 } };
const TfArray<5, float> quant3_scale = { 5, { 0.004313549492508173, 0.0036117997951805592, 0.0055311569012701511, 0.0033932887017726898, 0.0032767604570835829, } };
const TfArray<5, int> quant3_zero = { 5, { 0,0,0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data4[32] = { 422, -33, 68, 307, 440, 90, -261, 424, 106, -47, 13, -24, -239, 223, 912, -586, -298, 109, 1212, 142, 128, 511, -376, -335, -58, 305, -163, 99, 816, -149, -279, 765, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 6.6966495069209486e-05, 4.6881712478352711e-05, 4.6113775169942528e-05, 5.1194034313084558e-05, 5.6955253967316821e-05, 4.2997999116778374e-05, 4.580686436383985e-05, 5.0403348723193631e-05, 4.9971276894211769e-05, 4.300315777072683e-05, 6.1885628383606672e-05, 5.3580446547130123e-05, 4.7250694478861988e-05, 5.1090417400700971e-05, 6.4942483732011169e-05, 4.476894173421897e-05, 5.6482109357602894e-05, 5.3975385526427999e-05, 6.2476639868691564e-05, 6.5109044953715056e-05, 4.4345633796183392e-05, 5.3233539802022278e-05, 4.2811810999410227e-05, 5.3885745728621259e-05, 4.5806795242242515e-05, 5.694225910701789e-05, 4.8662313929526135e-05, 3.9015441871015355e-05, 6.7617605964187533e-05, 4.9019457946997136e-05, 4.3663505493896082e-05, 4.4680266000796109e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data5[32*1*1*96] = { 
  /* [0][0][][] */ -46,-61,80,23,38,-8,-43,-70,57,-54,-59,5,-32,7,-18,54,-34,-9,-58,-30,-54,-59,14,79,-60,10,62,-28,71,25,-13,-47,96,-28,-48,6,-60,-61,-64,30,39,-76,-85,72,1,-59,59,-18,37,-43,-47,80,-48,-13,-68,32,8,47,60,-58,-80,46,-52,32,17,29,57,67,-7,32,67,-127,77,-78,21,70,-43,15,-25,22,48,24,21,9,-30,-26,-44,85,-2,101,13,-83,9,45,63,10, 
  /* [1][0][][] */ -37,57,-72,-17,-80,71,31,-7,65,-84,-103,82,28,-38,30,51,97,-34,2,127,-57,-8,27,23,20,24,-38,84,-14,-10,94,-45,57,108,-20,37,41,76,-17,-68,-44,0,-7,-91,-10,22,-16,-61,-20,-76,85,51,-15,91,-65,-34,13,60,79,66,-79,111,-65,-86,-68,28,66,30,82,41,1,0,-122,127,-43,38,59,-48,-44,84,-75,45,-50,-116,32,111,-71,-62,69,85,76,46,75,102,37,11, 
  /* [2][0][][] */ 25,24,-53,88,-63,-50,89,60,-85,89,-29,120,127,-11,73,-93,-60,-11,28,53,-91,-13,105,19,-17,93,116,0,-90,61,82,100,-84,-18,-84,-125,-85,89,79,-20,-111,-69,7,-6,-105,122,-14,-92,85,15,121,-64,-46,62,29,-29,-59,85,-33,3,-8,42,-26,79,82,53,46,83,-98,68,20,-90,46,-120,4,32,-39,-25,9,8,45,-86,-11,-16,1,-81,-16,-13,83,117,-46,21,-61,-105,-57,-91, 
  /* [3][0][][] */ 45,-15,46,-7,-68,39,-81,36,47,12,70,9,58,96,67,18,88,90,-64,-11,99,-66,-44,-86,-24,-76,-50,87,15,-92,85,14,-41,-23,2,-36,-71,-23,27,54,-23,-79,-96,12,37,41,-41,-80,65,-95,58,22,71,29,76,-127,-98,-112,-62,-39,-86,28,-20,66,59,-15,-43,-21,-36,-71,13,55,34,-107,34,-30,44,90,94,-61,-65,-79,25,97,29,54,-29,-88,-70,54,-13,-118,90,-83,-65,29, 
  /* [4][0][][] */ 17,36,13,65,-16,-13,41,20,70,63,10,50,-50,-21,-4,-25,-11,13,-43,2,82,-56,80,33,8,7,66,-36,-19,63,-48,-34,106,100,29,-127,-24,-15,-89,58,-40,-53,-73,-63,-21,98,23,46,45,-34,-55,-35,-48,59,-80,-38,37,-39,-18,32,-28,-70,-32,-40,-9,66,17,-4,-5,-101,-50,-91,-21,-36,65,57,84,-7,12,-48,26,-17,-109,8,11,59,88,31,-95,-30,67,26,28,66,-20,-4, 
  /* [5][0][][] */ 65,-105,81,82,36,-122,31,40,105,-110,1,-64,82,106,33,42,57,68,-69,93,30,53,19,-26,-97,-42,0,-100,23,-3,27,-100,-76,0,-62,-11,-116,-38,23,23,-91,-40,39,98,-64,34,35,-67,-125,61,64,44,34,12,35,-62,111,40,-21,-41,52,-76,48,-64,-44,105,-27,25,64,15,109,-75,-38,39,-63,-70,13,-48,14,79,110,52,35,127,-81,89,-4,47,72,-104,81,76,-17,17,44,-108, 
  /* [6][0][][] */ -8,-60,106,82,-34,-89,-6,92,-25,-98,7,-98,89,65,98,-115,40,-13,12,69,-71,-111,105,55,-54,-85,-10,-53,-14,-113,39,-88,-86,-118,-27,-93,-5,17,-102,80,72,70,28,-18,-127,94,-108,-31,-89,7,-40,-70,60,-55,59,-47,4,8,-65,116,-84,0,75,-70,-50,50,95,-36,92,5,-95,29,53,-45,-98,-41,-67,-91,-54,-48,23,-7,49,-24,-74,-84,-31,-99,85,51,87,-1,-15,-33,74,-3, 
  /* [7][0][][] */ 127,85,-22,-36,-54,95,-12,15,101,7,-77,9,-7,-65,54,65,55,17,-14,102,50,38,6,81,-59,91,34,59,-60,82,-2,28,32,35,55,116,-80,85,7,-21,91,-61,85,72,83,-3,97,-80,61,-31,-113,-60,-29,72,24,64,96,-82,19,-43,-7,14,66,-91,-56,-48,66,19,-69,19,56,74,73,96,76,60,-69,58,-79,55,79,-23,-9,-75,84,34,-87,66,71,17,80,50,-36,-21,-7,-36, 
  /* [8][0][][] */ -4,18,-40,-75,60,30,-58,-23,13,24,42,88,49,-33,-78,-55,-52,92,-28,-11,42,-16,75,98,-87,85,47,70,-36,19,-69,93,79,-34,53,-10,103,2,-20,68,75,103,-98,-111,-33,-17,-7,103,21,-84,-68,4,-31,-21,-39,-99,52,127,-109,99,126,28,42,110,-38,-32,-14,96,-60,44,41,10,77,12,-11,20,-23,95,77,42,42,66,-72,-62,27,40,77,-22,50,-59,-65,73,-78,-105,-80,24, 
  /* [9][0][][] */ -37,2,116,50,93,-95,-51,-96,48,63,-9,62,17,-75,-109,-24,8,-7,-66,-117,13,100,-107,-102,119,-33,-13,36,1,-95,-75,127,33,-12,24,-11,-71,-1,-27,-45,41,-50,58,-92,76,29,-121,66,40,-34,-100,-32,102,-95,-65,84,113,-50,-34,-2,-82,95,61,-76,-102,9,105,46,-65,106,118,-76,7,42,-126,-94,-73,-117,-39,79,39,26,114,45,-41,-105,35,-10,112,14,-39,116,97,-8,7,-67, 
  /* [10][0][][] */ -55,52,67,-44,-30,75,79,7,30,27,20,-42,127,63,-28,13,-29,64,-69,-38,-8,21,40,-48,22,52,-67,-85,-54,32,-59,-48,36,69,83,32,-34,4,-39,29,-25,88,-75,-28,-88,-30,3,-55,-14,-9,64,17,43,14,-39,-61,-59,-9,46,-33,11,47,92,37,72,-47,-68,-10,18,1,-56,-48,70,7,-78,77,-8,43,49,15,59,4,48,90,-71,57,71,-7,32,10,-22,-31,-44,-49,-46,-57, 
  /* [11][0][][] */ 95,24,-11,83,84,33,40,24,89,82,-66,90,-6,-69,26,-55,-45,-86,51,66,20,58,17,-90,-90,-62,-21,58,64,46,22,-15,-62,-56,40,60,-49,67,-20,-56,-20,77,-69,10,-15,-55,-67,-73,68,85,127,36,-76,-55,20,68,-62,-54,-8,-76,-68,72,53,11,30,66,-47,16,74,30,-74,-66,23,125,-65,41,-60,26,-39,74,-89,-24,-56,-43,38,-69,6,-29,-84,-2,3,3,-64,-7,4,-24, 
  /* [12][0][][] */ 23,77,-66,-3,116,5,-37,45,-67,39,-18,19,47,1,32,-75,-84,-31,-13,-89,34,-10,12,86,-40,-36,85,-92,111,3,-35,100,-81,-72,-34,38,-5,-59,-13,39,122,65,-83,-55,-18,-80,-15,127,-44,-96,-99,81,56,-10,-88,114,-4,-10,46,65,69,101,3,45,86,26,-44,115,110,121,44,110,71,105,-33,-16,-36,28,-111,-88,-49,79,69,11,-32,26,57,113,-57,-127,97,46,96,2,8,83, 
  /* [13][0][][] */ 72,-55,93,88,110,70,70,73,54,-91,16,-36,53,73,60,-36,-94,-64,-60,13,53,-18,108,-34,-48,32,6,16,-74,-83,73,19,35,90,-9,36,-61,-36,18,61,-56,72,-38,21,-41,24,-25,-17,30,68,-43,-93,-90,24,63,-70,-46,22,-17,-51,-29,105,-58,6,-43,-56,-72,75,-25,-6,80,15,-74,64,-57,-30,-84,66,72,-52,40,-60,77,13,-67,-83,85,91,-10,-62,-68,21,127,-12,70,15, 
  /* [14][0][][] */ -1,-31,76,33,75,10,2,-67,-67,12,56,77,-72,-33,-16,-67,4,-33,-3,59,-26,43,12,68,-82,-12,-21,60,-31,-64,-59,39,49,-15,-25,44,92,101,73,-65,20,-50,60,84,127,-85,51,-18,78,59,9,21,65,-8,28,53,-28,-19,32,74,17,-23,8,39,-17,-10,70,-57,-24,-2,-68,92,-8,84,87,-38,25,-50,46,37,38,-14,-69,-52,-49,-30,-78,64,93,9,82,-23,111,60,-21,81, 
  /* [15][0][][] */ 26,-33,-37,60,84,-89,47,-98,45,-6,-79,3,93,-8,-97,-120,75,-5,-92,21,37,7,58,94,63,56,25,80,11,50,50,-103,-6,-7,-72,-6,-74,96,99,-76,4,97,-58,-33,14,-87,-53,-88,-19,-82,-5,18,-103,-108,-58,-2,52,33,-52,94,-51,-72,-4,81,-35,82,-80,-7,-60,-6,49,-78,5,-29,49,-114,-13,42,90,67,-91,44,-113,-71,-127,-45,-100,25,72,56,-117,-42,46,108,-103,107, 
  /* [16][0][][] */ -59,11,75,-54,28,84,-46,11,37,40,-86,61,71,-30,-48,-52,74,67,60,55,96,55,-36,32,-26,48,-45,43,-92,-17,40,16,-119,54,30,41,-38,45,-56,-55,18,-16,64,63,40,90,88,-22,-66,-92,76,83,-33,71,64,9,34,71,84,-1,127,75,49,63,16,7,-37,70,52,103,-22,10,25,33,25,60,-24,69,-89,-9,11,-62,74,24,3,86,72,9,74,-2,-30,101,38,-42,-116,-4, 
  /* [17][0][][] */ 16,-99,45,93,-43,-95,-51,-60,39,-54,73,28,11,51,-80,51,10,28,79,72,-89,-13,14,-38,26,38,-62,34,88,-52,-37,43,10,-13,28,12,-31,51,-73,-20,-103,-66,-32,19,14,8,34,-94,83,127,0,13,-43,81,63,-65,-111,44,-74,-91,8,-64,34,56,-57,-57,44,-80,-119,-34,80,-14,12,-55,-58,71,92,-38,40,-28,-1,14,-76,-80,-94,46,53,-40,-32,82,-41,-91,0,98,68,11, 
  /* [18][0][][] */ -9,88,98,-30,1,-39,-54,79,-1,63,-56,-34,-32,43,98,-40,53,-18,66,9,80,-2,35,-23,21,-38,-9,110,49,0,22,18,17,1,-51,-49,10,58,70,49,1,19,-3,37,-9,4,29,44,20,11,18,14,-51,2,22,100,-24,10,20,-68,66,127,11,15,-33,-85,7,67,69,-44,-63,107,-75,48,8,-55,15,68,15,-22,-38,8,-1,-60,100,-11,57,26,-55,-52,-47,59,97,45,65,16, 
  /* [19][0][][] */ 0,7,55,35,30,-46,74,51,74,-40,29,4,-12,29,-38,55,53,-51,87,34,-3,60,-28,15,65,-35,37,-41,-52,-69,-33,36,61,-49,33,-19,10,-44,-44,-51,33,-65,-56,5,-84,38,62,-64,-12,20,-14,46,-4,14,6,-31,30,95,-1,-6,54,-47,79,61,-46,14,-9,18,-1,41,68,-30,-21,-127,-57,-44,10,-68,20,63,55,-68,-11,77,-50,7,20,22,70,29,6,50,-32,52,42,-54, 
  /* [20][0][][] */ 13,82,67,87,-86,100,20,57,17,30,-83,13,-11,89,52,-73,-34,-31,-59,16,31,-37,-70,-62,73,-75,-106,56,53,22,-42,100,85,42,-17,86,50,-16,1,-110,-66,-26,-56,-93,24,-67,-53,127,59,-84,-111,32,53,97,75,67,90,76,77,87,113,-36,-74,-46,-31,-64,-44,8,-59,-59,-70,92,-67,-37,65,18,94,81,106,104,83,4,92,-48,66,108,-12,64,27,95,43,84,20,19,-5,22, 
  /* [21][0][][] */ 69,45,71,-71,54,-65,72,9,4,-50,-46,33,-64,29,-26,-59,-84,-12,-6,22,68,-32,67,-58,47,-54,-17,55,-8,23,-6,-10,41,34,-67,-110,96,80,-92,-17,-6,-17,12,-1,-89,-60,-67,62,2,-61,-16,90,9,76,-61,-9,-54,19,-34,102,5,-56,-2,-16,89,39,-19,-54,-127,-21,47,36,36,-21,66,68,-75,-18,61,93,15,90,-13,-55,27,-72,55,-59,-110,100,98,-103,-40,-35,106,-12, 
  /* [22][0][][] */ 24,-60,-73,-96,83,-64,100,36,-94,70,-82,-116,113,-127,-125,-91,20,83,-113,-66,73,-82,24,19,91,-18,-115,74,-68,-76,-80,-126,49,54,11,8,-13,-27,-81,-119,-8,-16,-4,79,51,-122,83,-39,-78,-86,-12,-28,-70,-100,-60,8,-39,-36,-21,-42,84,-91,-84,-125,-78,14,-123,-50,103,102,-33,-20,-73,-7,46,-95,38,-62,57,95,101,-116,-104,-125,69,78,94,-38,-82,23,-71,71,-5,-1,-58,100, 
  /* [23][0][][] */ 53,-85,-3,35,57,-79,0,-101,38,-79,63,66,44,-104,4,-40,62,-29,-77,99,69,-72,74,-38,-17,8,62,11,50,41,58,-46,-38,24,13,12,63,-1,-95,4,-89,-4,-4,-103,-72,-74,105,5,51,-86,-127,-39,72,-61,-34,62,-81,-21,80,25,-84,-87,-28,9,24,24,-102,-85,53,-18,86,-73,-4,-56,-48,-86,36,-29,69,81,-45,-57,9,-75,66,6,84,-19,-76,24,77,-38,49,-60,-62,46, 
  /* [24][0][][] */ -80,-48,-101,-73,-76,-127,-67,-105,54,106,76,37,105,58,-40,-109,-77,40,21,-61,87,-78,-51,-39,49,-31,68,50,98,38,5,-77,-10,7,46,31,-49,-83,44,-22,-71,-94,96,6,8,-37,45,64,-90,-56,-37,9,63,63,41,-91,-11,74,4,2,77,-5,30,93,-86,86,-45,-94,-112,48,-53,-27,-33,24,93,94,59,-70,-101,-77,-79,-89,-65,-118,-1,59,-12,-105,20,-111,-5,-84,-19,-4,-92,29, 
  /* [25][0][][] */ -84,-87,-50,17,94,-58,-62,62,47,-105,-12,15,16,4,-87,3,-55,48,20,-110,37,71,1,-34,29,-53,-68,28,76,-37,20,79,115,-76,58,20,80,-77,-20,9,-80,62,-108,1,32,43,23,33,-58,60,-104,23,44,2,-74,-9,-12,58,-127,77,57,5,49,30,31,77,-1,16,-78,-34,-4,-99,42,-97,35,28,93,58,28,-1,53,56,-79,78,-53,-32,-64,-47,-36,-10,108,-10,-77,-4,43,-39, 
  /* [26][0][][] */ 30,-120,-16,-3,-55,-24,-11,10,-100,-119,94,68,-113,-36,9,-12,101,15,-73,-70,-2,63,90,13,48,45,5,43,19,24,-92,-16,-3,-55,-77,-91,-51,60,-39,98,-97,83,47,30,-70,56,-58,98,-13,17,-45,82,4,-41,-23,-89,72,55,38,31,-18,-80,48,-30,112,-23,-47,52,-80,62,71,89,68,-45,-70,9,51,-93,-85,1,-31,85,59,-77,67,-9,-37,4,-84,90,16,-10,-18,127,105,99, 
  /* [27][0][][] */ 9,15,-69,-118,-79,-74,-72,-6,42,120,47,-107,-20,57,93,-24,82,-14,72,-58,-106,16,-24,-20,-92,66,-118,-8,91,47,-34,6,73,74,-98,-90,-83,-62,-113,100,-93,26,37,25,111,35,86,127,103,94,75,-69,-90,-97,13,-57,113,-18,-61,-76,-69,-45,-26,56,55,-42,-120,114,77,17,-125,13,76,-44,5,-96,62,-65,100,113,102,-26,117,-58,-74,-86,-25,48,-49,-1,-33,-37,67,44,106,71, 
  /* [28][0][][] */ 82,21,85,33,-108,39,-52,-31,-11,-47,43,70,-56,-40,39,73,84,74,-34,92,-9,30,-53,-30,-75,55,-53,34,-15,1,6,-24,-32,20,44,64,41,-63,75,19,70,22,-41,63,-14,-15,5,52,45,40,-40,-39,-39,14,55,91,48,-15,65,38,6,16,-83,-1,46,46,9,50,-67,18,-57,-41,47,108,37,-36,-87,-21,-43,51,-49,-46,127,-42,57,-71,48,-72,-59,-8,53,-26,-22,48,3,-9, 
  /* [29][0][][] */ 62,48,41,-55,-99,34,-99,-15,90,-8,-78,-70,124,-102,-46,-38,-81,100,41,-61,-58,-29,47,4,-20,15,-35,-22,-69,11,91,3,49,-4,-63,-46,-10,100,-7,85,51,106,-48,62,-2,91,-23,-18,21,3,38,-71,81,-91,105,60,-79,68,-62,95,-87,77,-79,-26,-50,-48,45,80,88,-81,39,-57,101,23,50,16,111,-56,-25,15,6,-91,0,-61,58,104,43,83,-21,77,72,79,-127,-18,-22,26, 
  /* [30][0][][] */ 15,-65,-69,26,-96,18,-73,-27,105,-19,-7,-51,-99,7,51,6,-10,37,90,-103,33,-108,-116,6,-104,14,-67,100,-24,-106,-102,14,-85,-79,-127,-55,10,-20,-16,15,85,-74,-18,92,96,-45,100,52,-74,63,16,-107,89,-60,-14,95,-83,-54,-84,-59,-106,-8,-70,-28,-111,-87,-102,86,-59,102,46,-38,-88,99,37,-94,-58,-75,-84,-68,25,24,-112,-22,-111,26,-112,107,-46,-120,73,60,-40,-7,4,-73, 
  /* [31][0][][] */ 122,-67,42,100,54,57,-45,-43,-20,2,-67,-35,119,-112,-9,113,-25,-80,124,65,70,57,-14,126,56,-104,36,90,-24,-66,71,118,13,31,-71,23,123,3,-16,-106,92,-38,10,54,84,-49,-11,82,81,52,88,-18,-61,-45,-39,118,-89,78,82,119,-28,38,69,-70,71,114,-24,-75,88,-94,-109,44,-92,12,33,13,-71,-24,59,100,-64,-32,89,65,83,106,-81,20,50,-52,-84,-22,15,127,-16,44, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant5_scale = { 32, { 0.0028460759203881025, 0.001992472680285573, 0.0019598354119807482, 0.0021757464855909348, 0.0024205981753766537, 0.0018274149624630809, 0.0019467916572466493, 0.0021421422716230154, 0.0021237791515886784, 0.001827634172514081, 0.0026301390025764704, 0.0022771689109504223, 0.0020081545226275921, 0.0021713427267968655, 0.0027600554749369621, 0.0019026800291612744, 0.0024004895240068436, 0.0022939539048820734, 0.0026552570052444935, 0.0027671344578266144, 0.0018846894381567836, 0.0022624253761023283, 0.0018195019802078605, 0.0022901440970599651, 0.0019467887468636036, 0.0024200459010899067, 0.0020681482274085283, 0.001658156281337142, 0.0028737483080476522, 0.0020833269227296114, 0.0018556989962235093, 0.0018989113159477711, } };
const TfArray<32, int> quant5_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data6[96] = { -2481, 3247, 10371, 2070, -4590, -2953, 18548, 1924, 2768, -1777, 12818, -257, -7337, 2175, 16697, 6785, 13994, 5640, -5024, -5931, 4593, 23861, 16804, 15536, 1132, 874, 5175, 4283, 1643, -4940, 4859, -2548, -140, 5321, -86, 1146, 11331, 5563, -2325, 6701, 8565, 5530, 4512, 11888, 3647, 4115, 2092, 7474, 4245, -5542, -5643, 359, -403, -1190, 1931, 294, 247, -958, -5486, 9416, -748, 1476, -1092, -2627, -3278, 6786, 23255, 2119, -3941, 905, 1651, 2401, 2645, -1044, 796, 15560, -586, 15296, 19609, -811, 7956, 2140, -142, 1206, 13165, 10219, 3918, 1338, 4599, 3838, -362, -7211, 899, -2336, -1724, -2388, };
const TfArray<1, int> tensor_dimension6 = { 1, { 96 } };
const TfArray<96, float> quant6_scale = { 96, { 0.00024004306760616601, 0.00050135049968957901, 0.00023360867635346949, 0.00043572427239269018, 0.00021944854233879596, 0.00050492567243054509, 0.00017930357716977596, 0.0003660261572804302, 0.00022279385302681476, 0.00036088048364035785, 0.00015371461631730199, 0.00026012278976850212, 0.00033130854717455804, 0.0012975777499377728, 0.00018541200552135706, 0.00017097397358156741, 0.00013253603538032621, 0.0002544970775488764, 0.00038992561167106032, 0.00028156218468211591, 0.00013953312009107322, 0.00011233419354539365, 0.00018234652816317976, 0.0001076904300134629, 0.00015624755178578198, 0.00048517854884266853, 0.00057075795484706759, 0.00026127966702915728, 0.00030384559067897499, 0.00040584334055893123, 0.00029647539486177266, 0.00029965682188048959, 0.0002719802432693541, 0.00022054079454392195, 0.00034464316559024155, 0.00030833890195935965, 0.00016746617620810866, 0.00019702481222338974, 0.00026763012283481658, 0.00026433056336827576, 0.00015105654892977327, 0.000465541728772223, 0.00034216378116980195, 0.00019691094348672777, 0.00054655811982229352, 0.00024350157764274627, 0.00023973335919436067, 0.00029019947396591306, 0.00032738773734308779, 0.00024036392278503627, 0.00026261864695698023, 0.00020751613192260265, 0.00049424194730818272, 0.00023271107056643814, 0.00041288096690550447, 0.00044364607310853899, 0.00044330512173473835, 0.00027804888668470085, 0.00027821684489026666, 0.00019434945716056973, 0.00094520888524129987, 0.00045609325752593577, 0.00023036854690872133, 0.00028370332438498735, 0.00057080382248386741, 0.00028167242999188602, 9.3691320216748863e-05, 0.0001829294633353129, 0.00028606053092516959, 0.00039739863132126629, 0.00023190163483377546, 0.00022762900334782898, 0.00050092022866010666, 0.00033306289697065949, 0.00029218749841675162, 0.00013919922639615834, 0.00026001484366133809, 0.00012166502710897475, 9.2792230134364218e-05, 0.0002054051001323387, 0.0001853301509981975, 0.00014014761836733669, 0.00017534429207444191, 0.000215413689147681, 0.00013885249791201204, 0.00023199144925456494, 0.0005968108307570219, 0.00020682028844021261, 0.00015214832092169672, 0.00053167738951742649, 0.00021656700118910521, 0.00027510119252838194, 0.00025099399499595165, 0.00043280207319185138, 0.00032412612927146256, 0.00016267935279756784, } };
const TfArray<96, int> quant6_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data7[96*1*1*16] = { 
  /* [0][0][][] */ -38,105,3,-127,-51,-18,-18,-103,-17,43,26,104,25,-96,18,62, 
  /* [1][0][][] */ -44,15,-84,-21,-59,-31,35,-76,36,49,-56,13,-3,9,42,-127, 
  /* [2][0][][] */ -15,20,-59,58,37,12,-40,-51,127,-44,35,-11,-22,95,-121,61, 
  /* [3][0][][] */ 23,-45,16,-75,26,-8,19,26,117,-9,105,8,12,29,0,127, 
  /* [4][0][][] */ -73,82,49,23,2,-23,27,126,15,24,-27,-70,-127,18,32,91, 
  /* [5][0][][] */ 16,92,127,21,25,51,-94,54,-33,81,-48,2,16,-36,-114,-11, 
  /* [6][0][][] */ 19,-55,88,-127,1,4,-27,71,-95,-99,72,-69,7,82,-55,85, 
  /* [7][0][][] */ 44,127,-22,-69,85,-13,16,-20,96,73,-38,-18,12,-20,54,80, 
  /* [8][0][][] */ -12,-82,-13,-101,7,-41,28,-64,7,39,83,-40,52,127,59,83, 
  /* [9][0][][] */ -9,-22,-9,114,34,-12,40,-46,-64,127,22,-29,-20,-47,1,-7, 
  /* [10][0][][] */ -24,75,-39,-127,60,-22,17,70,88,-51,16,-55,-32,-59,-19,71, 
  /* [11][0][][] */ -11,4,6,-24,54,-17,65,-51,-74,17,14,9,14,127,-63,-17, 
  /* [12][0][][] */ 35,-2,-127,-58,-31,-102,46,9,-15,80,-40,-51,-2,74,21,52, 
  /* [13][0][][] */ -13,20,-22,12,5,-127,-9,22,14,-15,7,3,16,-19,-2,15, 
  /* [14][0][][] */ 50,-3,82,1,50,-9,-127,-109,3,-37,30,64,-3,-85,-11,-36, 
  /* [15][0][][] */ -83,-21,-28,-51,-4,40,120,22,-1,46,127,-8,66,68,29,-24, 
  /* [16][0][][] */ 51,101,105,127,-11,4,65,37,-85,18,-86,27,16,-9,-17,-107, 
  /* [17][0][][] */ -45,-94,-23,23,-65,-22,-46,20,-127,-27,9,-59,-1,44,34,-22, 
  /* [18][0][][] */ 4,38,19,72,54,12,27,-9,60,51,-27,-26,23,127,54,6, 
  /* [19][0][][] */ 0,3,51,31,108,2,-84,-93,-110,-114,-16,-127,-75,-70,34,-65, 
  /* [20][0][][] */ 70,16,-76,-43,-1,-127,27,58,-30,-2,-67,-18,44,8,36,47, 
  /* [21][0][][] */ 94,6,39,-18,-19,-42,-47,44,-44,-8,23,57,-49,127,38,33, 
  /* [22][0][][] */ -60,49,8,91,-49,30,127,89,-24,-9,25,-9,4,9,11,47, 
  /* [23][0][][] */ 82,-12,127,-91,57,-27,8,57,-24,34,-50,-8,-31,2,-38,25, 
  /* [24][0][][] */ -127,41,0,-28,0,113,17,-18,15,27,109,-15,-64,27,58,-29, 
  /* [25][0][][] */ 23,19,15,23,11,19,66,-63,0,-127,-17,-9,-22,-29,11,-3, 
  /* [26][0][][] */ -39,-10,8,10,-49,0,-28,-29,-107,-24,7,-42,7,127,-31,57, 
  /* [27][0][][] */ -10,25,12,82,46,-12,-26,-38,76,-6,-29,7,17,127,-10,6, 
  /* [28][0][][] */ 4,50,58,47,127,12,45,30,-42,-27,-19,-26,24,59,47,-31, 
  /* [29][0][][] */ 20,-18,18,38,33,5,-4,23,-53,-19,-23,-127,4,-15,-18,0, 
  /* [30][0][][] */ -22,81,-48,56,-45,-5,23,-127,-51,33,-13,0,55,23,50,75, 
  /* [31][0][][] */ -62,-15,4,-97,7,22,-41,-91,-5,104,-20,-127,-57,-37,64,49, 
  /* [32][0][][] */ -127,-79,24,39,59,55,13,22,11,-37,-73,20,79,7,50,65, 
  /* [33][0][][] */ 0,-56,-56,-10,-127,5,-96,-21,54,17,31,-52,49,-126,96,26, 
  /* [34][0][][] */ 63,-4,67,16,49,16,-64,81,-74,-52,55,26,16,4,-18,127, 
  /* [35][0][][] */ -34,48,-83,3,-2,-8,33,-105,96,65,-96,16,6,3,72,-127, 
  /* [36][0][][] */ -17,19,58,122,70,48,127,35,-14,31,-96,4,-24,32,-26,-74, 
  /* [37][0][][] */ 14,6,-10,-79,-19,21,-64,-103,-90,-14,-2,-12,-7,-127,37,-91, 
  /* [38][0][][] */ 54,80,-7,-28,112,4,23,-70,127,80,-2,17,21,-33,28,5, 
  /* [39][0][][] */ -54,84,12,-127,8,19,-17,56,61,-90,-18,-37,16,69,57,70, 
  /* [40][0][][] */ 22,-42,23,-98,24,-37,-6,-29,-116,35,-46,8,-17,-105,127,-74, 
  /* [41][0][][] */ -9,1,-22,-5,14,-35,8,2,-16,6,-52,3,-127,11,40,29, 
  /* [42][0][][] */ 92,90,-50,-13,-75,-15,-35,-63,0,3,87,-43,-63,27,95,-127, 
  /* [43][0][][] */ -28,54,-94,19,32,-5,60,-58,71,65,11,14,56,-123,-127,-43, 
  /* [44][0][][] */ 13,-12,-5,-36,45,-13,-127,-84,23,-6,-1,34,23,-17,70,-74, 
  /* [45][0][][] */ -31,61,-107,-53,20,-82,51,-43,-8,26,17,-127,26,3,30,34, 
  /* [46][0][][] */ 4,0,-31,-93,-24,33,25,-35,-127,-40,17,6,6,-127,41,-39, 
  /* [47][0][][] */ 17,31,30,-12,127,-6,-9,24,-43,41,-4,19,5,7,122,-24, 
  /* [48][0][][] */ -127,-96,-27,41,61,44,12,-23,-3,-28,-104,40,88,5,59,47, 
  /* [49][0][][] */ 18,13,98,91,127,-7,51,21,-90,-42,-37,-47,8,113,15,-64, 
  /* [50][0][][] */ -2,-16,-127,-24,13,-111,-3,6,2,13,19,-68,42,1,-33,66, 
  /* [51][0][][] */ 7,6,26,-15,18,5,-4,12,-112,40,26,-127,30,-99,-41,87, 
  /* [52][0][][] */ 14,64,-14,80,53,-25,3,5,35,127,-24,-47,31,123,69,8, 
  /* [53][0][][] */ 9,-58,-1,-21,-111,-5,-96,-12,75,35,29,-67,55,-127,106,24, 
  /* [54][0][][] */ 30,46,-77,28,80,79,-127,-42,-84,-4,-42,-46,-36,-28,14,-39, 
  /* [55][0][][] */ 61,-31,-26,-2,8,-34,-96,-127,-28,-73,-42,4,14,-34,19,12, 
  /* [56][0][][] */ -23,23,31,-17,-4,-21,-90,82,-14,127,-6,-12,11,6,16,6, 
  /* [57][0][][] */ -10,13,-44,-35,-47,-50,127,96,-57,29,3,-32,32,44,114,3, 
  /* [58][0][][] */ 42,8,-108,40,107,120,-35,47,-127,-59,-14,17,-48,46,35,-52, 
  /* [59][0][][] */ -83,59,127,18,-61,-54,123,120,1,9,-2,-15,2,12,95,-2, 
  /* [60][0][][] */ 26,-11,-60,-5,3,-127,-31,13,-16,1,-13,-3,29,0,1,-11, 
  /* [61][0][][] */ 6,-4,29,112,80,27,39,18,-127,-1,15,49,-24,25,59,-55, 
  /* [62][0][][] */ -26,127,4,-47,-33,-24,-48,54,-24,-39,-76,-57,-21,-59,-39,-3, 
  /* [63][0][][] */ -73,44,-65,127,-110,14,-60,-16,-96,-41,-21,-74,44,96,30,56, 
  /* [64][0][][] */ 16,4,11,31,11,-2,-25,52,7,-8,-6,-41,-2,-127,26,10, 
  /* [65][0][][] */ -33,-46,11,-118,25,-7,76,-15,-16,26,22,-127,16,1,6,-20, 
  /* [66][0][][] */ 32,-90,127,18,14,38,-13,109,71,-54,36,63,53,105,36,21, 
  /* [67][0][][] */ 9,52,-5,-127,-7,-15,-41,44,58,-76,-41,-9,16,88,91,50, 
  /* [68][0][][] */ -56,76,127,-14,-25,55,2,7,-121,-93,-36,-57,-2,-24,101,-32, 
  /* [69][0][][] */ 127,76,-42,-8,-114,-29,4,-19,-39,54,79,-98,-85,72,73,-79, 
  /* [70][0][][] */ 8,4,-49,-23,-26,43,65,127,-40,63,-9,-28,30,58,-35,40, 
  /* [71][0][][] */ 7,2,1,17,10,-65,-3,11,-28,14,-72,15,-127,-9,49,39, 
  /* [72][0][][] */ -7,8,-127,10,28,19,51,109,-66,-24,-1,-28,21,28,-10,13, 
  /* [73][0][][] */ -62,46,46,-18,33,-36,-85,-127,-1,-91,42,-5,-6,-37,60,-14, 
  /* [74][0][][] */ -5,42,42,117,8,-2,-96,103,-41,7,-55,46,1,-127,32,-105, 
  /* [75][0][][] */ -74,-27,-61,-24,-22,59,55,-16,105,-10,44,-49,88,127,-75,9, 
  /* [76][0][][] */ -8,-23,6,7,4,-8,-8,55,7,-33,-28,-127,4,-8,16,5, 
  /* [77][0][][] */ -25,72,-42,127,-55,-10,86,112,-1,39,4,51,-25,-16,-13,3, 
  /* [78][0][][] */ -31,4,30,-127,51,-20,-12,44,3,-84,39,-82,54,109,-27,73, 
  /* [79][0][][] */ 13,-96,-94,-99,-127,-40,11,-92,127,33,5,79,-6,71,76,-33, 
  /* [80][0][][] */ -64,1,61,-68,-10,-29,40,-44,-72,26,-8,-127,22,86,35,-12, 
  /* [81][0][][] */ -55,52,-105,41,98,-127,-21,66,24,-60,76,10,26,-4,32,-8, 
  /* [82][0][][] */ 127,9,-12,9,18,-97,-15,44,-10,-12,-90,-19,121,14,-12,49, 
  /* [83][0][][] */ -41,74,-105,-83,-28,-27,45,-85,34,40,-22,-127,11,48,28,107, 
  /* [84][0][][] */ -1,11,61,-10,17,-12,36,-127,-24,40,-28,-10,28,34,63,-28, 
  /* [85][0][][] */ -66,110,22,-127,-83,-35,-23,-14,-86,5,-85,18,-9,-3,-84,-26, 
  /* [86][0][][] */ -5,8,-35,-13,-25,-32,127,33,-19,-28,5,-12,-8,48,70,-1, 
  /* [87][0][][] */ -19,-47,14,-127,17,-43,63,-19,-24,27,-24,-106,-34,5,33,-53, 
  /* [88][0][][] */ 72,6,-30,-28,-20,-127,-34,12,-116,56,-97,-35,-6,44,46,-14, 
  /* [89][0][][] */ 12,-18,-25,-31,17,11,-12,-20,-35,-4,42,-63,127,-6,1,-35, 
  /* [90][0][][] */ -33,-71,50,-81,56,25,-45,106,53,-119,-36,-40,15,117,29,-127, 
  /* [91][0][][] */ -45,1,-50,-27,17,1,-30,-85,12,101,-9,-127,-43,14,26,6, 
  /* [92][0][][] */ -17,43,43,26,5,-127,10,-6,12,-33,9,-7,-14,-38,22,7, 
  /* [93][0][][] */ 50,-28,127,-8,-55,43,28,-42,-18,30,-60,-9,-23,-8,27,-14, 
  /* [94][0][][] */ 24,-40,-19,-19,24,42,11,-14,-7,-23,37,-64,127,-27,18,-45, 
  /* [95][0][][] */ 127,106,-12,34,-86,-57,-90,-15,-29,-31,83,-14,-61,6,104,-62, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant7_scale = { 96, { 0.00073925114702433348, 0.0015439892886206508, 0.00071943539660423994, 0.0013418828602880239, 0.00067582703195512295, 0.0015549996169283986, 0.00055219413479790092, 0.0011272362899035215, 0.0006861294386908412, 0.0011113893706351519, 0.00047338884905911982, 0.00080108986003324389, 0.0010203178972005844, 0.003996098879724741, 0.00057100603589788079, 0.00052654178580269217, 0.00040816600085236132, 0.00078376464080065489, 0.0012008384801447392, 0.00086711597396060824, 0.0004297146515455097, 0.00034595117904245853, 0.00056156539358198643, 0.00033164996420964599, 0.00048118940321728587, 0.0014941851841285825, 0.0017577407415956259, 0.00080465263454243541, 0.00093574123457074165, 0.0012498596915975213, 0.00091304356465116143, 0.00092284131096675992, 0.00083760684356093407, 0.00067919079447165132, 0.0010613839840516448, 0.00094957917463034391, 0.00051573896780610085, 0.00060676952125504613, 0.00082420994294807315, 0.00081404839875176549, 0.0004652029019780457, 0.0014337104512378573, 0.0010537483030930161, 0.0006064188783057034, 0.0016832133987918496, 0.0007499022176489234, 0.0007382973562926054, 0.00089371582726016641, 0.0010082430671900511, 0.0007402392802760005, 0.00080877623986452818, 0.00063907925505191088, 0.0015220975037664175, 0.00071667111478745937, 0.0012715331977233291, 0.0013662793207913637, 0.0013652292545884848, 0.0008562962175346911, 0.00085681339260190725, 0.00059853034326806664, 0.0029109225142747164, 0.001404612441547215, 0.00070945691550150514, 0.00087370991241186857, 0.0017578819533810019, 0.0008674554992467165, 0.00028853747062385082, 0.00056336063425987959, 0.00088096933905035257, 0.0012238528579473495, 0.00071417831350117922, 0.00070102006429806352, 0.0015426642494276166, 0.0010257206158712506, 0.00089983834186568856, 0.00042868638411164284, 0.000800757494289428, 0.00037468699156306684, 0.00028576856129802763, 0.00063257798319682479, 0.00057075393851846457, 0.00043160706991329789, 0.00054000091040506959, 0.00066340103512629867, 0.00042761853546835482, 0.00071445491630584002, 0.0018379747634753585, 0.00063693628180772066, 0.00046856518019922078, 0.0016373858088627458, 0.00066695286659523845, 0.00084721832536160946, 0.00077297631651163101, 0.0013328834902495146, 0.00099819840397685766, 0.00050099717918783426, } };
const TfArray<96, int> quant7_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data8[16] = { -8663, 22521, -31073, 135, -4933, 4840, 16746, -60375, 5297, 5537, 35080, 9781, -1653, 7554, -9238, 14174, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const TfArray<16, float> quant8_scale = { 16, { 0.00077492982381954789, 0.00044576742220669985, 0.00024404593568760902, 0.00027608301024883986, 0.0005191389936953783, 0.00039192556869238615, 0.00042472544009797275, 0.00026881630765274167, 0.00040652893949300051, 0.00030805551796220243, 0.00058228394482284784, 0.00053999386727809906, 0.00039938645204529166, 0.0002255734580103308, 0.00048155957483686507, 0.00060519954422488809, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data9[16*1*1*96] = { 
  /* [0][0][][] */ -22,-22,8,-26,21,-23,-22,1,22,1,-22,9,13,6,-24,1,4,-2,3,-9,3,-60,6,8,12,26,18,127,28,-31,49,2,-15,7,6,3,-12,15,-29,11,-3,5,7,40,3,42,12,10,29,7,-2,16,17,-20,-12,92,-11,3,-26,-37,-2,11,2,-4,-31,-37,-9,30,17,12,2,-16,-4,-16,6,-10,-8,17,0,0,-1,-28,32,16,-18,-9,-8,-82,-1,-7,29,-6,65,-15,-15,-8, 
  /* [1][0][][] */ 43,-87,-119,-83,93,-51,57,23,-17,-80,-57,-36,42,-19,-59,32,-52,-24,43,35,1,-38,0,-105,31,22,-2,-41,55,-21,-52,34,-6,32,21,-23,46,-14,21,15,-31,27,-47,37,-39,85,17,-30,15,-45,25,-54,-36,32,63,77,-56,-28,-34,-36,40,-51,7,-36,-87,127,13,-10,-27,-7,-35,3,67,-88,-14,30,-28,-76,-4,16,-6,-55,3,-4,-52,72,-20,32,11,-23,-6,15,-22,12,20,101, 
  /* [2][0][][] */ -26,64,-61,39,121,96,46,122,22,-127,-4,19,-3,-14,79,29,15,10,-51,74,17,-13,81,14,59,5,7,-82,43,-1,81,-45,25,28,-13,77,-97,-78,71,54,-6,-33,55,-7,25,10,-38,98,-9,77,-47,14,73,-17,-13,88,9,28,-8,10,30,41,-24,-30,17,0,-1,16,-36,-5,24,-24,-60,-80,-29,48,107,105,59,-3,52,-53,7,-22,-24,67,8,87,1,43,32,-61,42,-6,-26,-6, 
  /* [3][0][][] */ 15,12,127,11,47,-33,66,11,-2,-60,5,-11,17,45,43,39,9,-5,21,-1,115,5,19,60,37,-12,-7,-8,12,-13,-22,92,-101,0,25,9,-29,-9,-6,62,-56,-27,84,22,11,75,-24,-55,-42,-15,-25,51,16,-122,2,29,-112,69,-1,9,11,72,-30,-34,27,66,12,-51,49,-18,12,-41,34,-10,33,-34,45,26,52,54,-5,-37,15,0,-46,31,13,51,24,6,30,11,73,88,55,-21, 
  /* [4][0][][] */ -8,21,57,14,127,53,16,-9,-31,-69,-52,-27,-25,25,3,47,9,-58,-74,53,-16,84,1,15,-5,-36,12,-85,16,-23,31,-20,70,6,-38,19,61,19,-20,22,-67,-28,-30,-32,-28,-27,-17,10,20,24,-39,-4,-18,-38,-11,-10,-31,-14,-58,44,13,86,29,23,60,30,-3,-16,-44,8,55,61,8,-80,-47,-21,38,77,85,-44,-12,-21,-5,11,-52,47,40,54,-32,51,-3,-44,24,9,29,-27, 
  /* [5][0][][] */ 14,-8,22,21,29,22,35,-5,-22,-39,-3,9,-23,27,9,18,-6,8,11,-2,36,27,-48,44,7,-2,8,-95,-6,21,22,13,-9,8,12,-32,1,21,-6,26,-8,-4,35,-48,2,-8,-11,-15,-8,-13,6,-1,-13,-26,-9,-84,12,19,-10,19,56,46,-4,26,-3,25,19,69,7,74,37,39,-4,8,-26,50,8,10,31,26,-4,-3,4,19,-3,7,-7,127,5,33,4,-20,23,19,-35,23, 
  /* [6][0][][] */ 45,-51,-9,-45,-36,38,25,7,-1,8,5,-75,-44,-21,-13,32,17,-2,-8,-1,-17,45,25,-2,-23,-14,-32,-12,-12,14,31,-22,55,14,43,-13,-3,-8,14,-63,-14,62,-19,-21,10,-74,-18,11,-19,24,-6,55,-13,-38,3,-4,39,-41,7,15,-15,65,39,-81,23,-61,1,11,-15,-6,127,4,-38,-10,-29,12,-106,-11,19,-4,4,36,12,4,-4,1,31,2,7,-4,8,-26,-41,-34,-32,-8, 
  /* [7][0][][] */ 33,127,5,-6,97,69,24,-34,-46,-10,49,-45,-69,-12,34,39,-2,-39,-11,49,24,-16,64,-9,-1,-31,18,6,31,11,10,20,75,4,-44,1,33,2,-9,70,-48,19,-4,50,-42,-83,8,-28,-35,-44,11,-13,-15,-8,-28,75,68,14,-5,16,11,-14,-16,-20,-44,72,-33,-66,-36,-44,26,55,-32,-48,14,25,14,38,39,-43,-79,-51,-25,-12,5,62,-23,-7,-35,21,-57,3,-81,-53,4,-18, 
  /* [8][0][][] */ -20,-4,92,41,-88,-12,99,-43,40,72,45,10,12,15,49,-18,-65,6,-1,11,-56,38,-127,102,-2,-52,42,-35,7,1,-7,30,74,-12,-9,-6,15,-11,-29,7,-31,-44,42,7,-56,-13,22,3,-97,11,-7,12,-63,-29,-40,56,-40,-44,-100,-19,48,-33,-63,-7,-8,102,-15,-39,19,-8,-39,-36,18,67,42,-19,13,-50,1,5,-75,17,-5,0,-9,26,53,48,0,-22,83,11,-10,-17,62,-15, 
  /* [9][0][][] */ -37,-69,-3,19,103,98,-12,-23,29,-47,69,100,28,48,59,-98,18,-30,-14,-6,-21,-87,25,9,-20,36,-8,36,-27,-5,-35,-29,-8,-1,-90,26,-24,27,-6,72,20,-97,-9,72,-11,19,-47,-19,21,12,-29,-62,57,47,-17,-24,-23,99,11,45,6,-56,-22,127,-42,-12,2,-26,-4,55,-42,-82,73,-19,6,27,82,-66,20,2,11,-28,24,-3,-7,-65,27,-5,-20,-22,-39,25,-31,-3,5,0, 
  /* [10][0][][] */ -32,-42,-14,-46,-30,-17,96,-46,42,25,22,19,23,1,6,-14,-33,16,-22,-10,-21,74,15,44,-17,-24,11,-127,18,-35,82,-19,-4,18,-1,-22,16,28,-26,-35,6,-31,18,-89,-3,-25,8,10,-4,25,-33,-45,-42,-21,-18,-77,-3,-6,0,-56,28,-5,-26,20,-45,104,-17,-25,11,-17,-18,-26,-56,9,26,78,11,45,-17,5,-31,-3,8,32,-19,-26,-16,124,-11,6,34,12,10,-52,46,-62, 
  /* [11][0][][] */ -127,28,37,27,50,-68,23,22,-40,-24,-29,38,60,67,-23,-21,63,10,-88,-54,26,-30,-36,23,66,15,92,-9,-24,5,-52,31,-11,22,-12,25,-8,17,27,52,-30,-9,28,9,85,77,91,68,56,79,-5,51,27,-70,24,29,-119,0,-68,-43,7,-15,-21,29,0,-8,39,-5,53,-9,5,31,-25,15,27,4,17,117,-112,83,-16,-2,-67,-85,123,51,45,8,19,58,-5,-82,22,76,1,-22, 
  /* [12][0][][] */ 9,-13,-27,-1,53,3,-14,-28,-12,24,34,-3,-18,-5,48,-10,-48,12,16,-12,-2,40,-59,71,-30,16,-32,95,-30,30,-19,6,-25,26,1,11,-22,-21,-12,-31,12,-7,-12,-60,-6,-29,11,-2,1,-20,-8,-31,-13,5,-21,-71,8,-18,8,12,-23,-20,-5,47,34,-95,0,62,-41,-127,-10,55,-3,4,3,52,17,-22,-3,6,-9,28,-43,8,22,-55,3,-65,-11,4,-7,-11,-59,24,-11,10, 
  /* [13][0][][] */ -50,92,-56,-26,-90,36,-57,12,-60,-21,49,-3,68,-11,-35,36,-27,34,-60,10,12,34,83,-78,48,14,-28,-4,-3,-23,-47,-112,-83,-42,-3,-5,-32,28,47,-37,-25,89,-37,11,36,-52,-32,3,54,-23,35,67,63,-38,80,-45,4,62,104,36,-2,60,-7,-1,-1,-53,-17,3,-10,39,53,-127,34,-54,-96,16,6,10,-35,-61,41,-36,-31,-27,65,-68,95,-26,-28,-30,-52,68,-7,-80,-47,32, 
  /* [14][0][][] */ -38,60,-62,-75,23,32,-15,26,-127,25,25,14,2,-94,-100,-16,-90,-31,33,16,57,-25,26,-122,-49,-4,-65,-32,-6,-47,-50,-58,-70,-28,3,7,-25,-6,36,4,0,81,-102,-14,-31,23,26,23,121,-38,39,-6,25,48,-102,45,-26,48,-107,48,-11,48,67,22,3,23,-22,-11,-59,31,87,38,71,-29,-48,38,0,-90,-33,-104,-8,-40,-10,53,42,-68,-25,-8,-54,3,9,64,0,36,4,-18, 
  /* [15][0][][] */ -4,-91,-37,-44,4,-5,-12,-79,-27,25,7,-44,23,-36,45,-6,-75,-3,1,32,-40,22,-36,-35,-12,-6,-16,9,-12,8,58,-50,18,14,4,-12,13,10,-79,-14,0,-47,-17,44,-21,-81,35,11,42,8,-6,-127,-10,48,-3,33,31,-16,-10,28,18,-22,34,-15,-18,-2,-15,10,-29,33,-6,30,-29,-2,13,-21,-63,-20,-10,-6,-27,29,-17,55,10,-41,-43,-35,-29,34,15,78,-79,-16,-6,-18, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant9_scale = { 16, { 0.032934516668319702, 0.018945114687085152, 0.010371952317655087, 0.011733528226613998, 0.022063406184315681, 0.016656836494803429, 0.018050830811262131, 0.011424693278968334, 0.01727747917175293, 0.013092359527945518, 0.02474706806242466, 0.022949738427996635, 0.016973923891782761, 0.0095868716016411781, 0.020466281101107597, 0.025720980018377304, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data10[96] = { 23305, 58486, 34, 743, 19087, -3707, -1048, 1435, 6864, 19031, -6129, -185, 2588, 4403, 5501, -9358, -4722, -569, -635, 10555, -9732, 27812, -3270, 11568, 25757, -1268, -4201, 19684, 15899, -18730, 1977, 24301, 26086, -11856, 1834, 519, 413, -1185, 5229, -10924, -6475, -1667, -7618, -303, 31701, -2886, 12666, -1519, -14582, 3536, 548, -890, -2988, 19715, -5384, 9358, 30920, 608, 44300, 1331, -10800, -1132, 1064, -59, -607, 15414, -1364, -7191, -5304, 2590, -991, -6931, 3697, 114, -2715, -6622, 1934, -953, 44795, -7560, -6737, -11123, -1702, -2083, 70318, -12597, -11449, -27895, -5227, 11574, -2788, 36949, 333, -2335, -2312, 503, };
const TfArray<1, int> tensor_dimension10 = { 1, { 96 } };
const TfArray<96, float> quant10_scale = { 96, { 0.00010118834325112402, 9.5851319201756269e-05, 0.00012334066559560597, 0.00020468882576096803, 0.00019815308041870594, 0.00020737521117553115, 5.1352159061934799e-05, 0.0001016050300677307, 0.00022858800366520882, 0.00012494351540226489, 0.00021831487538293004, 0.00010186695726588368, 0.00026609798078425229, 0.0002102378784911707, 0.00035637046676129103, 0.00013294110249262303, 0.00019780264119617641, 0.00016185878484975547, 0.00019901276391465217, 0.00010083375673275441, 8.2809747254941612e-05, 4.9917980504687876e-05, 0.00014972052304074168, 5.9320165746612474e-05, 6.9240632001310587e-05, 9.902815509121865e-05, 0.00016456394223496318, 0.00015615220763720572, 7.5474687037058175e-05, 0.00044458749471232295, 0.00039335331530310214, 0.00024489301722496748, 0.00011178852582816035, 0.00012941933528054506, 0.00024583583581261337, 0.00044461304787546396, 0.00050837156595662236, 0.00013982594828121364, 0.00022022266057319939, 7.6023483416065574e-05, 0.00024368608137592673, 0.00016407716611865908, 0.00049375375965610147, 9.0916611952707171e-05, 0.00041909594438038766, 0.00010000898328144103, 0.00010051551362266764, 0.00021336758800316602, 0.00071175163611769676, 8.3004444604739547e-05, 0.00038060432416386902, 0.00013248766481410712, 0.00018181651830673218, 0.00014809207641519606, 0.00014239078154787421, 0.00016407547809649259, 9.2421098088379949e-05, 0.00045540233259089291, 3.9980466681299731e-05, 0.00019130395958200097, 0.00027905029128305614, 0.00038938189391046762, 0.00013373182446230203, 0.00015296963101718575, 0.0001224455627379939, 0.00012888788478448987, 0.00026092500775121152, 0.00030903311562724411, 0.00020813572336919606, 0.00012316802167333663, 0.00023326805967371911, 0.00010138548532268032, 0.00031263590790331364, 0.00015178964531514794, 0.00028217447106726468, 0.00029579372494481504, 0.00013535210746340454, 8.5080668213777244e-05, 5.6533095630584285e-05, 0.00016810728993732482, 0.00016400097229052335, 0.00023242266615852714, 0.00018005426682066172, 0.00037921956391073763, 5.004395279684104e-05, 0.00011667076614685357, 6.8648230808321387e-05, 0.00047925833496265113, 0.00032430424471385777, 0.00011874553456436843, 0.00035010246210731566, 3.1641084206057712e-05, 0.00015813081699889153, 0.00010947601549560204, 0.00039086135802790523, 0.00038885255344212055, } };
const TfArray<96, int> quant10_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data11[1*3*3*96] = { 
  /* [0][0][][] */ -47,-71,-8,127,21,78,86,-63,-16,-19,-14,-7,-31,-5,36,0,-7,-46,27,20,20,-127,127,15,-86,12,46,-31,-125,-127,39,25,10,24,60,-19,-28,-11,32,-9,-11,28,-100,79,23,-75,37,45,-18,54,-25,21,0,-5,15,49,-101,-50,-68,-20,-8,1,12,39,66,-26,75,16,-2,18,22,127,20,23,28,1,-12,21,127,-10,-14,15,-23,25,127,17,-77,-17,-1,-35,-13,-51,6,-28,-15,25, 127,-127,78,105,-43,127,50,-127,71,4,-16,127,127,-103,-13,14,11,127,127,-109,127,-61,74,78,-127,-108,-67,-35,-55,47,-58,-23,-86,49,-127,-91,-41,-16,-52,61,1,127,127,78,-53,-117,-111,-51,-15,-127,43,89,67,-33,44,77,-49,41,-90,-118,-39,-41,-63,67,73,-60,26,32,-70,34,-16,86,112,127,10,20,-2,57,-33,55,65,127,127,-22,-7,71,-109,127,-120,-97,5,-127,-87,-127,-38,103, -78,-17,28,-80,13,-17,76,-11,81,-36,-27,28,-24,-4,-8,-13,-7,-20,9,-4,-26,-119,33,9,-119,94,6,-56,117,51,-13,8,-4,13,13,-32,-9,32,17,16,24,14,-107,73,19,-24,39,13,-15,15,-19,9,-12,0,-3,24,-78,3,-49,49,3,42,32,-2,-2,-40,-34,19,7,4,-2,41,9,-27,-4,5,-11,-4,-79,-1,-22,-19,-13,7,-108,13,-36,-23,-51,21,-26,-42,28,-33,-17,2, 
  /* [0][1][][] */ -68,-72,72,-34,-51,93,23,125,-53,-21,0,-125,25,-111,77,34,0,-64,-18,89,47,-83,44,60,-111,-8,127,-23,-24,62,119,-109,-127,91,-85,-59,-34,30,-30,102,-44,-26,-8,48,-52,127,-25,63,14,97,17,-2,23,-56,27,29,127,123,-80,-84,127,-31,-34,127,69,-38,-13,0,127,42,127,95,-43,98,-2,9,12,15,-28,6,-43,119,-74,113,6,32,-56,30,81,-127,-30,-16,127,-66,-21,-1, 67,126,58,-114,127,76,86,35,-127,127,127,-47,-70,-127,-127,127,127,-65,-125,-49,100,91,-120,127,-112,-86,-43,127,-127,108,-127,-127,-85,127,108,127,127,-127,-109,127,-61,-99,112,-127,-127,-32,-127,-127,127,-114,81,44,127,127,127,-127,103,-127,-127,127,18,-79,-127,-101,-127,127,-127,127,-109,-127,-104,-82,-127,-80,127,127,-127,127,-78,127,127,34,-38,-127,58,127,96,48,127,11,127,0,-67,37,127,-127, -56,-15,-52,31,-59,-91,41,-28,16,-35,-27,103,0,100,14,12,-1,63,-5,127,-5,-109,-37,18,-91,110,-73,-23,-73,-17,17,-65,-76,39,4,-20,-28,43,-72,64,127,-4,-34,36,-41,-58,14,44,8,119,-14,8,-34,-73,4,23,92,0,-6,17,-34,127,88,-51,-40,9,34,-11,-71,126,-15,-78,-3,-53,-17,-25,26,21,80,-36,-70,-38,59,20,-47,-13,72,22,14,51,-42,10,-45,95,-26,-4, 
  /* [0][2][][] */ -69,0,-7,-21,9,-44,64,29,51,-28,-34,-2,14,19,-27,-3,-4,65,5,4,-62,-102,6,0,-30,-44,37,-71,85,36,22,20,12,-7,-10,-50,-7,34,-6,13,-13,-5,-65,116,4,36,7,36,-14,-33,3,-19,24,-5,11,17,-80,22,-22,17,22,0,-17,0,-1,-49,-44,14,-21,13,27,32,10,-20,27,2,17,5,-72,-9,-8,-12,19,16,-122,11,16,-44,-59,-54,-24,-54,13,57,-20,-7, 120,31,-127,-37,-75,-28,41,35,-67,-28,-18,-116,-86,114,-13,32,5,-51,-11,-121,82,-71,-35,10,-113,127,-50,18,-38,-23,-9,-9,-65,17,28,3,-24,-29,127,65,12,-12,71,-23,-40,84,-73,-42,-31,-6,-127,-127,-44,-26,5,40,-76,-8,17,38,-2,-18,11,-46,-56,31,63,-24,106,111,-20,-63,6,-55,4,5,90,5,54,24,13,-102,-45,6,2,12,127,40,-63,34,-14,-112,41,77,-10,27, -56,9,-22,18,12,-59,-127,6,-14,-7,-15,14,13,-14,18,-3,-3,-15,5,19,-59,-107,16,13,4,-77,19,-1,-53,-42,-6,12,29,-17,-8,-28,-33,3,41,-15,26,0,-42,-16,2,73,18,18,-8,-4,3,-7,18,2,-3,4,-75,-15,-10,-45,-6,11,83,-6,33,-6,-2,29,-1,6,1,25,-22,18,0,14,38,5,78,-10,3,-8,-2,-12,73,6,43,-39,53,32,-16,-66,-8,0,-15,-12, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant11_scale = { 96, { 0.004300504457205534, 0.0040736808441579342, 0.0052419784478843212, 0.0086992746219038963, 0.0084215058013796806, 0.0088134463876485825, 0.0021824666764587164, 0.0043182135559618473, 0.009714989922940731, 0.0053100995719432831, 0.0092783821746706963, 0.0043293456546962261, 0.011309164576232433, 0.0089351097121834755, 0.015145744197070599, 0.0056499969214200974, 0.0084066120907664299, 0.0068789981305599213, 0.0084580425173044205, 0.0042854347266256809, 0.0035194142255932093, 0.0021215141750872135, 0.0063631222583353519, 0.0025211069732904434, 0.0029427267145365477, 0.0042086965404450893, 0.0069939671084284782, 0.006636468693614006, 0.0032076742500066757, 0.018894968554377556, 0.016717515885829926, 0.010407953523099422, 0.0047510121949017048, 0.0055003217421472073, 0.010448022745549679, 0.018896054476499557, 0.02160579152405262, 0.0059426026418805122, 0.0093594631180167198, 0.0032309980597347021, 0.010356658138334751, 0.0069732791744172573, 0.020984534174203873, 0.0038639560807496309, 0.017811577767133713, 0.0042503816075623035, 0.0042719091288745403, 0.0090681221336126328, 0.030249444767832756, 0.0035276887938380241, 0.016175683587789536, 0.0056307255290448666, 0.0077272020280361176, 0.0062939128838479519, 0.006051607895642519, 0.0069732079282402992, 0.0039278967306017876, 0.019354598596692085, 0.0016991697484627366, 0.008130418136715889, 0.011859637685120106, 0.016548730432987213, 0.005683602299541235, 0.0065012089908123016, 0.0052039362490177155, 0.0054777348414063454, 0.011089312843978405, 0.01313390675932169, 0.0088457679376006126, 0.0052346405573189259, 0.0099138924852013588, 0.0043088831007480621, 0.01328702550381422, 0.006451060064136982, 0.011992414481937885, 0.012571233324706554, 0.0057524642907083035, 0.0036159283481538296, 0.0024026564788073301, 0.0071445596404373646, 0.0069700414314866066, 0.0098779629915952682, 0.0076523059979081154, 0.016116831451654434, 0.0021268678829073906, 0.0049585076048970222, 0.0029175498057156801, 0.020368479192256927, 0.013782929629087448, 0.0050466852262616158, 0.014879354275763035, 0.0013447459787130356, 0.0067205596715211868, 0.004652730654925108, 0.016611607745289803, 0.016526233404874802, } };
const TfArray<96, int> quant11_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data12[96] = { 2541, 9595, 13179, 28464, 14007, -3441, -1960, 8085, 27464, -4332, 11013, 4750, 8390, 13005, 31270, 1932, 2834, 6619, 16841, 6921, -406, 799, 11035, -1159, 4876, 30, 12324, 8368, 6657, 45568, 50473, 20065, 8670, -763, 12303, 3452, 1792, 6056, 24941, -1128, 8484, 8462, 69617, -2516, 33015, 3716, 5172, 20511, 51917, 10575, -368, 10347, -5377, -90, -3991, 7135, 399, 20866, 5650, 7972, 6959, 12396, 8123, 5626, 12244, 9937, 5455, -4657, 5507, -2600, 3927, 14177, 26908, 7610, -5149, -4785, 5949, 447, 2155, -1647, 21725, 14450, 4580, 25109, 3543, 132, 17969, 111746, 8815, 11318, 4682, -110, 8484, 8645, 7814, 17265, };
const TfArray<1, int> tensor_dimension12 = { 1, { 96 } };
const TfArray<96, float> quant12_scale = { 96, { 0.0001913773303385824, 0.00015342875849455595, 0.00013095569738652557, 7.9068333434406668e-05, 0.00021919255959801376, 0.00031286728335544467, 0.00042431231122463942, 0.00019995772163383663, 8.5152292740531266e-05, 0.00032225190079770982, 0.00024013686925172806, 0.00020064217096660286, 0.00015627786342520267, 0.00018034907407127321, 7.6641990744974464e-05, 0.00030330987647175789, 0.00017967565509025007, 0.00018126063514500856, 0.00013301007857080549, 0.00016829546075314283, 0.00026621590950526297, 0.00055047147907316685, 0.00018078676657751203, 0.00048542264266870916, 0.0005175380501896143, 0.00022662889386992902, 0.00017635186668485403, 0.00017496547661721706, 0.00024989026132971048, 7.7479860919993371e-05, 5.5469878134317696e-05, 0.00012455819523893297, 0.00019136631453875452, 0.00022861389152240008, 0.00016176719509530813, 0.00016288331244140863, 0.00026034694747067988, 0.00024202433996833861, 0.00010986211418639868, 0.00050277065020054579, 0.00021657974866684526, 0.00019445548241492361, 3.9454556826967746e-05, 0.00036222845665179193, 9.8631826404016465e-05, 0.00036011991323903203, 0.00033381930552423, 0.00013139136717654765, 7.7794204116798937e-05, 0.00019564924878068268, 0.00019504845840856433, 0.00017177598783746362, 0.00020235269039403647, 0.00021733778703492135, 0.00025896658189594746, 0.00014164995809551328, 0.00020258528820704669, 8.9952700363937765e-05, 0.00036198741872794926, 0.0001819828903535381, 0.00022226815053727478, 0.00010484061931492761, 0.00018256409384775907, 0.00017734315770212561, 0.00019786508346442133, 0.00019387739303056151, 0.00023254977713804692, 0.00027528882492333651, 0.00029531080508604646, 0.00029529101448133588, 0.00025995229952968657, 0.00011597553384490311, 7.5903975812252611e-05, 0.00014040041423868388, 0.00031558171031065285, 0.00027276240871287882, 0.00028532190481200814, 0.00033258856274187565, 0.00035258178832009435, 0.00022323759912978858, 9.4600880402140319e-05, 0.00011256105062784627, 0.00017355837917421013, 7.9338198702316731e-05, 0.00032689544605091214, 0.0002220177702838555, 0.00012771805631928146, 3.4685548598645255e-05, 0.00016600862727500498, 0.00020057693473063409, 0.00025960974744521081, 0.00030563474865630269, 0.00017365870007779449, 0.00017908142763189971, 0.00014358908811118454, 9.7456511866766959e-05, } };
const TfArray<96, int> quant12_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data13[96*1*1*16] = { 
  /* [0][0][][] */ -31,20,-27,16,15,53,13,-2,16,19,-36,90,-16,-127,61,-80, 
  /* [1][0][][] */ 39,44,-57,-46,20,-109,121,-127,-4,87,-43,-65,59,-44,-1,5, 
  /* [2][0][][] */ -127,25,-33,-37,-29,-12,35,97,-38,41,79,-29,-66,27,15,1, 
  /* [3][0][][] */ -127,101,34,24,-40,112,102,120,-20,76,13,27,-32,-49,-54,-104, 
  /* [4][0][][] */ -33,20,-13,49,-32,32,6,52,-13,-34,26,-28,31,0,-127,1, 
  /* [5][0][][] */ -21,-58,34,-11,36,-14,-45,33,-77,62,-19,-127,29,-24,-17,-25, 
  /* [6][0][][] */ 2,-11,1,-32,-7,69,-23,-47,-41,-24,58,-48,127,-11,-54,-29, 
  /* [7][0][][] */ -11,59,127,-61,-10,-87,-45,2,-117,17,-117,-92,-15,11,1,-13, 
  /* [8][0][][] */ 94,74,112,10,-106,66,9,55,87,68,-15,-88,47,-4,-127,-93, 
  /* [9][0][][] */ 44,-127,39,33,5,-8,-21,19,114,26,52,-6,5,20,-102,-6, 
  /* [10][0][][] */ -104,-49,50,39,-68,-24,-30,127,92,92,-5,-69,-80,106,43,-16, 
  /* [11][0][][] */ 105,11,-42,-106,18,-25,-122,-101,21,35,-16,46,35,5,127,-62, 
  /* [12][0][][] */ 20,29,25,-17,-58,-68,-30,-20,-23,-48,-76,26,40,92,127,54, 
  /* [13][0][][] */ 13,-127,-52,19,23,-30,-2,-34,70,19,-22,32,2,3,102,-14, 
  /* [14][0][][] */ 11,-76,50,8,56,36,26,127,34,53,-13,-46,15,42,-47,120, 
  /* [15][0][][] */ 35,-49,5,50,1,1,97,-6,6,-127,-13,-36,-1,-32,6,-35, 
  /* [16][0][][] */ 42,-74,-39,27,13,-34,21,-32,93,5,56,-3,14,79,67,127, 
  /* [17][0][][] */ -80,-48,41,78,57,56,-10,-35,122,-103,56,-127,5,-28,-69,32, 
  /* [18][0][][] */ 47,-80,-31,53,-81,-19,-5,9,-72,-54,-127,-94,-37,-88,111,-15, 
  /* [19][0][][] */ 6,-42,34,-30,101,45,-92,127,106,-83,27,-50,-5,116,33,89, 
  /* [20][0][][] */ -5,-2,18,-57,-28,-4,-29,30,-11,-51,90,-15,-19,1,-47,127, 
  /* [21][0][][] */ 9,-14,-11,-68,40,2,-66,-44,-3,46,21,-12,-127,-16,70,20, 
  /* [22][0][][] */ 18,-51,27,-19,13,-49,-14,-17,-127,-1,-28,-51,-40,2,109,6, 
  /* [23][0][][] */ 25,6,11,-15,7,15,-4,20,-5,-19,44,-31,127,8,-7,-34, 
  /* [24][0][][] */ -24,31,25,-70,-45,-9,125,13,-30,66,-32,-127,-16,-123,70,-10, 
  /* [25][0][][] */ -104,7,-77,-93,19,76,-89,-106,-76,56,-19,-127,-29,-32,-17,-56, 
  /* [26][0][][] */ 89,-65,55,-97,127,-35,-61,-32,74,-28,23,53,-8,67,6,30, 
  /* [27][0][][] */ 73,-59,38,-28,-32,-17,22,19,-33,17,-127,18,28,-9,2,34, 
  /* [28][0][][] */ -84,6,-127,-103,32,23,61,-25,-7,32,-43,-10,50,-1,-52,29, 
  /* [29][0][][] */ -60,-44,-8,127,-17,-11,22,-32,9,-3,-76,30,21,-64,47,-18, 
  /* [30][0][][] */ 60,4,127,-42,79,35,-16,85,0,-61,20,-84,-7,59,-58,123, 
  /* [31][0][][] */ 7,-97,38,-39,9,-61,11,-38,-19,41,108,41,-53,89,95,127, 
  /* [32][0][][] */ 2,64,-43,35,-127,39,-61,-50,-57,-23,2,66,12,33,43,65, 
  /* [33][0][][] */ 53,-22,20,127,14,-23,10,-58,-106,55,71,-28,-1,19,8,119, 
  /* [34][0][][] */ 9,9,38,-18,89,-49,-127,-21,-42,88,-34,18,-21,-31,-1,-43, 
  /* [35][0][][] */ 87,-18,-30,-2,34,-120,-43,-8,-33,-19,-80,-14,127,17,-16,26, 
  /* [36][0][][] */ 14,8,-127,27,35,5,-36,9,-29,-15,-9,-14,23,15,-8,14, 
  /* [37][0][][] */ 18,-27,127,-10,-82,12,20,-83,3,70,-24,30,29,1,33,33, 
  /* [38][0][][] */ -115,48,49,47,92,127,-3,4,44,-13,93,4,14,25,21,-37, 
  /* [39][0][][] */ -4,-12,-16,26,22,-30,-127,43,10,16,16,-25,21,-15,10,9, 
  /* [40][0][][] */ -7,88,-28,127,2,15,46,1,-64,-30,-2,51,17,82,-52,-5, 
  /* [41][0][][] */ 26,-5,-37,15,-58,-27,127,50,-25,63,-54,13,-4,54,31,13, 
  /* [42][0][][] */ -54,15,-42,-55,-5,-17,6,127,-48,-39,72,-20,-89,7,-22,45, 
  /* [43][0][][] */ -69,4,-4,-28,26,-21,1,4,-23,26,-9,-76,-127,38,13,37, 
  /* [44][0][][] */ 11,9,-1,39,5,-4,-1,-31,127,11,30,52,17,68,11,44, 
  /* [45][0][][] */ 2,-6,-10,-19,-7,-33,3,-30,-34,-35,-20,-32,-6,25,-23,127, 
  /* [46][0][][] */ -82,12,-18,50,-91,6,-6,-95,-127,47,-50,7,-1,38,25,-30, 
  /* [47][0][][] */ -36,-65,-78,127,-17,30,12,-30,42,82,38,89,-49,2,39,-33, 
  /* [48][0][][] */ 10,-51,45,-127,50,-9,-62,-12,-4,-15,41,-41,41,73,65,24, 
  /* [49][0][][] */ 51,-35,26,100,37,7,-71,-32,57,-6,-59,-26,-48,-64,-114,-127, 
  /* [50][0][][] */ -1,52,37,-126,62,42,-18,88,127,-18,-1,-14,1,-9,9,-2, 
  /* [51][0][][] */ -56,7,-27,26,33,11,-71,-116,-3,-127,37,-39,-35,-16,-21,79, 
  /* [52][0][][] */ 38,-6,-36,80,90,-54,-73,127,-84,97,-46,-54,105,127,31,-13, 
  /* [53][0][][] */ 21,86,-19,-84,-26,8,5,-35,-39,-41,-28,72,20,-127,-69,-8, 
  /* [54][0][][] */ 12,5,35,36,64,-29,2,-49,1,32,-23,-21,3,127,-48,-26, 
  /* [55][0][][] */ -127,123,112,14,40,-83,-14,-4,-15,23,81,5,-88,-31,96,0, 
  /* [56][0][][] */ 38,41,-7,-121,32,53,1,-1,43,3,44,127,-56,-1,110,43, 
  /* [57][0][][] */ -52,-33,15,112,-41,68,119,127,-43,58,-57,26,-29,96,-14,-92, 
  /* [58][0][][] */ 30,87,24,-98,5,-18,-15,5,127,-7,-4,110,-8,-104,59,43, 
  /* [59][0][][] */ 67,59,-6,-69,-60,-6,-20,17,32,12,-7,-48,43,-127,-18,28, 
  /* [60][0][][] */ 57,-26,90,-93,-63,127,64,4,-23,51,-58,-48,6,37,71,38, 
  /* [61][0][][] */ -57,1,-67,-45,10,63,127,109,-23,51,-20,54,-7,82,27,-34, 
  /* [62][0][][] */ -83,11,21,12,-35,73,-3,26,-64,-41,-24,-127,-17,-77,52,-5, 
  /* [63][0][][] */ 29,-8,-2,-96,84,17,-127,-125,-34,83,24,15,87,16,33,-16, 
  /* [64][0][][] */ 1,-15,39,33,120,48,-70,-127,35,-93,10,-40,29,-13,3,-10, 
  /* [65][0][][] */ -81,5,2,-61,13,127,31,-75,-96,21,7,-39,44,23,2,-27, 
  /* [66][0][][] */ 102,22,127,63,-91,54,13,65,-119,-14,103,-97,-40,22,-122,-14, 
  /* [67][0][][] */ -13,-41,-75,19,30,-57,-69,-83,32,-111,-28,-47,-127,-9,-68,26, 
  /* [68][0][][] */ 47,-51,-14,15,-39,-12,-2,-59,-16,-18,38,-9,-2,38,127,-11, 
  /* [69][0][][] */ -14,-22,-62,29,-44,-127,12,46,27,39,19,19,64,45,27,2, 
  /* [70][0][][] */ -11,9,5,-43,-24,-17,127,112,-11,39,-25,41,-7,69,32,19, 
  /* [71][0][][] */ 8,-44,-10,-41,31,34,30,105,-18,-31,-35,-2,27,-127,71,-10, 
  /* [72][0][][] */ 77,42,-31,46,10,-80,-89,-127,4,-9,-69,23,53,65,23,88, 
  /* [73][0][][] */ -65,-113,-27,-127,-84,-33,49,-8,-45,25,13,-80,-7,-51,87,-25, 
  /* [74][0][][] */ 4,54,73,94,-14,-5,-127,84,44,-10,-49,-33,50,0,-2,27, 
  /* [75][0][][] */ -3,6,-44,3,-66,86,73,127,7,64,-24,-4,-60,74,-1,17, 
  /* [76][0][][] */ 27,-11,-10,-25,56,-40,-127,-102,35,15,-4,11,15,5,46,-48, 
  /* [77][0][][] */ -50,6,-59,-37,-64,-26,9,-26,127,-17,-73,11,-9,37,34,-75, 
  /* [78][0][][] */ -71,-127,-15,85,69,44,9,39,-24,-62,-81,78,32,-29,64,25, 
  /* [79][0][][] */ 39,-86,-19,-104,110,-9,127,54,77,12,80,51,23,-39,101,-73, 
  /* [80][0][][] */ 7,-24,45,-122,11,-86,23,10,-36,-11,47,-35,18,127,-65,55, 
  /* [81][0][][] */ 13,-46,34,6,67,36,-51,-9,27,17,45,-47,-6,71,-127,-22, 
  /* [82][0][][] */ -48,-8,44,-73,-4,-77,37,-115,37,-5,-79,-124,-99,-127,-59,-25, 
  /* [83][0][][] */ -47,-6,-37,-84,-38,1,31,53,-127,-17,11,-124,69,-67,-16,64, 
  /* [84][0][][] */ 99,53,-8,63,-65,-17,-48,36,-34,-39,127,-8,-66,29,92,-57, 
  /* [85][0][][] */ -49,-42,17,-24,27,-46,10,127,-77,-78,-55,-30,-49,89,115,-88, 
  /* [86][0][][] */ 101,-36,15,-28,-67,16,-59,72,-72,-103,-34,-72,101,-127,-7,118, 
  /* [87][0][][] */ 127,-18,21,-25,-38,-59,5,29,-10,8,-115,-39,38,40,-2,67, 
  /* [88][0][][] */ -10,63,-5,-1,-5,-23,-5,23,90,13,8,12,2,-16,127,-50, 
  /* [89][0][][] */ 45,86,-87,-45,-52,-54,15,-72,22,32,50,0,-30,-22,-24,-127, 
  /* [90][0][][] */ -9,-68,-16,-13,-111,4,127,-32,25,-79,-2,-78,10,-8,-2,-13, 
  /* [91][0][][] */ 44,-33,-29,-127,-60,56,3,-25,13,14,53,117,5,11,110,113, 
  /* [92][0][][] */ 93,-17,10,19,69,-48,-70,-127,40,-52,2,6,-15,-32,29,27, 
  /* [93][0][][] */ 77,-16,60,-97,-65,-44,-21,-17,-25,-76,33,-35,-17,71,-8,127, 
  /* [94][0][][] */ -113,32,-82,12,74,-92,-36,1,-35,-98,127,-32,-42,-11,-17,24, 
  /* [95][0][][] */ -13,63,18,-121,11,35,-2,14,11,-55,-94,-127,-54,15,-26,59, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant13_scale = { 96, { 0.00070932845119386911, 0.00056867435341700912, 0.00048537936527282, 0.0002930619812104851, 0.00081242393935099244, 0.0011596236145123839, 0.0015726878773421049, 0.00074113113805651665, 0.00031561180367134511, 0.0011944071156904101, 0.00089005270274356008, 0.0007436680025421083, 0.00057923438725993037, 0.0006684528780169785, 0.00028406889759935439, 0.0011241995962336659, 0.00066595693351700902, 0.00067183154169470072, 0.00049299380043521523, 0.0006237769266590476, 0.00098671310115605593, 0.0020402891095727682, 0.00067007518373429775, 0.0017991896020248532, 0.0019182233372703195, 0.00083998625632375479, 0.0006536375149153173, 0.00064849894260987639, 0.00092620309442281723, 0.0002871743927244097, 0.00020559573022183031, 0.00046166739775799215, 0.00070928764762356877, 0.00084734353004023433, 0.00059958029305562377, 0.0006037171115167439, 0.00096496014157310128, 0.00089704850688576698, 0.00040719725075177848, 0.0018634889274835587, 0.00080273969797417521, 0.00072073744377121329, 0.00014623592142015696, 0.0013425777433440089, 0.00036557286512106657, 0.0013347625499591231, 0.001237281016074121, 0.00048699413309805095, 0.00028833950636908412, 0.0007251620409078896, 0.000722935248631984, 0.00063667725771665573, 0.00075000798096880317, 0.00080554932355880737, 0.00095984386280179024, 0.00052501697791740298, 0.00075087009463459253, 0.00033340422669425607, 0.001341684372164309, 0.00067450851202011108, 0.00082382338587194681, 0.00038858538027852774, 0.0006766627193428576, 0.00065731164067983627, 0.0007333749090321362, 0.00071859476156532764, 0.00086193165043368936, 0.0010203412966802716, 0.0010945515241473913, 0.0010944781824946404, 0.00096349738305434585, 0.00042985627078451216, 0.0002813334867823869, 0.00052038562716916203, 0.0011696844594553113, 0.0010109773138538003, 0.0010575283085927367, 0.0012327192816883326, 0.0013068229891359806, 0.00082741660298779607, 0.00035063241375610232, 0.00041720070294104517, 0.00064328359439969063, 0.00029406222165562212, 0.001211618073284626, 0.0008228953811340034, 0.0004733792447950691, 0.00012855988461524248, 0.00061530090169981122, 0.00074342620791867375, 0.0009622277575545013, 0.0011328166583552957, 0.00064365542493760586, 0.00066375441383570433, 0.00053220422705635428, 0.00036121663288213313, } };
const TfArray<96, int> quant13_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data14[16] = { -299, -1756, -12189, 16100, 28184, 314, -1959, 797, 18871, -4927, 28775, 15737, -5921, 20400, 32741, -7036, };
const TfArray<1, int> tensor_dimension14 = { 1, { 16 } };
const TfArray<16, float> quant14_scale = { 16, { 0.00037953411811031401, 0.00032770357211120427, 0.00029109933529980481, 0.00021988574007991701, 0.00032188493059948087, 0.00035046061384491622, 0.00027433503419160843, 0.0004323399334680289, 0.00022307886683847755, 0.00020062272960785776, 0.00031765041057951748, 0.00061289308359846473, 0.00040869897929951549, 0.00052238785428926349, 0.0004206000012345612, 0.00035379303153604269, } };
const TfArray<16, int> quant14_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data15[16*1*1*96] = { 
  /* [0][0][][] */ -7,43,14,13,50,93,-4,-50,52,-8,22,-12,-5,3,8,66,-1,-6,-10,-1,97,-45,3,-10,-19,-30,-31,-123,3,-10,56,37,127,5,18,4,2,-5,-30,3,-29,27,31,-29,3,-10,-29,30,-14,29,-29,10,-19,13,-8,18,66,29,-19,-47,-74,36,-14,-29,3,6,42,11,-1,20,-1,5,-80,-24,-1,-9,6,-97,19,-2,38,0,-59,-63,31,-30,-10,-12,9,25,19,-36,33,33,-27,126, 
  /* [1][0][][] */ 40,-127,53,57,-25,-15,24,-43,-12,-64,-13,15,40,-57,-28,-10,-65,6,15,14,-54,-96,-32,6,89,-37,-45,41,8,91,15,60,20,-14,-32,36,-54,3,68,-14,6,-33,45,-53,-19,4,54,28,-1,9,3,-33,105,-59,56,-39,26,32,16,-58,43,-15,-4,-40,-17,-99,37,65,14,57,-22,38,-98,19,-40,51,24,79,10,-8,80,-18,-78,-11,-54,9,18,77,-57,41,22,6,10,-11,38,-16, 
  /* [2][0][][] */ 7,30,10,-15,15,-4,10,17,71,0,-5,16,6,31,68,19,-8,-4,-9,18,20,-41,6,-39,-2,3,-29,16,-6,8,55,-48,34,-8,-33,45,22,127,-22,-7,-23,-18,14,37,-24,-29,-49,28,7,21,-4,-38,42,26,0,-22,-40,7,0,41,-10,24,30,96,35,-70,17,-57,12,16,-14,-25,-30,15,7,20,-5,54,21,20,8,51,33,-39,-8,-10,3,6,11,1,-3,-24,-24,-13,-6,78, 
  /* [3][0][][] */ -6,-14,-26,58,45,-34,4,0,-24,20,-11,8,-16,-1,64,-19,42,-17,-13,8,20,1,47,17,7,25,8,32,-3,-42,64,-6,-8,-6,-32,52,22,3,-22,28,-4,-76,42,-7,-12,6,0,9,-116,17,-11,27,-127,-3,-24,-32,20,9,-5,67,-3,6,22,11,-26,-82,-41,38,64,11,-3,26,-50,0,-1,-43,-51,-56,39,-12,-19,5,35,76,41,56,48,17,32,-21,-6,17,-45,-1,-10,3, 
  /* [4][0][][] */ -31,-33,20,-63,13,-6,-41,-15,-40,-41,-53,-42,34,75,17,18,61,2,-19,24,4,36,31,3,-27,-20,16,-14,18,-43,-48,22,-23,26,-13,0,16,-19,-8,4,-25,8,-84,-31,53,-13,-17,7,12,70,-32,-15,-10,5,8,-25,-12,-12,13,34,29,-2,-25,9,48,-127,10,-31,-37,42,-9,-6,-4,0,-51,33,-30,76,81,2,-10,-12,123,-55,41,-13,-12,-13,62,1,22,9,-46,17,15,-31, 
  /* [5][0][][] */ -12,1,-24,12,-2,-31,-8,96,56,-3,-26,-28,-9,29,41,41,-26,8,-8,-27,-36,-11,8,-19,24,20,27,57,36,-13,35,33,-32,38,4,-6,-37,-50,-9,-4,-33,-20,-5,-5,44,18,19,7,6,4,25,10,-13,-8,-17,-18,-54,-36,-2,19,-56,26,-39,-47,13,18,-21,7,-5,10,3,-29,37,13,-3,4,-8,5,19,108,-9,-40,25,40,14,-10,-6,-30,2,-11,11,-127,-20,-35,-5,-102, 
  /* [6][0][][] */ -28,-4,-19,-45,-18,-35,-6,20,5,27,-12,9,28,-50,1,-8,2,-46,30,4,-4,-35,-6,40,64,2,4,-14,-4,13,11,-39,-39,-6,-41,10,23,-1,44,29,9,-46,-49,-7,-11,-35,39,-127,25,51,45,-5,11,5,7,-34,-1,-22,-27,15,20,6,25,3,38,58,56,5,-11,-27,18,-59,2,35,49,-2,-34,32,3,22,-21,1,75,2,-23,52,10,-11,24,-7,-46,-4,-37,-1,-18,8, 
  /* [7][0][][] */ 16,6,18,-19,1,21,-10,-28,-8,-1,-9,-18,11,-79,27,8,8,-22,-17,-11,6,-33,-35,1,-21,2,23,-18,9,30,5,-25,-7,-9,-38,-8,17,14,-32,21,11,-37,-30,34,-21,3,-18,63,-10,36,-25,-33,-34,0,-4,-47,6,2,-9,9,5,6,-5,-18,-2,50,22,-13,-1,-22,-4,12,-23,7,-7,6,40,12,5,-2,3,-60,49,-6,-60,127,-18,-3,-45,-21,-27,34,-24,6,0,-7, 
  /* [8][0][][] */ -82,38,-2,-22,18,16,5,3,12,71,-37,4,35,36,23,27,-5,33,-98,36,35,44,-41,-11,-55,3,4,-11,80,-102,1,40,11,8,7,13,-29,48,-71,62,-13,19,25,-127,-4,-51,32,-8,-39,16,-26,60,-101,43,-31,-15,39,-15,-26,-14,39,-45,-12,12,-37,65,32,-41,16,-2,48,108,4,19,-27,9,24,-102,10,-31,-7,-31,8,-12,-82,-3,30,-63,1,81,-21,-38,38,-27,-22,3, 
  /* [9][0][][] */ 24,-99,-37,-40,12,37,-14,60,44,-24,4,-15,-42,-29,0,36,10,9,16,-7,-50,24,-41,-39,20,10,26,-6,-49,-16,-50,1,2,27,41,27,49,52,-62,72,32,29,-17,-110,34,1,36,-120,-5,12,-2,45,-51,23,4,19,-12,19,-17,32,2,34,16,11,12,127,33,28,-9,-16,6,-2,-1,-35,-39,34,75,-5,-2,14,26,-2,11,-58,14,48,-14,-15,-45,21,-35,1,21,24,18,-2, 
  /* [10][0][][] */ 34,42,-2,19,60,-124,4,-22,11,80,50,31,-33,9,20,-42,-13,23,-9,46,-72,14,-11,-30,-66,-14,-84,90,-1,-1,21,69,-23,-41,37,-37,53,-32,-41,-8,-4,67,58,-29,-50,-39,-28,33,-14,-52,-32,-18,-4,-37,13,-35,-14,32,6,10,49,4,5,22,-14,63,65,11,25,18,47,81,-78,-25,-74,-14,1,29,-28,-3,71,-19,-97,-37,92,-52,124,-11,-44,21,48,-18,96,40,1,-127, 
  /* [11][0][][] */ 38,29,-30,14,1,29,69,-6,13,-16,-17,-44,-11,9,35,48,20,8,-125,18,-7,30,8,-1,-45,-11,9,-17,39,22,-25,3,-3,45,10,13,0,45,13,38,-8,39,73,-127,48,-48,7,15,-127,30,-3,-29,38,35,-24,2,-14,-29,3,-6,38,9,-39,5,-60,63,-17,-2,22,2,33,21,-38,-50,10,29,13,-32,-47,15,3,3,77,35,16,-14,-9,-23,6,34,-21,-32,10,16,-9,19, 
  /* [12][0][][] */ -35,2,-5,7,-11,30,30,4,121,6,-7,1,1,8,-42,-36,-3,26,21,41,40,18,10,16,17,11,13,-38,-127,-24,37,-39,11,-2,-23,-13,0,-11,-10,-8,-8,-29,8,6,-2,17,11,-22,17,0,-41,3,10,-14,0,-12,57,-28,1,8,20,-36,-14,-22,-10,36,-30,-3,-9,-2,-16,-18,23,9,-94,2,26,-28,23,-61,-14,7,41,47,-32,-24,-39,-48,2,35,3,40,-7,-30,1,12, 
  /* [13][0][][] */ 29,-3,-33,35,21,-3,2,-6,-23,17,-3,4,19,-17,-3,-22,10,-58,-24,13,-27,-26,-13,7,-9,-8,9,-9,-23,-24,-5,7,12,-2,9,41,14,-12,-1,-2,18,11,11,45,9,20,-3,-127,16,7,15,0,-30,-21,5,-2,-15,9,6,10,5,10,12,-5,10,-12,-14,-49,5,8,-9,-29,-26,39,-3,8,-32,9,22,-1,24,-5,-3,28,9,34,-8,21,0,-8,19,1,-1,9,-9,-18, 
  /* [14][0][][] */ -100,-61,12,24,24,-23,-37,9,-29,6,-11,17,54,2,-122,-12,93,-23,-17,42,-32,-5,-6,18,-127,-11,34,-32,1,-64,-52,5,6,35,35,-60,7,39,34,29,13,52,-2,-55,46,107,42,50,-74,55,24,36,-71,-23,28,11,14,-12,45,38,41,43,5,54,12,-26,-47,27,7,72,-37,-100,-51,5,22,49,-6,54,74,-15,43,19,17,29,61,22,56,28,29,24,68,-7,4,28,21,-18, 
  /* [15][0][][] */ 87,11,29,3,-23,68,29,-30,-20,47,0,24,-45,-20,-20,-7,-3,22,64,8,10,-5,-101,40,-8,-17,25,-12,16,34,-15,-68,16,-68,16,3,-6,-17,-55,-127,11,7,-5,39,-27,40,-28,-28,57,-23,-52,1,27,-122,59,-70,15,-41,12,15,-81,-8,37,14,81,-8,-15,43,-19,62,-31,25,10,37,18,-3,8,-21,51,-3,9,2,60,73,-49,2,-13,-31,-10,-20,49,-1,-55,20,12,-38, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant15_scale = { 16, { 0.016130199655890465, 0.013927401974797249, 0.012371721677482128, 0.0093451440334320068, 0.013680108822882175, 0.01489457581192255, 0.011659238487482071, 0.018374446779489517, 0.0094808517023921013, 0.0085264658555388451, 0.01350014191120863, 0.026047956198453903, 0.017369706183671951, 0.022201484069228172, 0.017875500023365021, 0.015036202967166901, } };
const TfArray<16, int> quant15_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data16[96] = { 9621, -10335, 3239, 62980, -1250, -4998, -9589, 3327, -2841, 2010, 622, -1913, 1197, -9382, 5060, -7863, -1765, 16009, 23509, 2854, 1527, -3892, 376, 91, 19420, -1819, -1552, -3369, -7801, -8021, 5727, -8728, 893, -1472, -1590, 24261, 2325, -7482, 18726, 569, -101, 2002, -8741, -7472, -6511, 64239, 330, 13558, 25601, -13672, -482, 11278, 6884, 130, -6200, 2873, -16523, 2941, 1980, -6284, -665, 427, -14997, -1941, 1577, 14900, 31015, 40573, -9575, -1, -8091, -2410, 46827, 6906, -539, 353, 19406, 31501, 381, -8673, -564, -4129, -38, -3461, 459, -2200, 272, -1714, 2552, -5439, 922, -70, 1929, -798, 1420, 52898, };
const TfArray<1, int> tensor_dimension16 = { 1, { 96 } };
const TfArray<96, float> quant16_scale = { 96, { 0.00016261634300462902, 9.2113208665978163e-05, 0.0002524684532545507, 3.3446882298449054e-05, 0.00014443062536884099, 0.00016494830197189003, 0.00035934738116338849, 7.3214279836975038e-05, 0.00014131194620858878, 0.00032634669332765043, 0.00014014012413099408, 0.00035292102256789804, 7.7027645602356642e-05, 0.00033391750184819102, 0.00017634843243286014, 0.00010743977327365428, 8.9133907749783248e-05, 0.00027191103436052799, 7.5953204941470176e-05, 0.00022742719738744199, 4.6311542973853648e-05, 0.00017715137801133096, 0.00011834893666673452, 0.00035675932304002345, 0.00018082970927935094, 0.00017832893354352564, 0.00014357751933857799, 0.00019758354756049812, 0.00010303186718374491, 9.9662298453040421e-05, 0.00012847903417423368, 0.00018659693887457252, 0.00011784482921939343, 0.00011780197382904589, 0.00021485837351065129, 9.5079733000602573e-05, 0.00056703528389334679, 0.00013129181752447039, 6.2063423683866858e-05, 0.00019450038962531835, 0.00018237506446894258, 0.00039175819256342947, 0.00038904722896404564, 0.00018023418670054525, 0.00021622295025736094, 5.8341811381978914e-05, 0.0002060921979136765, 0.00028591853333637118, 9.9021977803204209e-05, 0.00017459750233683735, 0.00017485105490777642, 0.00011027783330064267, 0.00024668427067808807, 0.00036027460009790957, 0.00031112035503610969, 0.0003847895422950387, 0.00023482523101847619, 0.0002000381937250495, 9.7618714789859951e-05, 6.9589201302733272e-05, 0.00026000864454545081, 0.00014083393034525216, 0.00026833920856006444, 0.0001196903467644006, 0.00018571685359347612, 0.00018391078629065305, 7.2883769462350756e-05, 4.519107096712105e-05, 0.00034151787986047566, 0.00020507234148681164, 0.00021890713833272457, 0.00010033583384938538, 0.00012519040319602937, 0.00014607547200284898, 0.00015069640357978642, 0.00020782618958037347, 0.00055148167302832007, 5.4355921747628599e-05, 0.00030215331935323775, 0.00020753634453285486, 0.0001652523351367563, 0.00050821609329432249, 0.00017291324911639094, 0.00014751948765479028, 0.00012210595014039427, 0.00010390546231064945, 0.0001276470284210518, 0.00020063178089912981, 0.00014389418356586248, 9.2072390543762594e-05, 0.00022904288198333234, 0.00011960212577832863, 0.0001455937308492139, 0.00046567208482883871, 0.00090883666416630149, 7.1836919232737273e-05, } };
const TfArray<96, int> quant16_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data17[1*3*3*96] = { 
  /* [0][0][][] */ -17,9,-19,108,-20,28,-62,-55,22,-10,99,-8,3,-11,-5,62,10,16,-34,0,72,3,32,-31,1,17,45,46,28,14,21,46,-7,32,14,-13,5,53,-60,-29,16,12,25,20,-85,-53,26,-7,-10,-17,-5,-7,51,4,-6,0,4,-34,25,-32,29,-2,127,29,-12,-11,8,-51,68,34,1,2,80,-36,74,2,15,-127,29,64,-1,19,127,-11,41,30,-32,-17,31,-5,-16,84,-2,20,-2,10, -47,13,-8,12,50,-7,-11,-127,43,8,-127,-5,-17,-8,2,96,23,-31,-20,-17,80,-95,127,26,-61,-33,-105,-14,33,37,-51,18,122,12,-8,0,-24,127,-60,-127,6,-17,-30,16,49,-127,127,-45,-76,57,48,5,42,-65,35,54,38,40,-104,90,127,30,7,-20,43,-39,-101,-1,39,-30,-20,54,-50,-49,113,-5,-31,-59,-39,62,-67,62,-16,10,-11,45,53,-41,-27,54,-14,75,-127,-31,24,-127, -1,-5,-23,-73,4,18,36,19,-2,-3,4,63,3,-10,-10,13,-13,17,-26,16,12,29,23,-34,0,-34,10,13,-2,8,46,-83,45,20,14,-22,11,9,-21,-25,6,5,-16,9,25,-31,23,0,8,-1,4,-6,9,4,-4,8,-3,46,4,2,10,-23,9,-15,-28,-17,20,-50,-114,-7,39,-10,-127,-27,-1,16,13,-10,3,9,-15,24,-38,-2,-40,20,29,36,-22,-16,22,-7,16,7,-1,-47, 
  /* [0][1][][] */ -39,59,-17,39,-89,-13,-10,-45,28,95,-38,-20,-32,-29,-4,63,127,-26,-86,-14,59,-127,-30,18,-36,-51,-127,-8,41,37,-52,30,-127,-71,-52,6,63,3,-55,46,-22,87,0,2,34,-49,-12,-33,127,47,0,19,43,11,-36,-19,40,5,-127,127,-39,-87,20,127,-57,-35,-80,127,-43,127,-15,63,-38,-56,38,10,-38,-69,127,45,127,33,12,2,127,30,-92,48,-39,-33,-100,43,90,101,28,-56, 127,127,127,127,-46,-127,127,24,127,-127,21,-127,-110,127,127,127,-16,-127,-52,-127,127,25,-65,127,127,127,-57,-127,127,127,-127,127,-7,-127,-116,127,-127,-39,83,111,-127,-127,127,127,127,-117,-106,127,-15,127,-127,-127,-127,127,127,-127,127,-127,-44,40,-109,-30,-61,-68,127,127,-67,126,127,-104,-127,127,-46,127,-127,-127,-127,126,-77,127,-44,127,80,127,-39,-127,-20,-101,-127,-124,-21,-127,-21,-127,-127,118, -23,65,-38,5,127,78,-21,46,8,27,-12,-4,-26,-30,-13,-2,-108,-21,-127,37,34,78,-14,-119,-35,-45,124,70,15,35,75,5,123,-44,127,-2,51,10,-91,15,33,24,-23,2,-21,-52,-11,-43,80,14,-10,38,-5,-2,-73,-15,30,18,122,-94,1,127,5,-34,-111,-28,-80,101,10,-15,115,34,-20,-55,19,48,-31,-11,-42,1,-49,4,44,26,-89,35,127,-42,29,-20,127,-5,-114,36,33,17, 
  /* [0][2][][] */ -5,-37,-20,-61,-7,18,40,26,0,11,-13,57,30,-38,-7,10,39,3,-4,21,-10,30,-22,-25,-1,-26,11,6,-4,-3,47,-70,-43,73,-24,-23,31,-27,-68,13,5,12,-35,19,12,-71,-13,-3,-8,11,23,-8,7,-1,-21,6,3,38,-48,35,-4,-13,6,20,-8,-11,19,-54,-62,13,-16,-2,-124,-33,6,20,14,-15,58,14,20,21,-34,15,13,28,-17,16,5,28,20,-3,18,44,-7,-32, -27,-9,-27,25,-45,79,-24,59,7,-5,59,-10,127,-6,-16,-13,0,-40,-76,24,-20,79,-45,-112,-48,-51,102,70,22,46,54,-1,-123,67,-15,-21,-28,-19,-127,-5,40,-15,-15,32,-24,-41,-20,-50,-60,34,71,22,-9,-81,29,51,20,21,76,-59,24,-61,-5,3,14,-28,-127,-57,-14,-24,-61,31,37,-48,-20,-6,-47,21,-54,0,48,35,22,12,3,59,-95,127,11,127,-32,-16,108,-20,46,79, -12,-34,-27,36,13,64,-42,9,6,-4,4,13,16,-48,-7,-5,-47,-4,3,20,-22,8,-23,4,-7,17,-2,49,6,-4,37,28,17,51,21,-21,-8,-17,-34,6,8,-12,21,6,-75,-30,-13,2,-1,-17,5,-5,-10,7,-18,-4,3,-53,16,-31,-24,49,13,-24,-15,-1,35,-54,45,8,56,-9,28,-56,-11,25,13,10,-1,23,-32,31,77,-13,-21,52,41,-3,104,17,0,-17,10,-22,-8,-49, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant17_scale = { 96, { 0.0069111944176256657, 0.0039148111827671528, 0.01072990894317627, 0.0014214925467967987, 0.0061383014544844627, 0.0070103025063872337, 0.015272263437509537, 0.0031116069294512272, 0.0060057574883103371, 0.013869734480977058, 0.0059559550136327744, 0.014999143779277802, 0.0032736749853938818, 0.014191493391990662, 0.0074948081746697426, 0.0045661902986466885, 0.0037881908938288689, 0.011556219309568405, 0.0032280110754072666, 0.0096656559035181999, 0.0019682405982166529, 0.0075289336964488029, 0.0050298296846449375, 0.01516227051615715, 0.007685262244194746, 0.0075789792463183403, 0.0061020446009933949, 0.0083973007276654243, 0.0043788542971014977, 0.0042356476187705994, 0.0054603586904704571, 0.0079303700476884842, 0.0050084050744771957, 0.0050065838731825352, 0.0091314809396862984, 0.0040408885106444359, 0.024098999798297882, 0.005579901859164238, 0.0026376955211162567, 0.0082662664353847504, 0.0077509400434792042, 0.016649723052978516, 0.016534507274627686, 0.0076599526219069958, 0.0091894753277301788, 0.0024795269127935171, 0.0087589183822274208, 0.012151537463068962, 0.0042084339074790478, 0.0074203936383128166, 0.007431169506162405, 0.0046868077479302883, 0.010484080761671066, 0.015311670489609241, 0.013222614303231239, 0.016353555023670197, 0.0099800722673535347, 0.0085016228258609772, 0.0041487952694296837, 0.0029575410299003124, 0.01105036772787571, 0.005985441617667675, 0.011404416523873806, 0.0050868396647274494, 0.0078929662704467773, 0.0078162085264921188, 0.0030975602567195892, 0.0019206204451620579, 0.014514509588479996, 0.0087155746296048164, 0.0093035530298948288, 0.0042642727494239807, 0.0053205918520689011, 0.0062082074582576752, 0.006404596846550703, 0.008832613006234169, 0.023437971249222755, 0.0023101265542209148, 0.012841516174376011, 0.0088202944025397301, 0.0070232241414487362, 0.021599182859063148, 0.0073488131165504456, 0.0062695783562958241, 0.0051895026117563248, 0.004415981937199831, 0.0054249987006187439, 0.0085268504917621613, 0.0061155026778578758, 0.0039130765944719315, 0.0097343223169445992, 0.0050830901600420475, 0.0061877337284386158, 0.019791062921285629, 0.038625556975603104, 0.0030530688818544149, } };
const TfArray<96, int> quant17_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data18[96] = { 22000, 1689, 8759, -786, 8089, 6396, 15723, 8788, -928, 17261, 4932, 1926, 4976, 21324, -13, -1448, 7231, 9762, 1951, -197, -313, 18560, 5153, 3565, 7561, 4693, 6233, 4867, 127, 7, 5979, 12950, 15549, 2012, 5030, -550, 22233, 6947, 1142, 5993, 2172, 9236, 12473, 4881, 5255, 11393, 15224, 10204, 6263, 3787, 49, -809, 14889, 7982, 9860, 16239, -96, 9851, 2531, 3836, 15711, 9001, 2533, 10655, 7191, 5317, 5084, -653, 17551, 10946, 8705, -1248, -1646, 5148, 1268, 3673, 21524, 16397, 15767, -2670, 6537, -5413, -2003, 710, 5495, 5996, 7390, 7025, 10224, 3663, 8538, 3374, 19736, 25338, -9607, 12316, };
const TfArray<1, int> tensor_dimension18 = { 1, { 96 } };
const TfArray<96, float> quant18_scale = { 96, { 0.00011691061081364751, 0.00021447369363158941, 0.00015426089521497488, 0.00072020496008917689, 0.00019995890033897012, 0.00015159347094595432, 0.00019607282592914999, 0.00040779158007353544, 0.00049650704022496939, 0.00010703848238335922, 0.00028805225156247616, 0.00040733095374889672, 0.0005394797190092504, 0.00022930752311367542, 0.00023167279141489416, 0.00045778512139804661, 0.00029899924993515015, 0.00023655181576032192, 0.000238637367147021, 0.00058924802578985691, 0.00047019380144774914, 0.00013383213081397116, 0.00027978350408375263, 0.0002149115753127262, 0.00023316069564316422, 0.00045370013685896993, 0.0002283415524289012, 0.00017904845299199224, 0.0005859303055331111, 0.00039352886960841715, 0.00023831549333408475, 0.00014402699889615178, 0.00012844259617850184, 0.00055874418467283249, 0.00031870300881564617, 0.00044662863365374506, 0.00010558970097918063, 0.0003586798848118633, 0.00043723022099584341, 0.00017836647748481482, 0.00027114176191389561, 0.00020273560949135572, 0.00016966067778412253, 0.00015665886166971177, 0.00021572070545516908, 0.00028296440723352134, 0.00019008269009646028, 0.00014300023030955344, 0.00026072683976963162, 0.00024556575226597488, 0.00058943819021806121, 0.00079875875962898135, 0.000172986532561481, 0.00020486170251388103, 0.00023242265160661191, 0.00011770449782488868, 0.00047327807988040149, 0.00017510776524432003, 0.00028668672894127667, 0.00043062612530775368, 0.00010725250467658043, 0.00015497194544877857, 0.00038554778438992798, 0.00026004476239904761, 0.00015885209722910076, 0.00022879650350660086, 0.000375795440049842, 0.00039734426536597311, 0.00015383672143798321, 0.00010319226566934958, 0.00023354707809630781, 0.00035745618515647948, 0.00026087783044204116, 0.00025605334667488933, 0.00034971669083461165, 0.00033293943852186203, 0.00011030476161977276, 0.00027309040888212621, 0.00010394564742455259, 0.00046131698763929307, 0.00017199896683450788, 0.00038754410343244672, 0.00022868778614792973, 0.00047091403394006193, 0.00027378671802580357, 0.00025854643899947405, 0.00022227225417736918, 0.00020424822287168354, 0.00016279678675346076, 0.00041207883623428643, 0.00016074272571131587, 0.00050504872342571616, 0.00010629790631355718, 0.00010894665319938213, 0.00030804905691184103, 0.00026793457800522447, } };
const TfArray<96, int> quant18_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data19[96*1*1*16] = { 
  /* [0][0][][] */ 56,-31,127,106,72,-4,68,-59,82,22,-46,-63,106,30,21,-90, 
  /* [1][0][][] */ 42,127,-23,-18,65,18,30,61,17,93,-22,88,-16,-31,124,-57, 
  /* [2][0][][] */ 42,-25,20,34,-43,115,-59,74,-38,-72,-13,116,96,-78,85,-127, 
  /* [3][0][][] */ 127,123,-31,38,-122,-21,-38,-3,-10,-27,117,-82,-75,86,-50,-2, 
  /* [4][0][][] */ -5,56,35,-8,-23,-4,-43,94,-69,-67,-23,8,-13,-127,35,4, 
  /* [5][0][][] */ 121,-19,-33,20,25,-120,-64,14,-23,18,-127,-32,0,-14,-5,50, 
  /* [6][0][][] */ -97,-13,-15,82,-63,-2,-42,42,-127,-61,-33,-41,-41,48,40,43, 
  /* [7][0][][] */ -34,12,-79,47,36,-127,-65,62,-5,-49,14,-35,-27,26,-43,19, 
  /* [8][0][][] */ 12,-42,-30,-7,-9,17,-31,-43,-13,19,-69,4,-127,2,8,34, 
  /* [9][0][][] */ 12,-36,34,95,27,-20,21,-81,60,-127,18,-35,19,24,-88,53, 
  /* [10][0][][] */ -74,-26,8,-67,127,53,23,44,18,-77,-13,42,1,-59,-107,47, 
  /* [11][0][][] */ 35,-50,-127,11,57,26,-34,27,-6,-37,-18,16,-3,16,-47,14, 
  /* [12][0][][] */ 84,9,27,-18,9,-29,-39,-29,18,-2,-127,-14,-47,-35,21,27, 
  /* [13][0][][] */ 40,-127,-31,-36,20,32,-10,-89,68,9,61,21,21,-20,85,17, 
  /* [14][0][][] */ -55,38,-101,-76,63,-125,44,-47,22,-5,23,-127,82,97,41,64, 
  /* [15][0][][] */ 22,-16,50,34,-4,-16,-8,1,0,-53,-56,-1,-127,-51,-12,51, 
  /* [16][0][][] */ -42,81,11,13,-27,41,72,127,8,39,48,17,-26,13,18,-23, 
  /* [17][0][][] */ -8,-23,-22,-29,-23,27,41,54,-20,127,-31,6,-28,87,52,-12, 
  /* [18][0][][] */ 1,127,-9,-86,9,-20,94,-65,46,50,-52,62,-5,-19,13,-35, 
  /* [19][0][][] */ 20,-29,31,29,13,63,2,5,21,8,-42,-7,-127,-8,-17,26, 
  /* [20][0][][] */ 86,-62,-5,-66,-32,63,42,-30,-51,20,-127,-74,63,32,48,14, 
  /* [21][0][][] */ 65,-12,127,61,-9,51,-1,-18,20,46,-25,-29,-8,100,-10,-19, 
  /* [22][0][][] */ 66,-24,49,-4,-19,-10,-24,127,-27,-48,-6,-4,-22,40,-21,66, 
  /* [23][0][][] */ -20,48,-78,10,37,-127,-20,22,16,-49,-2,-25,-72,28,-35,36, 
  /* [24][0][][] */ 21,-49,-3,-56,27,-39,-4,-7,34,42,56,71,-28,54,127,23, 
  /* [25][0][][] */ -127,-113,-63,10,4,-27,15,-28,-42,51,-86,12,-11,38,57,32, 
  /* [26][0][][] */ 22,6,24,-3,-47,10,-51,63,-49,-58,-25,7,65,-127,5,1, 
  /* [27][0][][] */ -110,48,-58,45,44,38,5,27,8,-28,127,42,-15,12,-52,-33, 
  /* [28][0][][] */ -34,-25,53,46,-11,14,22,103,27,-8,-12,-6,-127,0,-28,46, 
  /* [29][0][][] */ -23,53,29,-37,5,-26,14,-32,-127,22,-42,-4,14,48,-59,29, 
  /* [30][0][][] */ -3,11,-127,-31,20,-30,-4,9,-17,-21,-5,-26,-2,-15,-14,17, 
  /* [31][0][][] */ 78,-37,-127,6,32,3,-31,68,-24,-23,-70,-73,28,10,-67,101, 
  /* [32][0][][] */ -127,37,8,26,-26,42,20,33,8,-17,127,-16,-28,13,2,-2, 
  /* [33][0][][] */ 10,-14,127,-42,-73,68,27,12,17,16,-13,30,18,7,29,-2, 
  /* [34][0][][] */ 13,-39,-98,-127,42,-41,-20,-98,16,-27,-32,-64,-42,-3,60,8, 
  /* [35][0][][] */ 6,-63,33,55,68,-37,25,-28,-127,40,-10,42,13,122,-40,-45, 
  /* [36][0][][] */ -69,43,-19,-18,0,17,38,80,3,28,127,-32,-18,42,12,17, 
  /* [37][0][][] */ -45,28,127,-42,-48,-65,23,-26,28,-1,-10,11,-18,-38,44,-8, 
  /* [38][0][][] */ 11,-18,-1,50,35,-79,-53,9,3,-10,78,-19,127,32,0,-23, 
  /* [39][0][][] */ -20,14,1,-27,-67,-88,41,54,-80,-28,2,-58,11,33,75,127, 
  /* [40][0][][] */ 80,-22,-56,-40,-43,114,-52,63,31,-20,13,-8,127,63,-42,-7, 
  /* [41][0][][] */ -3,-26,-53,-127,34,-61,-61,-45,19,-36,-30,-25,-2,-20,20,5, 
  /* [42][0][][] */ 18,9,-18,81,-127,-29,-42,27,-72,-30,30,-47,-20,98,-8,76, 
  /* [43][0][][] */ -22,104,-43,127,27,55,7,-50,-73,68,25,20,20,-50,81,-16, 
  /* [44][0][][] */ 34,-4,-127,27,52,53,-31,71,-14,-25,16,-20,33,-34,-67,24, 
  /* [45][0][][] */ -16,21,2,-119,-30,-31,43,-34,13,36,-72,14,9,-127,40,-38, 
  /* [46][0][][] */ -16,29,22,3,43,-1,-58,34,-1,-42,-25,19,-21,127,34,-30, 
  /* [47][0][][] */ 35,-52,1,-56,-50,45,-72,85,-25,-44,24,27,21,-127,80,35, 
  /* [48][0][][] */ 1,-4,-3,-127,-9,-1,33,23,-9,-25,23,-7,1,36,-20,71, 
  /* [49][0][][] */ 27,-41,16,88,48,27,-20,63,-30,-12,29,-2,14,69,127,11, 
  /* [50][0][][] */ -7,-20,55,-26,12,127,-19,-49,20,-16,87,2,43,-25,18,-71, 
  /* [51][0][][] */ 37,36,0,31,39,-16,-39,5,34,10,-17,127,11,22,20,-40, 
  /* [52][0][][] */ -15,86,127,-12,7,-32,4,-16,-11,-39,-4,37,11,89,-113,27, 
  /* [53][0][][] */ -11,-33,-55,-127,-54,-31,-13,-22,-8,-14,27,-16,23,-5,74,46, 
  /* [54][0][][] */ -1,-7,-30,-28,12,31,-39,34,63,-15,-15,-26,29,127,9,14, 
  /* [55][0][][] */ 10,-26,-29,15,4,-47,25,-127,0,-54,-32,-10,-63,-77,-30,-20, 
  /* [56][0][][] */ 44,37,25,43,0,-21,6,127,3,-25,11,-30,70,-25,-56,30, 
  /* [57][0][][] */ 90,-14,126,-6,-94,-53,-22,14,47,26,-127,-15,31,-22,28,-24, 
  /* [58][0][][] */ 97,100,64,112,-90,3,-31,40,-8,6,48,-6,-53,-42,6,-127, 
  /* [59][0][][] */ 127,-23,-23,-8,-37,-34,-4,-8,-28,-2,-71,-19,30,-10,6,29, 
  /* [60][0][][] */ -127,38,-24,24,36,-57,52,3,57,38,71,59,12,-34,24,-55, 
  /* [61][0][][] */ -102,123,88,18,72,55,-95,-120,127,-93,63,0,8,-49,-90,-49, 
  /* [62][0][][] */ -41,42,-86,24,91,42,-11,91,0,-5,11,-33,-127,27,-56,-13, 
  /* [63][0][][] */ -58,-5,127,-87,-76,-104,45,-54,33,26,62,18,-60,-38,114,33, 
  /* [64][0][][] */ 18,90,-31,-22,58,-28,32,-85,-48,67,9,-32,-13,-127,-49,22, 
  /* [65][0][][] */ -2,14,45,2,83,0,-6,-127,-29,-79,-32,-54,-37,-33,44,9, 
  /* [66][0][][] */ -127,-16,-22,4,-49,22,22,-37,-83,-30,-51,56,47,5,67,80, 
  /* [67][0][][] */ -5,-117,14,123,-28,28,-16,127,99,52,9,-50,47,-14,-116,-21, 
  /* [68][0][][] */ -18,-37,-40,127,-79,-8,20,-8,-56,11,-1,-27,-9,-62,-30,12, 
  /* [69][0][][] */ 66,127,-11,96,97,23,70,-118,38,100,26,27,5,-17,31,-13, 
  /* [70][0][][] */ 18,-18,35,-127,122,-13,-6,6,43,-9,49,-2,-4,61,32,70, 
  /* [71][0][][] */ -28,89,-8,86,61,-104,-25,127,31,-125,75,4,33,-65,-43,18, 
  /* [72][0][][] */ -108,-58,-36,38,-1,6,-33,8,-43,-20,-122,45,43,1,24,127, 
  /* [73][0][][] */ -36,40,-49,83,3,-74,62,-49,106,127,-16,88,-42,127,-74,-43, 
  /* [74][0][][] */ 25,-75,-11,-15,-29,-12,29,2,-14,-14,-98,2,-127,20,47,46, 
  /* [75][0][][] */ -26,-18,-5,127,-38,15,10,-27,-13,46,-33,-8,-6,-18,22,-50, 
  /* [76][0][][] */ 0,-11,2,35,44,25,-31,-117,13,-127,46,52,5,-46,22,-50, 
  /* [77][0][][] */ 127,-20,-15,50,-65,-42,-32,5,42,-5,-35,31,72,-3,-59,37, 
  /* [78][0][][] */ -26,-12,62,0,12,11,-56,50,57,-42,-16,-54,7,127,44,-21, 
  /* [79][0][][] */ 4,12,51,24,43,46,-52,-59,15,-61,74,-18,127,-24,-20,-45, 
  /* [80][0][][] */ -104,-114,-108,127,0,44,56,-34,-4,45,-126,-37,79,-56,-22,48, 
  /* [81][0][][] */ 51,-5,-46,16,127,44,-37,-15,-5,-103,-14,-80,-42,20,-93,37, 
  /* [82][0][][] */ 110,72,20,24,-127,-41,-58,-25,-41,6,71,-38,-31,70,3,-18, 
  /* [83][0][][] */ 127,24,25,-28,-4,-13,-18,50,30,-9,80,-55,-35,-22,-28,-79, 
  /* [84][0][][] */ 1,-92,-78,-66,20,-49,16,-127,18,-22,47,-11,-1,14,26,18, 
  /* [85][0][][] */ -53,10,-16,-55,-6,13,54,127,-60,126,-1,-48,0,51,115,-57, 
  /* [86][0][][] */ 95,-12,31,-13,20,-8,-22,-26,-12,-23,-127,9,5,29,-8,4, 
  /* [87][0][][] */ -50,13,42,-53,46,79,-68,99,5,-13,15,-7,-14,-127,-3,-45, 
  /* [88][0][][] */ 13,-33,-27,-23,88,-30,-26,-127,-7,-30,-51,-31,-5,14,52,-35, 
  /* [89][0][][] */ 24,-13,-12,-76,45,-27,-37,127,86,-60,26,44,36,23,42,56, 
  /* [90][0][][] */ -15,-17,-65,28,62,7,86,-65,33,127,-29,22,5,10,-7,1, 
  /* [91][0][][] */ 53,-13,-51,8,4,-127,-14,-17,-31,-17,-27,-22,18,-47,32,-5, 
  /* [92][0][][] */ 101,-35,127,87,93,31,12,75,-87,48,-78,45,111,107,-4,35, 
  /* [93][0][][] */ 127,-52,-70,-77,-51,-105,-24,36,-20,34,-67,-40,-9,42,6,70, 
  /* [94][0][][] */ 27,-9,40,83,127,-43,-5,57,-3,-12,-7,71,-10,123,-31,-75, 
  /* [95][0][][] */ -98,6,14,41,33,80,22,21,8,23,127,28,8,53,-32,-15, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant19_scale = { 96, { 0.00040822257869876921, 0.00074888841481879354, 0.00053864042274653912, 0.0025147753767669201, 0.00069820642238482833, 0.00052932644030079246, 0.00068463722709566355, 0.0014239060692489147, 0.0017336781602352858, 0.00037375156534835696, 0.0010058063780888915, 0.0014222976751625538, 0.0018837280804291368, 0.00080068444367498159, 0.00080894335405901074, 0.0015984709607437253, 0.0010440305341035128, 0.00082597968867048621, 0.00083326193271204829, 0.0020575064700096846, 0.001641798997297883, 0.00046730827307328582, 0.00097693398129194975, 0.0007504174136556685, 0.00081413873704150319, 0.0015842072898522019, 0.00079731154255568981, 0.00062519236234948039, 0.0020459219813346863, 0.001374104293063283, 0.00083213800098747015, 0.00050290621584281325, 0.00044848938705399632, 0.0019509948324412107, 0.0011128310579806566, 0.0015595153672620654, 0.00036869279574602842, 0.0012524203630164266, 0.0015266984701156616, 0.00062281108694151044, 0.00094675912987440825, 0.00070790195604786277, 0.00059241260169073939, 0.00054701353656128049, 0.00075324269710108638, 0.00098804081790149212, 0.00066372117726132274, 0.00049932097317650914, 0.00091039278777316213, 0.00085745408432558179, 0.0020581705030053854, 0.0027890654746443033, 0.00060402567032724619, 0.0007153257611207664, 0.00081156170926988125, 0.00041099463123828173, 0.0016525685787200928, 0.00061143247876316309, 0.0010010382393375039, 0.0015036385739222169, 0.00037449889350682497, 0.00054112321231514215, 0.001346236327663064, 0.00090801122132688761, 0.00055467174388468266, 0.00079890008782967925, 0.0013121835654601455, 0.0013874266296625137, 0.00053715932881459594, 0.00036032154457643628, 0.00081548793241381645, 0.0012481474550440907, 0.00091092009097337723, 0.00089407421182841063, 0.0012211231514811516, 0.0011625410988926888, 0.00038515659980475903, 0.00095356331439688802, 0.00036295218160375953, 0.0016108034178614616, 0.00060057733207941055, 0.0013532069278880954, 0.00079852045746520162, 0.0016443139174953103, 0.00095599470660090446, 0.00090277945855632424, 0.00077611906453967094, 0.00071318366099148989, 0.00056844559730961919, 0.0014388761483132839, 0.00056127336574718356, 0.0017635037656873465, 0.00037116566090844572, 0.00038041442167013884, 0.0010756301926448941, 0.00093556049978360534, } };
const TfArray<96, int> quant19_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data20[16] = { -43479, 9218, 5117, -4188, -1091, -8596, -6642, -35780, -1419, 29077, 31362, -8334, -2754, -22844, 22634, -43497, };
const TfArray<1, int> tensor_dimension20 = { 1, { 16 } };
const TfArray<16, float> quant20_scale = { 16, { 0.00070463115116581321, 0.00070331495953723788, 0.0011217511491850019, 0.0010355366393923759, 0.00072933151386678219, 0.0010814967099577188, 0.00098084576893597841, 0.00045656412839889526, 0.00062090752180665731, 0.00057411985471844673, 0.00063990434864535928, 0.00047819557948969305, 0.0010377292055636644, 0.001207355409860611, 0.00064001197461038828, 0.00051279354374855757, } };
const TfArray<16, int> quant20_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data21[16*1*1*48] = { 
  /* [0][0][][] */ -7,-6,-15,5,10,12,3,107,-48,10,9,-4,0,-9,-7,8,10,-23,2,-1,60,3,22,125,-21,84,4,-13,28,-11,15,-19,-23,52,25,-38,19,47,21,-14,-97,-14,21,39,32,31,-127,-49, 
  /* [1][0][][] */ -48,-17,32,17,-43,8,-1,50,-67,-34,-1,-58,-27,-7,4,-9,-29,112,-13,16,-11,11,-38,-24,40,-58,28,23,-34,-106,-43,19,-25,3,45,-9,0,-50,1,19,-16,-29,127,21,-21,-8,28,-13, 
  /* [2][0][][] */ -22,-10,-13,-35,-4,-66,7,-22,-1,10,14,26,16,15,1,5,1,-14,-16,-22,-5,1,0,-127,-12,77,-6,-1,4,-11,-8,-6,-10,55,12,-2,16,16,18,8,-40,-1,-13,-6,-3,0,14,12, 
  /* [3][0][][] */ 2,31,2,-32,-4,-4,-2,-7,-10,-11,0,35,-127,9,-1,-7,4,2,-17,0,-32,8,11,14,5,-7,6,20,-7,21,5,16,-1,-2,22,14,-12,32,33,11,5,-1,33,-27,12,-12,-1,20, 
  /* [4][0][][] */ 37,-29,-4,4,24,30,17,-18,-27,4,-11,-25,-7,16,-15,18,14,-9,-79,17,-5,18,11,63,18,-15,9,47,14,-69,18,1,5,-35,31,-127,19,33,0,23,-20,13,14,-31,3,-18,9,9, 
  /* [5][0][][] */ 32,-5,-24,66,2,-12,8,35,3,0,51,17,7,50,6,2,-18,29,34,-1,16,8,10,-24,-9,-46,5,-20,-3,-5,-4,15,76,-127,-1,29,-18,-14,9,7,-100,57,17,-7,6,1,-115,-9, 
  /* [6][0][][] */ 23,5,2,-2,-17,-7,3,-19,-2,4,11,3,-18,6,13,4,-1,-16,127,3,8,8,6,-42,4,7,32,-18,-10,0,1,0,3,-20,35,-43,3,-39,67,10,-13,-12,-8,10,-13,2,5,-6, 
  /* [7][0][][] */ -48,-17,-14,29,-21,69,-12,32,1,38,-7,127,78,-13,-5,3,-10,-29,-18,-28,-39,-16,-22,67,1,-33,-73,-30,-30,-26,-11,-21,5,-19,-20,20,16,-56,96,-20,3,28,-76,-54,-17,-19,1,-23, 
  /* [8][0][][] */ -48,-45,-6,2,-7,-6,1,36,-1,-70,-7,38,37,16,-3,7,-8,48,-17,16,-42,22,-17,-12,-3,14,2,45,-4,107,-9,21,-20,20,-11,-127,-95,58,37,23,21,-8,103,-36,1,37,17,28, 
  /* [9][0][][] */ -19,0,6,34,20,-34,-2,-1,60,-41,22,58,-49,1,17,-1,0,26,-40,-17,50,-3,-15,-23,-2,7,53,-18,6,13,13,4,-2,28,67,-119,-24,-127,-99,17,-28,22,53,12,11,-9,-12,-27, 
  /* [10][0][][] */ -21,-6,-39,-127,45,78,11,-11,3,47,17,8,58,-55,-41,17,40,-37,61,-10,37,-27,45,59,-58,-110,-2,-32,55,33,48,-58,-30,-80,22,-2,28,-42,6,-35,-28,-72,-22,12,5,12,15,-37, 
  /* [11][0][][] */ 8,47,-10,83,40,-78,-85,-29,16,38,-21,4,-9,54,4,-81,44,55,48,-8,-50,-99,36,-3,29,-36,24,-16,74,-25,25,-70,45,5,-34,-109,81,40,-20,-119,13,64,127,-73,-10,-26,40,42, 
  /* [12][0][][] */ 127,-8,-28,14,-5,14,-1,110,22,-11,-64,-21,2,11,-19,-6,-11,12,-11,12,8,-5,-8,28,-13,15,-5,1,-4,5,2,-5,-4,-67,-10,13,-13,-15,-26,6,-9,-85,1,-116,-60,-4,70,-9, 
  /* [13][0][][] */ 7,5,-3,2,4,-7,-1,2,-3,15,8,21,-7,-2,7,-1,3,-5,3,-6,7,-11,7,-7,4,7,17,127,12,-2,2,-14,3,-2,-38,20,13,-9,9,-18,-16,-3,-5,-3,1,-1,-8,-6, 
  /* [14][0][][] */ 41,-22,44,-59,59,32,28,-68,-54,-38,39,127,-64,-24,47,6,40,18,-55,53,10,16,55,-17,5,65,-42,-107,26,-26,56,49,25,69,-126,-50,-42,28,108,1,-45,26,39,-13,15,0,25,-28, 
  /* [15][0][][] */ -4,-37,-61,-30,42,14,63,-39,-10,32,-38,-20,61,9,-83,52,39,26,53,-87,-82,-11,43,12,-70,42,14,46,52,46,53,-62,10,49,88,127,-9,-102,-1,-49,94,56,86,-47,-29,-28,-20,37, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant21_scale = { 16, { 0.029946824535727501, 0.029890885576605797, 0.047674424946308136, 0.044010303914546967, 0.030996588990092278, 0.045963607728481293, 0.04168594628572464, 0.019403975456953049, 0.026388568803668022, 0.024400094524025917, 0.02719593420624733, 0.020323311910033226, 0.044103492051362991, 0.051312603056430817, 0.027200508862733841, 0.021793724969029427, } };
const TfArray<16, int> quant21_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data22[48] = { 3159, 42410, -354, 41571, 5369, 120019, -3692, 44480, 1947, 29274, 28807, 850, -10041, 30809, -2511, -397, -770, -90, 809, -3011, -56, -1852, -521, -17451, -4539, 46721, 145000, 103301, 1329, 5617, -4700, -1275, 26552, 0, 30218, -9525, 70042, 1144, 36208, 2722, -346, 67647, 651, 3174, 55883, 330, 5450, 51781, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 8.2220554759260267e-05, 3.6512632505036891e-05, 0.0001523305254522711, 5.251733455224894e-05, 0.00011455507774371654, 7.3054805397987366e-05, 0.00016481382772326469, 0.00013188294542487711, 8.1290461821481586e-05, 4.2412091715959832e-05, 5.2084094932070002e-05, 9.1212059487588704e-05, 5.0408525567036122e-05, 3.0190860343282111e-05, 0.00016256938397418708, 0.00023020287335384637, 0.00015046953922137618, 0.00010173889313591644, 0.00013620179379358888, 0.00013670936459675431, 7.7803801104892045e-05, 0.00015702177188359201, 0.00010651910270098597, 0.0001093245591619052, 0.00011637968418654054, 9.3799193564336747e-05, 2.5779034331208095e-05, 7.0368048909585923e-05, 0.00012233333836775273, 9.401519491802901e-05, 0.00012963717745151371, 0.0001087971031665802, 4.4071210140828043e-05, 0.00017230943194590509, 3.1297979148803279e-05, 5.9639856772264466e-05, 8.2245591329410672e-05, 9.9717792181763798e-05, 0.00016383960610255599, 8.7903499661479145e-05, 0.00011546142195584252, 8.6615436885040253e-05, 8.3606755651999265e-05, 8.7878310296218842e-05, 3.1359100830741227e-05, 0.00013493352162186056, 8.1826401583384722e-05, 2.5047753297258168e-05, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ 66,-94,96,71,51,-35,108,-66,61,-94,-82,48,53,-42,-67,-91,101,79,49,80,68,-73,-82,51,-34,-38,-68,-64,-68,64,-59,-113,-17,42,73,68,-67,55,-50,-21,53,-75,57,62,-88,9,77,-38, 80,-100,127,86,-76,-70,-59,-84,98,-105,-67,74,80,-107,-91,89,-39,96,82,127,89,-115,54,71,-52,-77,-71,-81,58,80,-28,-127,-88,82,84,87,-85,86,-83,-15,77,-91,79,90,-79,-127,95,-104, 33,-49,74,37,17,-40,-51,-41,46,-37,4,34,30,-75,-54,-1,-53,36,35,71,34,-56,33,27,-29,-47,-50,-25,33,33,89,-87,-91,49,37,38,-30,40,-40,-11,41,-40,34,43,-10,-9,37,-76, 
  /* [0][1][][] */ 91,-115,-44,97,55,-82,127,-87,86,-116,-72,85,86,-107,-10,-127,127,109,73,-38,84,108,-127,71,73,-77,-93,-101,-127,86,-66,-9,-94,72,107,96,-86,78,-84,91,81,-103,91,90,-89,106,94,-92, 127,-127,-65,127,-127,-127,-92,-127,127,-127,-127,127,127,-127,-19,94,-66,127,127,-48,127,127,71,127,127,-127,-127,-127,55,127,-24,14,-127,127,127,127,-127,127,-127,127,127,-127,127,127,-127,-11,127,-127, 62,-80,-30,64,36,-61,-52,-61,56,-45,-55,59,49,-53,-18,12,-64,53,58,-28,57,61,54,63,63,-68,-66,-47,38,54,127,17,-64,75,50,50,-49,59,-61,58,61,-59,56,63,-64,-65,61,-53, 
  /* [0][2][][] */ 45,-51,-49,51,25,-53,65,-42,44,-76,-10,43,57,-72,84,-79,77,45,36,-32,26,-10,-79,30,-25,-48,-52,-52,-76,34,-38,93,-78,40,51,48,-29,38,-47,-85,47,-51,43,43,-21,14,40,-75, 71,-78,-50,82,-59,-63,-69,-66,53,-79,-67,63,76,-47,127,31,-45,61,64,-45,57,-19,41,65,-50,-70,-81,-61,31,64,-21,117,-57,68,57,61,-53,66,-67,-105,71,-67,62,61,-82,46,62,-54, 41,-41,-26,47,29,-18,-17,-36,19,-28,-52,30,34,3,66,26,-34,23,30,-35,29,-2,40,43,-26,-34,-52,-25,36,36,61,70,-1,37,16,25,-24,31,-31,-53,30,-33,27,29,-60,8,33,-4, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.0034943735226988792, 0.0015517867868766189, 0.0064740469679236412, 0.002231986727565527, 0.0048685907386243343, 0.003104829229414463, 0.0070045874454081059, 0.0056050252169370651, 0.0034548444673418999, 0.0018025138415396214, 0.0022135740146040916, 0.0038765124045312405, 0.0021423622965812683, 0.0012831115163862705, 0.0069091985933482647, 0.0097836218774318695, 0.0063949553295969963, 0.0043239030055701733, 0.0057885758578777313, 0.0058101476170122623, 0.0033066614996641874, 0.0066734249703586102, 0.0045270617119967937, 0.0046462938189506531, 0.0049461363814771175, 0.0039864657446742058, 0.0010956089245155454, 0.0029906420968472958, 0.0051991664804518223, 0.0039956457912921906, 0.0055095800198614597, 0.0046238768845796585, 0.0018730263691395521, 0.0073231509886682034, 0.0013301641447469592, 0.002534693805500865, 0.0034954375587403774, 0.0042380061931908131, 0.0069631831720471382, 0.0037358985282480717, 0.0049071102403104305, 0.0036811558529734612, 0.0035532868932932615, 0.0037348282057791948, 0.0013327617198228836, 0.0057346746325492859, 0.0034776220563799143, 0.0010645295260474086, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data24[48] = { 556, 921, 2154, 584, 8780, 13803, 2654, -56, -772, -771, 882, 1018, 3643, 982, 24455, 3326, 1639, -1605, -382, 3613, -1307, 7758, 11429, 9144, 7009, 422, 4235, 4746, 6419, -382, 9403, 4347, 562, -415, 6533, 4519, -1931, 104, -1055, 4120, 967, -371, -1031, 198, 1039, 3331, 464, 839, };
const TfArray<1, int> tensor_dimension24 = { 1, { 48 } };
const TfArray<48, float> quant24_scale = { 48, { 0.000393901631468907, 0.00082477577961981297, 0.00025739512057043612, 0.00026146069285459816, 0.00024798113736324012, 0.00028466255753301084, 0.00040087560773827136, 0.00022177743085194379, 0.00036137056304141879, 0.00055054679978638887, 0.0011430797167122364, 0.0002876416256185621, 0.00037612696178257465, 0.00077237945515662432, 0.00014874165935907513, 0.00037267219158820808, 0.00028674467466771603, 0.00025760740390978754, 0.00020128679170738906, 0.00026011501904577017, 0.00045024519204162061, 0.00032777499291114509, 0.00032479563378728926, 0.0001703902380540967, 0.00023225827317219228, 0.00029065352282486856, 0.0016443191561847925, 0.00040804909076541662, 0.00027181580662727356, 0.00050100393127650023, 0.00027608085656538606, 0.00026058420189656317, 0.00069689675001427531, 0.0002257916348753497, 0.00056857673916965723, 0.00042912623030133545, 0.00070181424962356687, 0.00028436677530407906, 0.00022661458933725953, 0.00044468711712397635, 0.00017498881788924336, 0.00026230671210214496, 0.00029612352955155075, 0.00025615986669436097, 0.0018495717085897923, 0.00040898501174524426, 0.00038888136623427272, 0.0013645447324961424, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ -127,-6,-1,61,-36,33,30,-18, 
  /* [1][0][][] */ 41,67,26,13,7,-52,120,127, 
  /* [2][0][][] */ -30,1,19,-19,-127,-25,22,-2, 
  /* [3][0][][] */ 101,-4,1,-121,-127,19,29,-14, 
  /* [4][0][][] */ -127,44,-4,-15,74,7,53,24, 
  /* [5][0][][] */ -96,-35,36,-7,-127,10,3,90, 
  /* [6][0][][] */ -16,-127,58,-25,25,-20,-10,44, 
  /* [7][0][][] */ -54,-3,1,96,127,-41,-43,22, 
  /* [8][0][][] */ 74,16,11,-127,-11,-28,-33,-33, 
  /* [9][0][][] */ 5,-127,14,-17,-17,93,-85,78, 
  /* [10][0][][] */ -91,-4,4,21,-127,54,55,-13, 
  /* [11][0][][] */ 127,16,47,15,-65,-59,-45,-120, 
  /* [12][0][][] */ 10,19,14,-5,4,-78,127,53, 
  /* [13][0][][] */ 59,-17,-25,16,96,94,127,-23, 
  /* [14][0][][] */ 127,31,-10,9,-79,-8,-49,-4, 
  /* [15][0][][] */ 6,-127,22,-3,8,11,14,28, 
  /* [16][0][][] */ -58,-17,-16,-17,-127,14,24,14, 
  /* [17][0][][] */ -4,80,-91,-12,-24,-127,96,-90, 
  /* [18][0][][] */ 127,-30,-27,25,-60,26,15,105, 
  /* [19][0][][] */ 127,-59,-13,1,52,23,25,12, 
  /* [20][0][][] */ 127,16,-4,97,-8,20,-8,-45, 
  /* [21][0][][] */ 30,30,-55,33,-12,80,-127,-72, 
  /* [22][0][][] */ -127,11,17,-7,-32,1,-71,-10, 
  /* [23][0][][] */ -42,-54,-9,24,-127,73,79,-31, 
  /* [24][0][][] */ 127,17,11,-13,-95,-27,31,-11, 
  /* [25][0][][] */ 29,-12,-21,-27,127,48,53,-14, 
  /* [26][0][][] */ -8,-88,-15,-28,4,-127,74,-39, 
  /* [27][0][][] */ -14,-127,28,-16,-3,-58,40,-5, 
  /* [28][0][][] */ -73,33,-13,16,-42,-45,127,69, 
  /* [29][0][][] */ -11,42,4,2,9,47,-97,-127, 
  /* [30][0][][] */ 127,-26,-24,13,-92,0,-25,-20, 
  /* [31][0][][] */ -40,-18,59,-21,47,-117,127,67, 
  /* [32][0][][] */ -92,36,8,5,-127,-94,-98,43, 
  /* [33][0][][] */ -24,9,-15,23,-127,-55,-51,20, 
  /* [34][0][][] */ 3,-127,42,-9,5,90,-58,77, 
  /* [35][0][][] */ -27,-47,-127,-5,2,-69,51,-66, 
  /* [36][0][][] */ 9,127,54,12,-29,11,-21,-37, 
  /* [37][0][][] */ -127,35,56,-12,50,-29,-14,-115, 
  /* [38][0][][] */ -127,-10,-42,-6,40,30,54,114, 
  /* [39][0][][] */ -2,-26,45,10,-7,-92,127,82, 
  /* [40][0][][] */ -37,-7,-16,-34,-127,116,119,-37, 
  /* [41][0][][] */ -127,54,8,-83,-92,-103,-89,48, 
  /* [42][0][][] */ -39,-111,-117,7,-35,93,-127,-54, 
  /* [43][0][][] */ -68,6,-24,-122,127,72,76,12, 
  /* [44][0][][] */ 127,-15,24,-88,20,-32,-12,47, 
  /* [45][0][][] */ -34,-127,-18,5,-2,-72,83,16, 
  /* [46][0][][] */ 100,-11,-1,-29,127,-32,-29,4, 
  /* [47][0][][] */ 127,9,-8,117,0,13,14,-41, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.00073519593570381403, 0.0015393991488963366, 0.00048041396075859666, 0.00048800217336975038, 0.00046284330892376602, 0.00053130718879401684, 0.00074821250746026635, 0.00041393551509827375, 0.00067447847686707973, 0.0010275656823068857, 0.002133496105670929, 0.0005368674173951149, 0.00070202047936618328, 0.0014416042249649763, 0.0002776182082016021, 0.00069557235110551119, 0.00053519330685958266, 0.00048081020941026509, 0.0003756908408831805, 0.00048549054190516472, 0.00084035814506933093, 0.00061177415773272514, 0.00060621334705501795, 0.00031802410376258194, 0.00043349742190912366, 0.00054248899687081575, 0.0030690322164446115, 0.00076160143362358212, 0.00050732941599562764, 0.000935096584726125, 0.00051528989570215344, 0.00048636624705977738, 0.0013007197994738817, 0.00042142780148424208, 0.0010612175101414323, 0.00080094073200598359, 0.0013098980998620391, 0.0005307550891302526, 0.00042296378524042666, 0.00082998431753367186, 0.00032660711440257728, 0.00048958120169118047, 0.0005526984459720552, 0.00047810847172513604, 0.0034521250054240227, 0.00076334824552759528, 0.0007258258992806077, 0.0025468484964221716, } };
const TfArray<48, int> quant25_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data26[8] = { -43641, 33253, -14703, -11274, 16352, -2088, 39729, 42176, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 0.00045098515693098307, 0.00061095220735296607, 0.0015801009722054005, 0.0015619362238794565, 0.00066640233853831887, 0.00052082818001508713, 0.00047398623428307474, 0.00090195232769474387, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ -83,0,-2,19,15,-9,3,-13,-111,118,-40,127,118,-23,89,-17,-15,-42,-10,-22,0,9,6,-42,21,-99,-6,64,-21,0,39,-31,-11,-79,114,13,-15,21,-10,-10,120,-21,55,-26,-42,15,-12,-3, 
  /* [1][0][][] */ 9,24,127,-6,-6,-23,-2,-98,17,12,18,-9,-30,16,-16,-118,15,-73,12,-5,-48,25,26,-34,-18,-1,27,1,21,2,4,-11,-11,7,-4,14,-19,-52,68,-42,4,43,-16,23,-19,15,25,-18, 
  /* [2][0][][] */ 11,-37,16,-37,29,32,3,-34,-6,-4,-3,14,-4,58,2,3,-23,127,-22,-27,-14,20,-37,-10,116,4,8,-10,-24,-5,3,-44,-6,-9,7,12,-8,-11,-5,11,20,-23,-21,2,7,34,-15,-35, 
  /* [3][0][][] */ -8,-74,-2,5,12,-25,-10,-1,1,-18,18,20,13,0,38,6,-8,-21,-2,16,-7,18,-23,1,16,56,7,14,-11,6,127,-3,18,5,-11,-8,-15,-16,2,16,-12,10,-11,28,-7,14,8,22, 
  /* [4][0][][] */ -109,3,2,2,1,-43,7,15,42,-45,41,-23,-40,-3,-9,1,2,4,-14,39,24,-15,21,8,-3,48,13,108,-1,-11,-5,-36,-6,-127,-35,22,7,12,1,0,-49,-9,-15,33,-50,-8,1,-3, 
  /* [5][0][][] */ -14,20,-9,22,-36,20,-2,59,14,9,19,24,1,-32,-5,38,8,-89,18,20,30,-47,7,41,18,5,-66,-46,-31,-30,17,11,11,-70,7,-59,72,-10,-40,13,17,-38,-7,8,127,-24,-46,0, 
  /* [6][0][][] */ -63,-28,3,-3,43,-37,-7,-34,-17,-10,50,-35,-21,24,-7,-56,-20,7,12,-58,-50,74,-20,-102,-15,-16,-89,-91,38,34,-8,11,0,-68,-36,73,-93,-15,7,-73,1,13,19,52,127,-46,45,27, 
  /* [7][0][][] */ 20,34,-88,14,-13,17,-1,70,-8,0,63,-14,6,-28,7,-11,-9,-127,32,-28,71,39,14,-60,25,-28,24,1,-21,32,-19,4,-7,44,11,-31,-7,-79,-43,-72,-8,-19,44,57,-21,-36,-21,12, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.019166868180036545, 0.02596546895802021, 0.067154288291931152, 0.066382288932800293, 0.028322098776698112, 0.022135196253657341, 0.020144414156675339, 0.038332972675561905, } };
const TfArray<8, int> quant27_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data28[48] = { -49540, -315, 9037, 631, 6537, -3510, 1920, 22966, 1515, 36757, -2348, 29227, -5799, -2070, 33295, 14490, 414, 19179, 37955, 11581, -1060, -760, 1309, 31526, -8801, 25799, 46810, 33164, 5225, 7765, -2165, 143, 1751, 15561, -7576, 16961, -10784, 10144, -23295, 142879, 27905, 20376, 12313, -2171, 16928, 5358, 1625, -1139, };
const TfArray<1, int> tensor_dimension28 = { 1, { 48 } };
const TfArray<48, float> quant28_scale = { 48, { 0.00032423558877781034, 0.00027078477432951331, 0.00018008402548730373, 0.00033665430964902043, 0.0001163583729066886, 9.8363212600816041e-05, 0.00052121205953881145, 0.00014873211330268532, 0.00012394013174343854, 0.00013271518400870264, 9.3667185865342617e-05, 0.00015040030120871961, 0.00031046444200910628, 0.00012578631867654622, 7.5405449024401605e-05, 0.0001065190663211979, 0.00016919930931180716, 0.0002048056194325909, 6.246112025110051e-05, 0.00016259742551483214, 0.00024600600590929389, 0.00020443863468244672, 0.00016742656589485705, 7.0607638917863369e-05, 0.00017224920156877488, 0.00014115766680333763, 0.00049615523312240839, 9.7724107035901397e-05, 0.00013083094381727278, 0.00010755239054560661, 0.00010580625530565158, 0.00020407374540809542, 0.00053682731231674552, 0.00016823259647935629, 0.00015924687613733113, 0.00014035712229087949, 0.00032311631366610527, 0.00021542182366829365, 0.00028167653363198042, 1.8532498870627023e-05, 0.00011404769611544907, 6.2122089730110019e-05, 0.0001393208367517218, 0.00010937689512502402, 0.00013488467084243894, 9.3489812570624053e-05, 0.00020686796051450074, 9.884042083285749e-05, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ 3,-3,21,107,4,80,-1,29,14,9,9,8,-10,-9,-45,10,-2,8,-21,-117,-5,-20,127,-9,-2,7,-5,10,-4,4,17,104,20,31,41,-25,1,33,-1,4,17,-68,-7,-9,19,1,-7,-10, 127,10,15,-127,27,89,12,12,120,127,5,43,-52,-24,6,9,127,-56,-57,-55,-96,27,-109,15,18,70,-32,-86,23,20,11,-119,6,-59,127,10,-40,-48,-4,121,-79,-97,-30,3,-35,-10,-127,24, -34,0,8,13,-2,66,6,19,25,9,-15,31,-16,-5,15,5,-105,29,-4,79,-30,-10,-20,-6,-2,-62,-4,28,-17,5,8,-19,9,-22,18,-18,-1,46,45,-11,50,39,-16,12,-41,2,-3,-5, 
  /* [0][1][][] */ 123,6,0,-98,13,-30,35,-16,8,9,-13,54,-7,-2,19,-32,0,-50,-56,-88,12,-71,-124,-18,6,98,-15,-127,-9,32,14,-103,18,-49,-1,127,-3,57,-41,40,-62,-127,39,-88,-41,-15,-13,-5, 27,-126,-127,113,-127,-127,-127,-127,-127,-97,127,-127,127,127,34,-127,-85,127,127,-105,127,127,111,127,127,-127,-127,29,-127,-127,98,127,-127,127,-30,-40,127,-127,127,127,127,-80,127,127,127,-124,100,108, 53,6,47,-14,5,-61,46,19,-25,14,-106,-8,-1,-42,127,5,62,-66,-68,87,15,-44,10,-33,4,3,-40,70,19,40,2,5,33,-42,8,67,-6,63,68,-10,-81,8,-86,-30,29,-17,-12,7, 
  /* [0][2][][] */ -57,-7,25,-17,6,32,-39,23,8,-24,12,32,5,-7,-39,20,5,22,-13,104,8,-30,-15,-12,-2,22,0,54,-11,2,48,-28,-19,-40,-29,-37,-2,30,8,-25,9,-4,41,-38,-32,17,-12,18, 66,127,75,20,16,-22,124,36,17,-5,44,26,-7,-1,-91,27,-59,-56,-34,123,-33,51,13,20,33,-62,-41,32,75,0,127,23,86,-24,6,-34,-25,-17,-15,118,-28,-10,-39,44,24,-34,6,-127, -45,-4,6,-4,5,-7,-61,8,-19,-12,-41,-40,19,-11,-9,13,33,24,-6,-127,22,-8,3,-8,-5,8,-10,-53,-16,8,6,10,-19,88,-35,-20,-5,36,24,-63,4,9,-37,7,-39,127,-5,-3, 
};
const TfArray<4, int> tensor_dimension29 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant29_scale = { 48, { 0.013780011795461178, 0.011508352123200893, 0.0076535711996257305, 0.014307808130979538, 0.004945230670273304, 0.0041804364882409573, 0.022151511162519455, 0.0063211144879460335, 0.0052674552425742149, 0.0056403954513370991, 0.0039808554574847221, 0.0063920128159224987, 0.013194737955927849, 0.0053459182381629944, 0.0032047315035015345, 0.0045270603150129318, 0.007190970703959465, 0.0087042385712265968, 0.0026545976288616657, 0.0069103906862437725, 0.010455254465341568, 0.0086886417120695114, 0.0071156290359795094, 0.0030008244793862104, 0.0073205907829105854, 0.0059992005117237568, 0.021086597815155983, 0.0041532744653522968, 0.0055603152140974998, 0.0045709763653576374, 0.0044967657886445522, 0.0086731342598795891, 0.02281516045331955, 0.0071498854085803032, 0.0067679923959076405, 0.0059651774354279041, 0.013732443563640118, 0.0091554271057248116, 0.011971252970397472, 0.00078763120109215379, 0.0048470268957316875, 0.002640188904479146, 0.0059211351908743382, 0.0046485178172588348, 0.0057325982488691807, 0.0039733168669044971, 0.0087918881326913834, 0.0042007178999483585, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data30[48] = { 56286, 11367, 7166, 9708, 1809, 10590, -2016, -273, 956, 3497, 3886, 376, 2638, -1191, 752, -2315, 4711, 10440, -268, 42473, 6113, 3121, 9082, -561, 4887, 5618, 26138, 10625, -105, -2733, 154, 2420, -2458, 9080, 3298, 8646, 8256, 4771, 30030, 2203, -899, 3245, 1533, 4542, 5303, 2190, -1408, 3327, };
const TfArray<1, int> tensor_dimension30 = { 1, { 48 } };
const TfArray<48, float> quant30_scale = { 48, { 7.6802883995696902e-05, 0.00020947713346686214, 0.00021524634212255478, 0.0003352704516146332, 0.0012080550659447908, 0.00047017342876642942, 0.00096352346008643508, 0.0010277570690959692, 0.00058370438637211919, 0.00041658635018393397, 0.00058095855638384819, 0.00040569205884821713, 0.00043036139686591923, 0.00039550557266920805, 0.00044502213131636381, 0.0015386060113087296, 0.00034921406768262386, 0.00040769975748844445, 0.0017582080326974392, 6.4847583416849375e-05, 0.00022138185158837587, 0.00033031025668606162, 0.00043531018309295177, 0.00088648783275857568, 0.00026637470000423491, 0.00020970849436707795, 0.00015506884665228426, 0.00034972853609360754, 0.00084187783068045974, 0.00095247989520430565, 0.00047348445514217019, 0.00034961345954798162, 0.00081664492608979344, 0.00024010428751353174, 0.00030640707700513303, 0.00020904208940919489, 0.00045250853872857988, 0.00027534016408026218, 7.9629156971350312e-05, 0.0020466705318540335, 0.00067019218113273382, 0.00082888646284118295, 0.00033876762608997524, 0.00034029834205284715, 0.00022588511637877673, 0.00049605965614318848, 0.00080883270129561424, 0.00079425657168030739, } };
const TfArray<48, int> quant30_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ 48,37,-3,-17,127,18,-35,-29, 
  /* [1][0][][] */ -25,-17,5,127,18,0,12,22, 
  /* [2][0][][] */ 46,-127,-44,40,-28,-80,74,-2, 
  /* [3][0][][] */ 127,-36,-7,18,-16,-30,28,23, 
  /* [4][0][][] */ -10,-60,127,14,-14,-33,11,-84, 
  /* [5][0][][] */ 35,18,17,3,127,21,7,-20, 
  /* [6][0][][] */ -28,116,-16,127,27,25,-105,-52, 
  /* [7][0][][] */ -3,127,13,9,-10,4,11,-9, 
  /* [8][0][][] */ 127,29,-9,2,-30,-17,9,-31, 
  /* [9][0][][] */ -127,20,28,35,52,32,-11,10, 
  /* [10][0][][] */ -94,-7,9,127,28,9,0,2, 
  /* [11][0][][] */ -127,-11,22,-61,42,12,-10,-39, 
  /* [12][0][][] */ 127,7,5,22,-43,-28,-2,-22, 
  /* [13][0][][] */ -29,118,-127,-27,9,122,-102,79, 
  /* [14][0][][] */ -78,-31,10,127,33,21,26,-10, 
  /* [15][0][][] */ -1,127,-3,-2,-4,-10,9,-56, 
  /* [16][0][][] */ -11,-79,-3,19,-32,-107,127,-32, 
  /* [17][0][][] */ 13,127,6,-11,4,62,-67,-14, 
  /* [18][0][][] */ 20,40,-127,4,12,30,-32,68, 
  /* [19][0][][] */ -106,60,-13,24,-127,-32,47,76, 
  /* [20][0][][] */ -127,-11,-11,4,84,-27,34,-2, 
  /* [21][0][][] */ -49,9,-1,8,-127,-15,26,10, 
  /* [22][0][][] */ -127,-42,-28,-11,97,-3,58,33, 
  /* [23][0][][] */ -25,-22,-2,-11,1,79,-127,-91, 
  /* [24][0][][] */ 7,46,-127,6,4,30,-16,82, 
  /* [25][0][][] */ 79,-14,-4,127,-78,-18,32,-44, 
  /* [26][0][][] */ 0,-24,4,4,-27,127,126,-25, 
  /* [27][0][][] */ 59,-10,-11,5,127,14,41,-22, 
  /* [28][0][][] */ -4,94,-66,16,17,82,-24,127, 
  /* [29][0][][] */ -10,13,-6,-9,0,91,-127,-88, 
  /* [30][0][][] */ 5,-8,-7,-127,-14,-11,-10,-7, 
  /* [31][0][][] */ -83,-9,0,7,-127,10,20,12, 
  /* [32][0][][] */ -11,32,44,-124,15,61,-65,-127, 
  /* [33][0][][] */ -56,0,-17,-8,-127,37,35,-8, 
  /* [34][0][][] */ -127,29,43,33,50,6,-20,8, 
  /* [35][0][][] */ -8,127,0,-2,24,-104,75,-39, 
  /* [36][0][][] */ -11,39,14,-12,11,99,-127,-12, 
  /* [37][0][][] */ 55,-77,-18,20,44,-100,127,-39, 
  /* [38][0][][] */ -22,-127,18,-8,-4,10,-61,50, 
  /* [39][0][][] */ 6,-127,-13,-9,3,-10,-56,-86, 
  /* [40][0][][] */ 77,83,19,-27,-50,76,-118,-127, 
  /* [41][0][][] */ 4,-113,14,-4,17,80,-65,127, 
  /* [42][0][][] */ 29,-24,-31,-127,-50,-26,5,-22, 
  /* [43][0][][] */ -98,-35,-11,-127,48,-4,-2,-22, 
  /* [44][0][][] */ 16,-42,-6,15,-31,127,118,10, 
  /* [45][0][][] */ -127,-8,-15,8,11,-21,13,-19, 
  /* [46][0][][] */ 3,75,127,-13,-13,21,-22,4, 
  /* [47][0][][] */ 18,-3,19,127,-11,-6,-14,22, 
};
const TfArray<4, int> tensor_dimension31 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant31_scale = { 48, { 0.00020817767654079944, 0.00056779716396704316, 0.00058343488490208983, 0.00090876559261232615, 0.0032744875643402338, 0.0012744262348860502, 0.0026116736698895693, 0.0027857816312462091, 0.001582156983204186, 0.0011291760019958019, 0.0015747142024338245, 0.0010996465571224689, 0.0011665138881653547, 0.0010720356367528439, 0.0012062524911016226, 0.0041704606264829636, 0.00094656040892004967, 0.0011050885077565908, 0.0047657019458711147, 0.00017577229300513864, 0.00060006545390933752, 0.00089532078709453344, 0.0011799278436228633, 0.002402865095064044, 0.00072202057344838977, 0.00056842429330572486, 0.00042032107012346387, 0.00094795494806021452, 0.002281947759911418, 0.0025817395653575659, 0.0012834009248763323, 0.00094764301320537925, 0.0022135528270155191, 0.0006508134538307786, 0.00083053013077005744, 0.00056661799317225814, 0.0012265447294339538, 0.00074632192263379693, 0.00021583840134553611, 0.0055475924164056778, 0.0018165860092267394, 0.0022467339877039194, 0.00091824488481506705, 0.00092239392688497901, 0.00061227177502587438, 0.0013445919612422585, 0.002192377345636487, 0.0021528680808842182, } };
const TfArray<48, int> quant31_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data32[8] = { -3630, -23960, 17711, 26999, 6581, 2809, 39572, 9233, };
const TfArray<1, int> tensor_dimension32 = { 1, { 8 } };
const TfArray<8, float> quant32_scale = { 8, { 0.0011416332563385367, 0.00065718882251530886, 0.00087443948723375797, 0.0010695289820432663, 0.00097310700220987201, 0.0010582762770354748, 0.00079578178701922297, 0.00069369038101285696, } };
const TfArray<8, int> quant32_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ -7,-6,4,-73,10,8,6,0,6,3,0,-16,73,0,1,7,0,-12,-7,4,64,-5,-1,8,19,30,14,15,2,11,-1,-127,8,6,8,0,-20,4,-15,30,5,-26,-2,4,8,-1,5,-1, 
  /* [1][0][][] */ -41,-4,-13,-13,42,21,-43,82,20,15,-33,-32,19,0,16,38,0,53,11,-59,4,21,127,20,-24,4,49,5,27,6,14,-10,23,-5,-15,-8,3,-48,15,0,-3,-4,-108,-9,-45,8,-58,-112, 
  /* [2][0][][] */ -50,23,10,32,45,-1,31,11,-14,63,34,12,-3,0,0,53,0,12,-127,20,-12,16,-3,-7,-43,5,41,-14,21,26,22,8,10,0,-18,-11,21,10,15,11,47,-12,-47,18,21,-46,30,29, 
  /* [3][0][][] */ 2,-5,-6,10,-8,36,5,-4,62,10,-1,-4,13,0,-29,-5,0,2,-16,2,-9,4,2,-13,-15,-19,-10,-2,-6,-8,-8,-23,-52,24,-47,-4,4,4,-2,-127,4,5,4,-42,4,0,3,9, 
  /* [4][0][][] */ -5,-9,86,32,7,-8,-7,-5,9,-2,-5,-11,-77,0,-10,5,0,1,8,1,64,-1,-3,-4,-11,29,-5,34,-15,-3,4,102,3,6,2,0,13,-18,-16,-13,3,-127,-3,7,-1,-8,2,-8, 
  /* [5][0][][] */ -10,43,6,-9,0,54,26,17,-20,30,7,59,29,0,-127,-2,0,21,-37,19,-6,15,-17,40,-14,-3,27,-11,-17,24,24,-12,45,25,-40,-8,2,18,-46,16,25,-11,-16,35,18,55,24,22, 
  /* [6][0][][] */ -22,-57,-1,3,38,-57,-22,14,28,-28,-18,89,-20,0,-127,35,0,-8,43,-19,-20,7,20,-28,21,-1,-9,-22,35,-11,-15,-20,94,-41,33,5,-10,-11,-66,-26,-11,-20,-10,-27,-26,-75,-20,-29, 
  /* [7][0][][] */ -111,-25,-8,8,127,30,74,27,17,3,21,-44,-27,0,86,107,0,14,11,64,-5,1,-29,40,22,8,46,12,58,65,60,-8,-8,-19,-16,-22,9,24,15,34,73,1,-22,-10,65,-4,69,77, 
};
const TfArray<4, int> tensor_dimension33 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant33_scale = { 8, { 0.048519410192966461, 0.027930524200201035, 0.037163678556680679, 0.045454978942871094, 0.041357047855854034, 0.044976741075515747, 0.033820725977420807, 0.029481841251254082, } };
const TfArray<8, int> quant33_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data34[48] = { 71741, 49938, 63994, 44672, -702, 13049, 1747, 32376, 23242, 34060, 27653, 1468, -49544, -127, 35283, 70, -204, 50417, 1330, 2854, -18316, 16666, 51090, 37700, -8779, 38958, 48110, 23597, -1972, 17079, -7891, -48591, 9548, 102950, 26428, 1530, 63840, 226, 179937, -26628, 13498, -27633, 702, 113164, -243, 71408, 1773, -25195, };
const TfArray<1, int> tensor_dimension34 = { 1, { 48 } };
const TfArray<48, float> quant34_scale = { 48, { 8.4186714957468212e-05, 8.2672733697108924e-05, 0.00013121140364091843, 0.00012940498709212989, 0.00018340119277127087, 0.00017174141248688102, 0.00014126206224318594, 6.16011384408921e-05, 9.6197436505462974e-05, 2.9814211302436888e-05, 6.2557504861615598e-05, 2.7909563868888654e-05, 0.00017844657122623175, 0.005541567225009203, 7.259468111442402e-05, 0.00022839567100163549, 0.0027484172023832798, 2.0049119484610856e-05, 9.8985183285549283e-05, 0.00017576859681867063, 0.00011017597717000172, 0.00011300102050881833, 0.0001147783623309806, 3.3887285098899156e-05, 5.6009834224823862e-05, 7.0110014348756522e-05, 2.8527674658107571e-05, 4.8745183448772877e-05, 0.00030392411281354725, 4.507957783062011e-05, 4.5742308429908007e-05, 0.00017371444846503437, 0.00025707075837999582, 9.4950410129968077e-06, 9.4382776296697557e-05, 0.00020883019897155464, 1.2288964171602856e-05, 0.00052565010264515877, 2.5777600967558101e-05, 9.7805765108205378e-05, 5.1747603720286861e-05, 0.00019690571934916079, 0.00010736496187746525, 9.8311957117402926e-06, 0.00015346208238042891, 8.4106737631373107e-05, 0.00023027145653031766, 0.00012518480070866644, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ -42,-23,-8,-21,9,-37,-79,-72,-26,-50,3,63,36,-71,115,-43,-113,-85,39,-8,-1,-73,-113,-78,-34,-125,-61,-27,71,14,97,32,-127,-87,-10,55,17,47,-127,77,-77,-14,108,-108,-7,-36,-87,111, 75,10,-29,-33,57,-127,-127,-84,61,-77,-118,104,38,-82,0,62,-52,-111,60,4,9,-112,-127,-72,-2,-127,-117,-43,-56,21,-55,56,26,-127,66,82,10,71,-90,127,-127,7,127,-127,0,-23,-127,98, -33,43,4,-7,-64,-108,-60,-19,89,-7,-127,38,10,-71,-102,-10,-127,-25,27,10,-16,-73,-36,-23,-9,-30,-57,-12,-10,17,-24,10,104,-83,70,32,12,35,-5,15,-79,4,9,-80,-18,5,-55,15, 
  /* [0][1][][] */ -86,-127,-44,-42,-8,57,98,-107,-25,-109,-21,108,89,-64,28,-95,-121,-97,92,-77,41,-90,-101,-127,40,-127,-77,-43,127,-61,127,88,-45,-83,-16,87,-35,-77,-105,87,42,60,107,-107,-91,-119,79,121, 127,-83,-127,-127,127,42,93,-127,96,-127,-108,127,127,-14,-6,127,-60,-127,127,-127,127,-127,-119,-117,127,-101,-127,-127,-123,-127,-68,127,27,-110,127,127,-68,-127,-95,86,61,127,125,-111,-111,-127,121,127, -54,32,-65,-82,-118,-23,31,-39,127,-17,-75,35,58,-70,-27,-42,-37,-32,54,-72,59,-82,-38,-25,47,-9,-46,-64,14,-90,-36,19,29,-96,121,23,-37,-61,0,-14,36,55,8,-77,-57,-38,63,37, 
  /* [0][2][][] */ -60,-107,-34,-36,2,37,-5,-36,-35,-61,-17,58,78,-127,-127,-62,-43,-24,65,75,55,-35,-13,-60,33,-63,-9,-64,76,27,76,64,103,-26,-41,-8,-92,34,-17,31,11,38,18,-60,96,-79,1,35, 86,-74,-87,-90,81,20,7,-48,46,-72,-32,58,86,-26,17,93,-24,-35,78,116,86,-57,-17,-59,96,-73,-19,-101,-51,38,-44,107,-18,-50,70,6,-127,49,-13,-1,12,32,19,-64,127,-102,-13,44, -29,28,-43,-39,-78,-20,22,-11,59,-5,-12,34,34,-43,111,-26,-93,-4,31,59,81,-30,-2,-4,45,-5,-5,-68,-14,27,-22,37,-87,-45,70,4,-21,22,26,-38,8,36,-6,-17,63,-36,-5,19, 
};
const TfArray<4, int> tensor_dimension35 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.0035779352765530348, 0.003513591131195426, 0.0055764843709766865, 0.0054997117258608341, 0.0077945506200194359, 0.0072990097105503082, 0.0060036377981305122, 0.0026180483400821686, 0.0040883910842239857, 0.0012671039439737797, 0.0026586940512061119, 0.0011861564125865698, 0.0075839790515601635, 0.23551659286022186, 0.0030852740164846182, 0.009706815704703331, 0.1168077290058136, 0.00085208757082000375, 0.0042068702168762684, 0.007470165379345417, 0.0046824789606034756, 0.0048025432042777538, 0.0048780804499983788, 0.0014402095694094896, 0.0023804178927093744, 0.0029796755407005548, 0.0012124261120334268, 0.0020716702565550804, 0.012916774488985538, 0.0019158819923177361, 0.0019440480973571539, 0.0073828636668622494, 0.010925507172942162, 0.00040353921940550208, 0.0040112677961587906, 0.0088752834126353264, 0.00052228098502382636, 0.022340128198266029, 0.0010955480393022299, 0.0041567450389266014, 0.0021992730908095837, 0.0083684930577874184, 0.0045630107633769512, 0.00041782582411542535, 0.0065221386030316353, 0.0035745364148169756, 0.009786536917090416, 0.0053203538991510868, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data36[48] = { 4305, 62, 10519, 7208, 5632, 6471, 10048, -18, -91, -371, 2263, 476, 14386, -82821040, 4286, 13325, -66857440, -115, -505, 11076, 3517, -11, -143, 416, 3750, -1209, 64, 856, 3473, 1668, 2873, 14284, 4552, 262, 116, -1776, 306, 5716, -136, 11903, 2272, 15120, -159, -89, 11224, 202, 15836, 5754, };
const TfArray<1, int> tensor_dimension36 = { 1, { 48 } };
const TfArray<48, float> quant36_scale = { 48, { 0.00049068924272432923, 0.00044665034511126578, 0.00030090258223935962, 0.00026932527543976903, 0.00035040196962654591, 0.00032020857906900346, 0.00038128107553347945, 0.0014698856975883245, 0.00055081263417378068, 0.0020785960368812084, 0.00064974353881552815, 0.001671186531893909, 0.00015878867998253554, 1.9582422350339357e-09, 0.00061300478409975767, 0.00024488091003149748, 1.9582422350339357e-09, 0.0064929858781397343, 0.00041097361827269197, 0.00033998486469499767, 0.00033601484028622508, 0.0047004669904708862, 0.00030189397512003779, 0.0014382506487891078, 0.0010264948941767216, 0.00051400007214397192, 0.0022754035890102386, 0.0014488999731838703, 0.00031684525310993195, 0.0017321497434750199, 0.0010327014606446028, 0.00015784402785357088, 0.00017538115207571536, 0.012316172011196613, 0.00063764461083337665, 0.00066619692370295525, 0.0050370078533887863, 0.00023080117534846067, 0.0024909195490181446, 0.00028991667204536498, 0.0012684676330536604, 0.00014390354044735432, 0.00054841372184455395, 0.010684759356081486, 0.00044395402073860168, 0.00043502607150003314, 0.00018294007168151438, 0.00016969865828286856, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ 19,-127,51,-29,38,-16,-52,18, 
  /* [1][0][][] */ 69,127,-6,-106,9,9,-115,121, 
  /* [2][0][][] */ 22,9,-48,127,56,127,45,91, 
  /* [3][0][][] */ 83,62,-69,127,-77,-1,-14,21, 
  /* [4][0][][] */ -45,-68,60,18,24,6,-39,-127, 
  /* [5][0][][] */ 17,0,-36,34,-13,-27,44,127, 
  /* [6][0][][] */ 89,-22,-104,-47,127,27,52,1, 
  /* [7][0][][] */ 127,20,26,-16,31,-4,76,-63, 
  /* [8][0][][] */ -7,-64,10,79,4,29,-5,-127, 
  /* [9][0][][] */ 112,-118,30,3,-23,30,-127,102, 
  /* [10][0][][] */ -110,-42,-127,38,-26,12,-110,64, 
  /* [11][0][][] */ -20,-43,-13,-103,-127,-41,43,-18, 
  /* [12][0][][] */ 17,14,-25,72,-63,-20,48,127, 
  /* [13][0][][] */ 0,0,0,0,0,0,0,0, 
  /* [14][0][][] */ 0,-45,-6,13,53,127,40,50, 
  /* [15][0][][] */ 21,15,17,-127,53,21,-43,66, 
  /* [16][0][][] */ 0,0,0,0,0,0,0,0, 
  /* [17][0][][] */ 7,19,127,22,-36,-12,26,36, 
  /* [18][0][][] */ 85,-127,24,35,-12,13,-122,-1, 
  /* [19][0][][] */ -125,-4,64,84,-127,-40,-70,71, 
  /* [20][0][][] */ 32,41,-28,96,-19,-127,-7,46, 
  /* [21][0][][] */ 54,22,127,8,-12,-8,67,7, 
  /* [22][0][][] */ -83,-22,-127,-13,4,-14,-78,5, 
  /* [23][0][][] */ -107,119,-24,-8,4,0,127,-85, 
  /* [24][0][][] */ 6,-47,-49,94,-10,-58,91,127, 
  /* [25][0][][] */ 13,44,51,52,120,127,-73,-63, 
  /* [26][0][][] */ -89,-29,-127,-5,7,23,-93,-5, 
  /* [27][0][][] */ 7,-44,-34,5,-24,127,48,61, 
  /* [28][0][][] */ 4,-17,-8,25,1,127,36,30, 
  /* [29][0][][] */ 83,28,127,-18,-31,3,107,-14, 
  /* [30][0][][] */ -96,124,-40,-39,-15,3,127,-34, 
  /* [31][0][][] */ -48,-88,-28,4,19,-106,120,127, 
  /* [32][0][][] */ 4,-11,-47,105,-22,86,79,127, 
  /* [33][0][][] */ -7,53,-16,-94,5,-2,-8,127, 
  /* [34][0][][] */ -8,54,-11,-89,29,-5,17,127, 
  /* [35][0][][] */ 127,17,-8,-39,27,44,110,-56, 
  /* [36][0][][] */ -119,-1,38,30,-51,37,-127,63, 
  /* [37][0][][] */ 1,-30,-13,29,37,127,51,62, 
  /* [38][0][][] */ 2,25,-1,77,127,13,-23,31, 
  /* [39][0][][] */ 18,10,31,-103,28,-3,-37,127, 
  /* [40][0][][] */ 92,21,127,10,-19,12,83,4, 
  /* [41][0][][] */ -2,-30,-31,107,62,127,79,112, 
  /* [42][0][][] */ -93,0,127,29,-22,23,-41,74, 
  /* [43][0][][] */ -24,-56,10,105,-29,13,22,-127, 
  /* [44][0][][] */ 61,25,-34,-127,117,-46,2,-70, 
  /* [45][0][][] */ -91,127,-2,-62,9,21,77,-84, 
  /* [46][0][][] */ -127,-41,75,76,-45,81,-121,102, 
  /* [47][0][][] */ 87,27,127,14,36,-4,90,-4, 
};
const TfArray<4, int> tensor_dimension37 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant37_scale = { 48, { 0.00098652124870568514, 0.00089798186672851443, 0.0006049588555470109, 0.00054147327318787575, 0.0007044763769954443, 0.0006437731790356338, 0.00076655822340399027, 0.002955176867544651, 0.0011073981877416372, 0.0041789771057665348, 0.0013062967918813229, 0.0033598882146179676, 0.00031924157519824803, 3.937008052901092e-09, 0.0012324342969805002, 0.00049232831224799156, 3.937008052901092e-09, 0.013054022565484047, 0.0008262545452453196, 0.00068353302776813507, 0.00067555136047303677, 0.0094501981511712074, 0.00060695200227200985, 0.0028915752191096544, 0.0020637481939047575, 0.0010333872633054852, 0.0045746550895273685, 0.0029129853937774897, 0.00063701125327497721, 0.0034824535250663757, 0.0020762262865900993, 0.00031734237563796341, 0.00035260041477158666, 0.024761425331234932, 0.0012819721596315503, 0.0013393760891631246, 0.010126806795597076, 0.00046402131556533277, 0.005007945466786623, 0.00058287184219807386, 0.0025502296630293131, 0.00028931529959663749, 0.0011025752173736691, 0.021481502801179886, 0.00089256098726764321, 0.00087461149087175727, 0.00036779747460968792, 0.00034117588074877858, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data38[8] = { -5582, -36917, -10463, -13796, -31904, -3998, -31798, -28438, };
const TfArray<1, int> tensor_dimension38 = { 1, { 8 } };
const TfArray<8, float> quant38_scale = { 8, { 0.0018839070107787848, 0.0020469257142394781, 0.0021919996943324804, 0.0011284429347142577, 0.0013046232052147388, 0.0020943994168192148, 0.0014339348999783397, 0.0010071351425722241, } };
const TfArray<8, int> quant38_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data39[8*1*1*16] = { 
  /* [0][0][][] */ 0,-22,5,-3,125,-5,12,1,-1,-114,-94,-12,0,127,-3,0, 
  /* [1][0][][] */ 0,-18,-14,82,66,-2,18,0,1,-9,127,-54,0,32,-4,0, 
  /* [2][0][][] */ 0,-2,-2,-14,-53,5,12,10,0,10,-18,-6,0,127,-3,0, 
  /* [3][0][][] */ 0,-5,-10,-127,78,20,72,3,-1,68,1,31,0,5,21,0, 
  /* [4][0][][] */ 0,48,-24,33,-58,34,127,5,-1,-64,23,-11,0,-11,20,0, 
  /* [5][0][][] */ 0,-15,5,-1,-23,-18,-10,8,-1,8,-6,-39,0,-6,127,0, 
  /* [6][0][][] */ 0,14,19,1,58,-12,-21,-7,1,-108,119,76,0,127,66,0, 
  /* [7][0][][] */ 0,8,-1,127,9,3,21,-6,1,74,-61,70,0,-6,48,0, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant39_scale = { 8, { 0.080066047608852386, 0.086994342505931854, 0.093159988522529602, 0.047958824783563614, 0.055446483194828033, 0.089011974632740021, 0.060942232608795166, 0.042803242802619934, } };
const TfArray<8, int> quant39_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data40[16] = { -161, 16187, 61188, 10013, 10599, 75260, 11681, 58555, -10655, 5140, 28536, 14076, -445, 24389, 9174, -107, };
const TfArray<1, int> tensor_dimension40 = { 1, { 16 } };
const TfArray<16, float> quant40_scale = { 16, { 0.0018688903655856848, 0.00015844345034565777, 6.5718115365598351e-05, 0.00035126807051710784, 0.00016826373757794499, 4.4052085286239162e-05, 0.00040879531297832727, 6.692378519801423e-05, 2.033699638559483e-05, 0.0003443585301283747, 0.00020614717504940927, 0.00072709820233285427, 0.00072724185883998871, 0.00030045802122913301, 0.00020743341883644462, 0.003907486330717802, } };
const TfArray<16, int> quant40_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data41[1*3*3*16] = { 
  /* [0][0][][] */ -108,19,-83,-126,39,-67,80,-75,-90,-3,-7,29,-127,5,54,-73, 51,25,-127,127,127,-127,127,-127,-85,127,-127,52,-105,5,127,-25, 24,-24,87,-2,-72,67,-93,79,-95,-27,4,-16,61,1,-101,-29, 
  /* [0][1][][] */ -127,127,-24,14,-44,15,-28,15,-28,0,3,-110,-49,9,-29,-14, -78,-41,-58,-14,-8,-26,9,-27,-108,-89,21,-12,-104,-127,1,23, 14,1,62,2,3,33,-24,34,-127,6,-2,1,-21,12,-3,43, 
  /* [0][2][][] */ -115,-72,66,2,-6,38,-38,54,-76,0,0,5,40,2,-27,23, 23,-4,29,-2,-27,39,-33,22,-125,-13,0,85,-58,0,-28,-111, 21,-7,17,0,4,14,10,23,-115,4,-1,-127,107,3,17,-127, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant41_scale = { 16, { 0.079427838325500488, 0.0067338463850319386, 0.0027930198702961206, 0.014928892254829407, 0.0071512088179588318, 0.0018722135573625565, 0.017373800277709961, 0.002844260772690177, 0.00086432235548272729, 0.0146352369338274, 0.008761255070567131, 0.030901672318577766, 0.030907778069376945, 0.012769465334713459, 0.0088159199804067612, 0.16606816649436951, } };
const TfArray<16, int> quant41_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data42[16] = { -1073741824, 22224, -115704, 26221, 319735, 24795, 44817, 1629, -197930, 43019, 19140, 785276, -1073741824, 48775, 54820, -1073741824, };
const TfArray<1, int> tensor_dimension42 = { 1, { 16 } };
const TfArray<16, float> quant42_scale = { 16, { 1.3102037232926023e-09, 0.00014243097393773496, 0.00015057783457450569, 3.5322049370734021e-05, 9.7517840913496912e-06, 0.00014616835687775165, 6.3627805502619594e-05, 0.00045566933113150299, 4.3011459638364613e-06, 4.0446073398925364e-05, 0.00015161241753958166, 7.4499084803392179e-06, 1.1533876076441629e-09, 7.4977288022637367e-05, 5.2930845413357019e-05, 1.243374708748135e-10, } };
const TfArray<16, int> quant42_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data43[16*3*3*3] = { 
  /* [0][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [0][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [0][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [1][0][][] */ 36,-2,24, -13,-23,6, -127,-100,-62, 
  /* [1][1][][] */ -7,-4,-7, -32,-1,-15, -13,-25,0, 
  /* [1][2][][] */ -11,17,-7, -13,6,-10, 29,-14,7, 
  /* [2][0][][] */ 25,-5,7, 68,114,17, 37,-36,20, 
  /* [2][1][][] */ 15,16,12, 73,127,-14, 23,-1,5, 
  /* [2][2][][] */ 51,-61,26, 76,-41,-15, 36,-51,19, 
  /* [3][0][][] */ 30,43,-2, 48,94,2, 7,4,-8, 
  /* [3][1][][] */ 45,38,2, 91,127,16, -16,-28,2, 
  /* [3][2][][] */ 17,-5,1, 39,18,5, -1,-12,6, 
  /* [4][0][][] */ 62,52,-14, 40,70,-6, -2,-11,1, 
  /* [4][1][][] */ 78,79,67, 78,127,62, 56,44,5, 
  /* [4][2][][] */ 61,43,38, 74,109,35, -16,2,33, 
  /* [5][0][][] */ 10,5,-106, -6,-4,-106, -10,20,-36, 
  /* [5][1][][] */ 3,-51,-127, -4,-58,-126, -8,-4,-40, 
  /* [5][2][][] */ -9,-4,-25, 2,-8,-13, -3,3,-20, 
  /* [6][0][][] */ 33,-61,34, 56,-84,40, 19,-16,9, 
  /* [6][1][][] */ 45,-95,61, 71,-127,70, 15,-27,14, 
  /* [6][2][][] */ 27,-36,11, 20,-46,23, -6,7,-4, 
  /* [7][0][][] */ -14,36,20, -105,-31,7, -16,35,9, 
  /* [7][1][][] */ 4,8,14, -127,-92,-5, 1,2,9, 
  /* [7][2][][] */ -14,47,2, -17,13,-1, -26,28,-4, 
  /* [8][0][][] */ 120,127,100, 118,126,96, 115,123,72, 
  /* [8][1][][] */ 119,125,101, 116,123,97, 113,122,78, 
  /* [8][2][][] */ 112,122,77, 110,122,70, 101,118,-40, 
  /* [9][0][][] */ -5,11,19, 3,9,13, 11,10,1, 
  /* [9][1][][] */ 74,98,-16, 66,127,15, -6,23,22, 
  /* [9][2][][] */ -27,-18,12, 1,-21,0, 13,13,-14, 
  /* [10][0][][] */ -25,-84,-16, 34,94,22, -8,-13,0, 
  /* [10][1][][] */ -60,-104,-12, 79,127,16, -17,-27,2, 
  /* [10][2][][] */ -32,-20,4, 36,22,-10, -9,-2,9, 
  /* [11][0][][] */ -19,-29,-5, 3,-50,-5, 3,-107,-62, 
  /* [11][1][][] */ -62,-57,-32, -51,-78,-52, -24,-68,-64, 
  /* [11][2][][] */ -6,-39,-78, 119,127,64, -39,13,-48, 
  /* [12][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [12][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [12][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [13][0][][] */ -50,-95,-17, -60,-109,-25, -8,-16,-5, 
  /* [13][1][][] */ 62,114,15, 58,127,25, 8,17,11, 
  /* [13][2][][] */ -7,-18,3, 2,-17,-1, 1,5,-4, 
  /* [14][0][][] */ 46,-7,-37, 79,-27,-51, 37,-4,-16, 
  /* [14][1][][] */ 90,-22,-77, 127,-46,-93, 61,-20,-38, 
  /* [14][2][][] */ 59,-14,-48, 76,-27,-55, 30,-9,-16, 
  /* [15][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [15][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [15][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 16,3,3,3 } };
const TfArray<16, float> quant43_scale = { 16, { 3.3410194077987398e-07, 0.036319896578788757, 0.038397345691919327, 0.0090071223676204681, 0.0024867048487067223, 0.037272930145263672, 0.016225090250372887, 0.1161956712603569, 0.0010967921698465943, 0.010313748382031918, 0.038661163300275803, 0.0018997265724465251, 2.9411381774480105e-07, 0.019119206815958023, 0.013497364707291126, 3.1706054670621597e-08, } };
const TfArray<16, int> quant43_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.49739348888397217, } };
const TfArray<1, int> quant46_zero = { 1, { 4 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,48,48,48 } };
const TfArray<1, float> quant47_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant47_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,49,49,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant50_scale = { 1, { 0.36892950534820557, } };
const TfArray<1, int> quant50_zero = { 1, { 2 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant51_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant51_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant53_scale = { 1, { 0.4578595757484436, } };
const TfArray<1, int> quant53_zero = { 1, { -14 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.535777747631073, } };
const TfArray<1, int> quant54_zero = { 1, { -1 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant55_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant55_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,25,25,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.28638938069343567, } };
const TfArray<1, int> quant58_zero = { 1, { 11 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant59_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant59_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant60_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant61_scale = { 1, { 0.20607894659042358, } };
const TfArray<1, int> quant61_zero = { 1, { -30 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant62_scale = { 1, { 0.26980072259902954, } };
const TfArray<1, int> quant62_zero = { 1, { 20 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant63_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant63_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant65_scale = { 1, { 0.24683961272239685, } };
const TfArray<1, int> quant65_zero = { 1, { -5 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant66_scale = { 1, { 0.32471111416816711, } };
const TfArray<1, int> quant66_zero = { 1, { -12 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant67_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant67_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,12,12,32 } };
const TfArray<1, float> quant68_scale = { 1, { 0.054765596985816956, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,12,12,5 } };
const TfArray<1, float> quant69_scale = { 1, { 0.15022429823875427, } };
const TfArray<1, int> quant69_zero = { 1, { 11 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,12,12,5 } };
const TfArray<1, float> quant70_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant70_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 46,37,36 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfArray<2, int> inputs4 = { 2, { 47,1 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 48,35,34 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,33,32 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,31,30 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,29,28 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,27,26 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 50,53 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 54,25,24 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfArray<2, int> inputs12 = { 2, { 55,1 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 56,23,22 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,21,20 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,19,18 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,17,16 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,15,14 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 58,61 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 62,13,12 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,11,10 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,9,8 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 62,65 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 66,7,6 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,5,4 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,3,2 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 69 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 20, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 160, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension12, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension13, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension14, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension15, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension16, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension17, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension18, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension19, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension20, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension21, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data23, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension24, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data27, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension28, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data29, (TfLiteIntArray*)&g0::tensor_dimension29, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data30, (TfLiteIntArray*)&g0::tensor_dimension30, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension31, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension32, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data34, (TfLiteIntArray*)&g0::tensor_dimension34, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data35, (TfLiteIntArray*)&g0::tensor_dimension35, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data36, (TfLiteIntArray*)&g0::tensor_dimension36, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension37, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension38, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant39))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data40, (TfLiteIntArray*)&g0::tensor_dimension40, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data41, (TfLiteIntArray*)&g0::tensor_dimension41, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension42, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant42))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant43))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension44, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension45, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant45))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension46, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant46))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension47, 110592, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant47))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension48, 115248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant48))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant49))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 55296), (TfLiteIntArray*)&g0::tensor_dimension50, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant50))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension51, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant51))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension52, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant52))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension53, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant53))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension54, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant54))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension55, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant55))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension56, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant56))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension57, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant57))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36912), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant58))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant59))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension60, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant60))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension61, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant61))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension62, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension63, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant63))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension64, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant64))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 16128), (TfLiteIntArray*)&g0::tensor_dimension65, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant65))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension66, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant66))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension67, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant67))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension68, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant68))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 720), (TfLiteIntArray*)&g0::tensor_dimension69, 720, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant69))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension70, 720, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant70))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 71, };
const size_t tflNodes_subgraph_index[] = {0, 27, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  70, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_6_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 71;
  for (size_t i = 0; i < 71; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_6_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_6_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_6_invoke() {
  for (size_t i = 0; i < 27; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_6_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
